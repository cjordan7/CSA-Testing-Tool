diff --git a/libtiff/tif_dirread.c b/libtiff/tif_dirread.c
index d84147a0..e1de21f1 100644
--- a/libtiff/tif_dirread.c
+++ b/libtiff/tif_dirread.c
@@ -5879,7 +5879,11 @@ static void allocChoppedUpStripArrays(TIFF* tif, uint32_t nstrips,
         if (stripbytes > bytecount)
             stripbytes = bytecount;
         newcounts[i] = stripbytes;
+#ifdef MAGMA_ENABLE_FIXES
         newoffsets[i] = stripbytes ? offset : 0;
+#else
+        newoffsets[i] = offset;
+#endif
         offset += stripbytes;
         bytecount -= stripbytes;
     }
@@ -5954,12 +5958,22 @@ ChopUpSingleUncompressedStrip(TIFF* tif)
 	 */
 	if (rowsperstrip >= td->td_rowsperstrip)
 		return;
+#ifdef MAGMA_ENABLE_FIXES
         nstrips = TIFFhowmany_32(td->td_imagelength, rowsperstrip);
         if( nstrips == 0 )
             return;
-
+#else
+        uint64_t nstrips64 = TIFFhowmany_64(bytecount, stripbytes);
+        if ((nstrips64==0)||(nstrips64>0xFFFFFFFF)) /* something is wonky, do nothing. */
+            return;
+        nstrips = (uint32_t)nstrips64;
+#endif
+#ifdef MAGMA_ENABLE_CANARIES
+        MAGMA_LOG("%MAGMA_BUG%", nstrips > TIFFhowmany_32(td->td_imagelength, rowsperstrip))//TIF007.patch;
+#endif
         /* If we are going to allocate a lot of memory, make sure that the */
         /* file is as big as needed */
+#ifdef MAGMA_ENABLE_FIXES
         if( tif->tif_mode == O_RDONLY &&
             nstrips > 1000000 &&
             (offset >= TIFFGetFileSize(tif) ||
@@ -5967,6 +5981,13 @@ ChopUpSingleUncompressedStrip(TIFF* tif)
         {
             return;
         }
+#endif
+#ifdef MAGMA_ENABLE_CANARIES
+        MAGMA_LOG("%MAGMA_BUG%", MAGMA_AND(tif->tif_mode == O_RDONLY, //TIF014.patch\
+	        MAGMA_AND(nstrips > 1000000, \
+	        MAGMA_OR(offset >= TIFFGetFileSize(tif), \
+	         stripbytes * (nstrips - 1) > (TIFFGetFileSize(tif) - offset)))));
+#endif
 
         allocChoppedUpStripArrays(tif, nstrips, stripbytes, rowsperstrip);
 }
diff --git a/libtiff/tif_dirwrite.c b/libtiff/tif_dirwrite.c
index 032a4be9..e7859456 100644
--- a/libtiff/tif_dirwrite.c
+++ b/libtiff/tif_dirwrite.c
@@ -2101,14 +2101,28 @@ TIFFWriteDirectoryTagTransferfunction(TIFF* tif, uint32_t* ndir, TIFFDirEntry* d
 		n=3;
 	if (n==3)
 	{
+#ifdef MAGMA_ENABLE_CANARIES
+		MAGMA_LOG("%MAGMA_BUG%", tif->tif_dir.td_transferfunction[2] == NULL)//TIF009.patch;
+#endif
+#ifdef MAGMA_ENABLE_FIXES
 		if (tif->tif_dir.td_transferfunction[2] == NULL ||
 		    !_TIFFmemcmp(tif->tif_dir.td_transferfunction[0],tif->tif_dir.td_transferfunction[2],m*sizeof(uint16_t)))
+#else
+		if (!_TIFFmemcmp(tif->tif_dir.td_transferfunction[0],tif->tif_dir.td_transferfunction[2],m*sizeof(uint16_t)))
+#endif
 			n=2;
 	}
 	if (n==2)
 	{
+#ifdef MAGMA_ENABLE_CANARIES
+		MAGMA_LOG("%MAGMA_BUG%", tif->tif_dir.td_transferfunction[1] == NULL)//TIF009.patch;
+#endif
+#ifdef MAGMA_ENABLE_FIXES
 		if (tif->tif_dir.td_transferfunction[1] == NULL ||
 		    !_TIFFmemcmp(tif->tif_dir.td_transferfunction[0],tif->tif_dir.td_transferfunction[1],m*sizeof(uint16_t)))
+#else
+		if (!_TIFFmemcmp(tif->tif_dir.td_transferfunction[0],tif->tif_dir.td_transferfunction[1],m*sizeof(uint16_t)))
+#endif
 			n=1;
 	}
 	if (n==0)
diff --git a/libtiff/tif_jbig.c b/libtiff/tif_jbig.c
index 74086338..396e3fcc 100644
--- a/libtiff/tif_jbig.c
+++ b/libtiff/tif_jbig.c
@@ -106,12 +106,21 @@ static int JBIGDecode(TIFF* tif, uint8_t* buffer, tmsize_t size, uint16_t s)
 	}
 	else if( (tmsize_t)decodedSize > size )
 	{
+#ifdef MAGMA_ENABLE_FIXES
 	    TIFFErrorExt(tif->tif_clientdata, "JBIG",
 	                 "Decoded %lu bytes, whereas %"TIFF_SSIZE_FORMAT" were requested",
 	                 decodedSize, size);
 	    jbg_dec_free(&decoder);
 	    return 0;
+#else
+	    TIFFWarningExt(tif->tif_clientdata, "JBIG",
+	                 "Decoded %lu bytes, whereas %lu were requested",
+	                 decodedSize, (unsigned long)size);
+#endif
 	}
+#ifdef MAGMA_ENABLE_CANARIES
+	MAGMA_LOG("%MAGMA_BUG%", (tmsize_t)decodedSize > size)//TIF013.patch;
+#endif
 	pImage = jbg_dec_getimage(&decoder, 0);
 	_TIFFmemcpy(buffer, pImage, decodedSize);
 	jbg_dec_free(&decoder);
diff --git a/libtiff/tif_luv.c b/libtiff/tif_luv.c
index 13765eab..f8dd7775 100644
--- a/libtiff/tif_luv.c
+++ b/libtiff/tif_luv.c
@@ -1566,7 +1566,9 @@ LogLuvClose(TIFF* tif)
 	 * before they have been recorded in the file, we reset them here.
          * Note: this is really a nasty approach. See PixarLogClose
 	 */
+#ifdef MAGMA_ENABLE_FIXES
         if( sp->encoder_state )
+#endif
         {
             /* See PixarLogClose. Might avoid issues with tags whose size depends
              * on those below, but not completely sure this is enough. */
@@ -1575,6 +1577,9 @@ LogLuvClose(TIFF* tif)
             td->td_bitspersample = 16;
             td->td_sampleformat = SAMPLEFORMAT_INT;
         }
+#ifdef MAGMA_ENABLE_CANARIES
+    MAGMA_LOG("%MAGMA_BUG%", sp->encoder_state == 0)//TIF005.patch;
+#endif
 }
 
 static void
diff --git a/libtiff/tif_lzw.c b/libtiff/tif_lzw.c
index 2f9bfb84..a6d6279b 100644
--- a/libtiff/tif_lzw.c
+++ b/libtiff/tif_lzw.c
@@ -749,9 +749,16 @@ LZWDecodeCompat(TIFF* tif, uint8_t* op0, tmsize_t occ0, uint16_t s)
 			len = codep->length;
 			tp = op + len;
 			do {
+#ifdef MAGMA_ENABLE_CANARIES
+				MAGMA_LOG("%MAGMA_BUG%", tp <= op); // or use == instead of <= so the bug is reported once onl//TIF010.patchy
+#endif
 				*--tp = codep->value;
 				codep = codep->next;
+#ifdef MAGMA_ENABLE_FIXES
 			} while (codep && tp > op);
+#else
+			} while (codep);
+#endif
 			assert(occ >= len);
 			op += len;
 			occ -= len;
diff --git a/libtiff/tif_next.c b/libtiff/tif_next.c
index 695fc5d4..01a49e52 100644
--- a/libtiff/tif_next.c
+++ b/libtiff/tif_next.c
@@ -122,15 +122,26 @@ NeXTDecode(TIFF* tif, uint8_t* buf, tmsize_t occ, uint16_t s)
 				 * bounds, potentially resulting in a security
 				 * issue.
 				 */
+#ifdef MAGMA_ENABLE_FIXES
 				while (n-- > 0 && npixels < imagewidth && op_offset < scanline)
+#else
+                while (n-- > 0 && npixels < imagewidth)
+#endif
+                {
+#ifdef MAGMA_ENABLE_CANARIES
+                    MAGMA_LOG("%MAGMA_BUG%", op_offset >= scanline)//TIF008.patch;
+#endif
 					SETPIXEL(op, grey);
+                }
 				if (npixels >= imagewidth)
 					break;
+#ifdef MAGMA_ENABLE_FIXES
                 if (op_offset >= scanline ) {
                     TIFFErrorExt(tif->tif_clientdata, module, "Invalid data for scanline %"PRIu32,
                         tif->tif_row);
                     return (0);
                 }
+#endif
 				if (cc == 0)
 					goto bad;
 				n = *bp++;
diff --git a/libtiff/tif_ojpeg.c b/libtiff/tif_ojpeg.c
index 66cd275f..01b0388a 100644
--- a/libtiff/tif_ojpeg.c
+++ b/libtiff/tif_ojpeg.c
@@ -790,6 +790,7 @@ OJPEGDecode(TIFF* tif, uint8_t* buf, tmsize_t cc, uint16_t s)
         static const char module[]="OJPEGDecode";
 	OJPEGState* sp=(OJPEGState*)tif->tif_data;
 	(void)s;
+#ifdef MAGMA_ENABLE_FIXES
         if( !sp->decoder_ok )
         {
             TIFFErrorExt(tif->tif_clientdata,module,"Cannot decode: decoder not correctly initialized");
@@ -799,6 +800,10 @@ OJPEGDecode(TIFF* tif, uint8_t* buf, tmsize_t cc, uint16_t s)
         {
             return 0;
         }
+#endif
+#ifdef MAGMA_ENABLE_CANARIES
+    MAGMA_LOG("%MAGMA_BUG%", sp->decoder_ok == 0)//TIF004.patch;
+#endif
 	if (sp->libjpeg_jpeg_query_style==0)
 	{
 		if (OJPEGDecodeRaw(tif,buf,cc)==0)
diff --git a/libtiff/tif_pixarlog.c b/libtiff/tif_pixarlog.c
index 87c67097..20b164e0 100644
--- a/libtiff/tif_pixarlog.c
+++ b/libtiff/tif_pixarlog.c
@@ -798,12 +798,17 @@ PixarLogDecode(TIFF* tif, uint8_t* op, tmsize_t occ, uint16_t s)
 		TIFFErrorExt(tif->tif_clientdata, module, "ZLib cannot deal with buffers this size");
 		return (0);
 	}
+#ifdef MAGMA_ENABLE_FIXES
 	/* Check that we will not fill more than what was allocated */
 	if ((tmsize_t)sp->stream.avail_out > sp->tbuf_size)
 	{
 		TIFFErrorExt(tif->tif_clientdata, module, "sp->stream.avail_out > sp->tbuf_size");
 		return (0);
 	}
+#endif
+#ifdef MAGMA_ENABLE_CANARIES
+	MAGMA_LOG("%MAGMA_BUG%", (tmsize_t)sp->stream.avail_out > sp->tbuf_size)//TIF002.patch;
+#endif
 	do {
 		int state = inflate(&sp->stream, Z_PARTIAL_FLUSH);
 		if (state == Z_STREAM_END) {
@@ -1261,8 +1266,10 @@ PixarLogClose(TIFF* tif)
 	 * readers that don't know about PixarLog, or how to set
 	 * the PIXARLOGDATFMT pseudo-tag.
 	 */
-
-        if (sp->state&PLSTATE_INIT) {
+#ifdef MAGMA_ENABLE_FIXES
+        if (sp->state&PLSTATE_INIT)
+#endif
+        {
             /* We test the state to avoid an issue such as in
              * http://bugzilla.maptools.org/show_bug.cgi?id=2604
              * What appends in that case is that the bitspersample is 1 and
@@ -1274,6 +1281,9 @@ PixarLogClose(TIFF* tif)
             td->td_bitspersample = 8;
             td->td_sampleformat = SAMPLEFORMAT_UINT;
         }
+#ifdef MAGMA_ENABLE_CANARIES
+    MAGMA_LOG("%MAGMA_BUG%", (sp->state&PLSTATE_INIT) == 0)//TIF006.patch;
+#endif
 }
 
 static void
diff --git a/libtiff/tif_predict.c b/libtiff/tif_predict.c
index 4aa4af69..d251f290 100644
--- a/libtiff/tif_predict.c
+++ b/libtiff/tif_predict.c
@@ -282,13 +282,17 @@ horAcc8(TIFF* tif, uint8_t* cp0, tmsize_t cc)
 	tmsize_t stride = PredictorState(tif)->stride;
 
 	unsigned char* cp = (unsigned char*) cp0;
+#ifdef MAGMA_ENABLE_FIXES
     if((cc%stride)!=0)
     {
         TIFFErrorExt(tif->tif_clientdata, "horAcc8",
                      "%s", "(cc%stride)!=0");
         return 0;
     }
-
+#endif
+#ifdef MAGMA_ENABLE_CANARIES
+    MAGMA_LOG("%MAGMA_BUG%", (cc%stride)!=0);//TIF001.patch
+#endif
 	if (cc > stride) {
 		/*
 		 * Pipeline the most common cases.
@@ -350,13 +354,17 @@ horAcc16(TIFF* tif, uint8_t* cp0, tmsize_t cc)
 	tmsize_t stride = PredictorState(tif)->stride;
 	uint16_t* wp = (uint16_t*) cp0;
 	tmsize_t wc = cc / 2;
-
+#ifdef MAGMA_ENABLE_FIXES
     if((cc%(2*stride))!=0)
     {
         TIFFErrorExt(tif->tif_clientdata, "horAcc16",
                      "%s", "cc%(2*stride))!=0");
         return 0;
     }
+#endif
+#ifdef MAGMA_ENABLE_CANARIES
+    MAGMA_LOG("%MAGMA_BUG%", (cc%(2*stride))!=0);//TIF001.patch
+#endif
 
 	if (wc > stride) {
 		wc -= stride;
@@ -385,14 +393,17 @@ horAcc32(TIFF* tif, uint8_t* cp0, tmsize_t cc)
 	tmsize_t stride = PredictorState(tif)->stride;
 	uint32_t* wp = (uint32_t*) cp0;
 	tmsize_t wc = cc / 4;
-
+#ifdef MAGMA_ENABLE_FIXES
     if((cc%(4*stride))!=0)
     {
         TIFFErrorExt(tif->tif_clientdata, "horAcc32",
                      "%s", "cc%(4*stride))!=0");
         return 0;
     }
-
+#endif
+#ifdef MAGMA_ENABLE_CANARIES
+    MAGMA_LOG("%MAGMA_BUG%", (cc%(4*stride))!=0);//TIF001.patch
+#endif
 	if (wc > stride) {
 		wc -= stride;
 		do {
@@ -415,14 +426,17 @@ fpAcc(TIFF* tif, uint8_t* cp0, tmsize_t cc)
 	tmsize_t count = cc;
 	uint8_t *cp = (uint8_t *) cp0;
 	uint8_t *tmp;
-
+#ifdef MAGMA_ENABLE_FIXES
     if(cc%(bps*stride)!=0)
     {
         TIFFErrorExt(tif->tif_clientdata, "fpAcc",
                      "%s", "cc%(bps*stride))!=0");
         return 0;
     }
-
+#endif
+#ifdef MAGMA_ENABLE_CANARIES
+    MAGMA_LOG("%MAGMA_BUG%", (cc%(bps*stride))!=0);//TIF001.patch
+#endif
     tmp = (uint8_t *)_TIFFmalloc(cc);
 	if (!tmp)
 		return 0;
@@ -486,12 +500,17 @@ PredictorDecodeTile(TIFF* tif, uint8_t* op0, tmsize_t occ0, uint16_t s)
 	if ((*sp->decodetile)(tif, op0, occ0, s)) {
 		tmsize_t rowsize = sp->rowsize;
 		assert(rowsize > 0);
+#ifdef MAGMA_ENABLE_FIXES
 		if((occ0%rowsize) !=0)
         {
             TIFFErrorExt(tif->tif_clientdata, "PredictorDecodeTile",
                          "%s", "occ0%rowsize != 0");
             return 0;
         }
+#endif
+#ifdef MAGMA_ENABLE_CANARIES
+                MAGMA_LOG("%MAGMA_BUG%", (occ0%rowsize)!=0);//TIF001.patch
+#endi
 		assert(sp->decodepfunc != NULL);
 		while (occ0 > 0) {
 			if( !(*sp->decodepfunc)(tif, op0, rowsize) )
@@ -511,14 +530,17 @@ horDiff8(TIFF* tif, uint8_t* cp0, tmsize_t cc)
 	TIFFPredictorState* sp = PredictorState(tif);
 	tmsize_t stride = sp->stride;
 	unsigned char* cp = (unsigned char*) cp0;
-
+#ifdef MAGMA_ENABLE_FIXES
     if((cc%stride)!=0)
     {
         TIFFErrorExt(tif->tif_clientdata, "horDiff8",
                      "%s", "(cc%stride)!=0");
         return 0;
     }
-
+#endif
+#ifdef MAGMA_ENABLE_CANARIES
+    MAGMA_LOG("%MAGMA_BUG%", (cc%stride)!=0);//TIF001.patch
+#endif
 	if (cc > stride) {
 		cc -= stride;
 		/*
@@ -566,14 +588,17 @@ horDiff16(TIFF* tif, uint8_t* cp0, tmsize_t cc)
 	tmsize_t stride = sp->stride;
 	uint16_t *wp = (uint16_t*) cp0;
 	tmsize_t wc = cc/2;
-
+#ifdef MAGMA_ENABLE_FIXES
     if((cc%(2*stride))!=0)
     {
         TIFFErrorExt(tif->tif_clientdata, "horDiff8",
                      "%s", "(cc%(2*stride))!=0");
         return 0;
     }
-
+#endif
+#ifdef MAGMA_ENABLE_CANARIES
+    MAGMA_LOG("%MAGMA_BUG%", (cc%(2*stride))!=0);//TIF001.patch
+#endif
 	if (wc > stride) {
 		wc -= stride;
 		wp += wc - 1;
@@ -606,14 +631,17 @@ horDiff32(TIFF* tif, uint8_t* cp0, tmsize_t cc)
 	tmsize_t stride = sp->stride;
 	uint32_t *wp = (uint32_t*) cp0;
 	tmsize_t wc = cc/4;
-
+#ifdef MAGMA_ENABLE_FIXES
     if((cc%(4*stride))!=0)
     {
         TIFFErrorExt(tif->tif_clientdata, "horDiff32",
                      "%s", "(cc%(4*stride))!=0");
         return 0;
     }
-
+#endif
+#ifdef MAGMA_ENABLE_CANARIES
+    MAGMA_LOG("%MAGMA_BUG%", (cc%(4*stride))!=0);//TIF001.patch
+#endif
 	if (wc > stride) {
 		wc -= stride;
 		wp += wc - 1;
@@ -651,14 +679,17 @@ fpDiff(TIFF* tif, uint8_t* cp0, tmsize_t cc)
 	tmsize_t count;
 	uint8_t *cp = (uint8_t *) cp0;
 	uint8_t *tmp;
-
+#ifdef MAGMA_ENABLE_FIXES
     if((cc%(bps*stride))!=0)
     {
         TIFFErrorExt(tif->tif_clientdata, "fpDiff",
                      "%s", "(cc%(bps*stride))!=0");
         return 0;
     }
-
+#endif
+#ifdef MAGMA_ENABLE_CANARIES
+    MAGMA_LOG("%MAGMA_BUG%", (cc%(bps*stride))!=0);//TIF001.patch
+#endif
     tmp = (uint8_t *)_TIFFmalloc(cc);
 	if (!tmp)
 		return 0;
@@ -730,6 +761,7 @@ PredictorEncodeTile(TIFF* tif, uint8_t* bp0, tmsize_t cc0, uint16_t s)
 
 	rowsize = sp->rowsize;
 	assert(rowsize > 0);
+#ifdef MAGMA_ENABLE_FIXES
 	if((cc0%rowsize)!=0)
     {
         TIFFErrorExt(tif->tif_clientdata, "PredictorEncodeTile",
@@ -737,6 +769,10 @@ PredictorEncodeTile(TIFF* tif, uint8_t* bp0, tmsize_t cc0, uint16_t s)
         _TIFFfree( working_copy );
         return 0;
     }
+#endif
+#ifdef MAGMA_ENABLE_CANARIES
+        MAGMA_LOG("%MAGMA_BUG%", (cc0%rowsize)!=0);//TIF001.patch
+#endif
 	while (cc > 0) {
 		(*sp->encodepfunc)(tif, bp, rowsize);
 		cc -= rowsize;
diff --git a/libtiff/tif_print.c b/libtiff/tif_print.c
index 6e9f58ff..b4972e29 100644
--- a/libtiff/tif_print.c
+++ b/libtiff/tif_print.c
@@ -539,10 +539,19 @@ TIFFPrintDirectory(TIFF* tif, FILE* fd, long flags)
 				uint16_t i;
 				fprintf(fd, "    %2ld: %5"PRIu16,
 				    l, td->td_transferfunction[0][l]);
-				for (i = 1; i < td->td_samplesperpixel - td->td_extrasamples && i < 3; i++)
+#ifdef MAGMA_ENABLE_FIXES
+				        for (i = 1; i < td->td_samplesperpixel - td->td_extrasamples && i < 3; i++)
+#else
+                                        for (i = 1; i < td->td_samplesperpixel; i++)
+#endif
+                                                {
+#ifdef MAGMA_ENABLE_CANARIES
+					MAGMA_LOG("%MAGMA_BUG%", MAGMA_OR(i == sizeof(td->td_transferfunction) / sizeof(*td->td_transferfunction), i == (td->td_samplesperpixel - td->td_extrasamples)));//TIF011.patch
+#endif
 					fprintf(fd, " %5"PRIu16,
-					    td->td_transferfunction[i][l]);
-				fputc('\n', fd);
+                                                td->td_transferfunction[i][l]);
+                                }
+                                fputc('\n', fd);
 			}
 		} else
 			fprintf(fd, "(present)\n");
diff --git a/libtiff/tif_read.c b/libtiff/tif_read.c
index a4c60b4f..2422cc8e 100644
--- a/libtiff/tif_read.c
+++ b/libtiff/tif_read.c
@@ -484,7 +484,14 @@ static tmsize_t TIFFReadEncodedStripGetStripSize(TIFF* tif, uint32_t strip, uint
 	rowsperstrip=td->td_rowsperstrip;
 	if (rowsperstrip>td->td_imagelength)
 		rowsperstrip=td->td_imagelength;
+#ifdef MAGMA_ENABLE_FIXES
 	stripsperplane= TIFFhowmany_32_maxuint_compat(td->td_imagelength, rowsperstrip);
+else
+        stripsperplane=((td->td_imagelength+rowsperstrip-1)/rowsperstrip);
+#endif
+#ifdef MAGMA_ENABLE_CANARIES
+        MAGMA_LOG("%MAGMA_BUG%", stripsperplane == 0);//TIF003.patch
+#endif
 	stripinplane=(strip%stripsperplane);
 	if( pplane ) *pplane=(uint16_t)(strip / stripsperplane);
 	rows=td->td_imagelength-stripinplane*rowsperstrip;
