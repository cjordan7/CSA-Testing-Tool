diff --git a/src/aiff.c b/src/aiff.c
index 7ad03126..41e76c42 100644
--- a/src/aiff.c
+++ b/src/aiff.c
@@ -1773,7 +1773,14 @@ aiff_read_chanmap (SF_PRIVATE * psf, unsigned dword)
 		psf_binheader_readf (psf, "j", dword - bytesread) ;
 
 	if (map_info->channel_map != NULL)
+#ifdef MAGMA_ENABLE_FIXES//////SND005.patch
 	{	size_t chanmap_size = SF_MIN (psf->sf.channels, layout_tag & 0xffff) * sizeof (psf->channel_map [0]) ;
+#else
+	{    size_t chanmap_size = psf->sf.channels * sizeof (psf->channel_map [0]) ;
+#endif
+#ifdef MAGMA_ENABLE_CANARIES////SND005.patch
+	    MAGMA_LOG("%MAGMA_BUG%", psf->sf.channels > (layout_tag & 0xffff));
+#endif////SND005.patch
 
 		free (psf->channel_map) ;
 
diff --git a/src/alaw.c b/src/alaw.c
index 4be642e5..a3720a10 100644
--- a/src/alaw.c
+++ b/src/alaw.c
@@ -327,9 +327,17 @@ s2alaw_array (const short *ptr, int count, unsigned char *buffer)
 static inline void
 i2alaw_array (const int *ptr, int count, unsigned char *buffer)
 {	for (int i = 0 ; i < count ; i++)
+#ifdef MAGMA_ENABLE_FIXES//SND015.patch
 	{	if (ptr [i] == INT_MIN)
 			buffer [i] = alaw_encode [INT_MAX >> (16 + 4)] ;
 		else if (ptr [i] >= 0)
+#else//SND015.patch
+	{
+#ifdef MAGMA_ENABLE_CANARIES//SND015.patch
+		MAGMA_LOG("%MAGMA_BUG%", ptr[i] == INT_MIN);
+#endif//SND015.patch
+		if (ptr [i] >= 0)
+#endif//SND015.patch
 			buffer [i] = alaw_encode [ptr [i] >> (16 + 4)] ;
 		else
 			buffer [i] = 0x7F & alaw_encode [- ptr [i] >> (16 + 4)] ;
@@ -349,9 +357,17 @@ f2alaw_array (const float *ptr, int count, unsigned char *buffer, float normfact
 static inline void
 d2alaw_array (const double *ptr, int count, unsigned char *buffer, double normfact)
 {	for (int i = 0 ; i < count ; i++)
+#ifdef MAGMA_ENABLE_FIXES//SND014.patch
 	{	if (!isfinite (ptr [i]))
 			buffer [i] = 0 ;
 		else if (ptr [i] >= 0)
+#else
+	{
+#ifdef MAGMA_ENABLE_CANARIES//SND014.patch
+		MAGMA_LOG("%MAGMA_BUG%", !isfinite(ptr[i]));
+#endif
+		if (ptr [i] >= 0)
+#endif//SND014.patch
 			buffer [i] = alaw_encode [psf_lrint (normfact * ptr [i])] ;
 		else
 			buffer [i] = 0x7F & alaw_encode [- psf_lrint (normfact * ptr [i])] ;
@@ -550,4 +566,3 @@ alaw_write_d2alaw	(SF_PRIVATE *psf, const double *ptr, sf_count_t len)
 
 	return total ;
 } /* alaw_write_d2alaw */
-
diff --git a/src/common.c b/src/common.c
index 5f09ec0e..8e0c659a 100644
--- a/src/common.c
+++ b/src/common.c
@@ -716,15 +716,29 @@ psf_binheader_writef (SF_PRIVATE *psf, const char *format, ...)
 					*/
 					strptr = va_arg (argptr, char *) ;
 					size = strlen (strptr) ;
+#ifdef MAGMA_ENABLE_FIXES//SND012.patch
 					if (psf->header.indx + 4 + (sf_count_t) size + (sf_count_t) (size & 1) > psf->header.len && psf_bump_header_allocation (psf, 4 + size + (size & 1)))
+#else
+#ifdef MAGMA_ENABLE_CANARIES//SND012.patch
+					MAGMA_LOG("%MAGMA_BUG%", psf->header.indx + 4 + (sf_count_t) size + (sf_count_t) (size & 1) > psf->header.len);
+#endif//SND012.patch
+					if (psf->header.indx + (sf_count_t) size > psf->header.len && psf_bump_header_allocation (psf, size))
+#endif//SND012.patch
 						break ;
 					if (psf->rwf_endian == SF_ENDIAN_BIG)
 						header_put_be_int (psf, size) ;
 					else
 						header_put_le_int (psf, size) ;
+#ifdef MAGMA_ENABLE_FIXES//SND012.patch
 					memcpy (&(psf->header.ptr [psf->header.indx]), strptr, size + (size & 1)) ;
+#else//SND012.patch
+					memcpy (&(psf->header.ptr [psf->header.indx]), strptr, size + 1) ;
+#endif//SND012.patch
 					size += (size & 1) ;
 					psf->header.indx += size ;
+#ifndef MAGMA_ENABLE_FIXES//SND012.patch
+					psf->header.ptr [psf->header.indx] = 0 ;
+#endif//SND012.patch
 					count += 4 + size ;
 					break ;
 
@@ -736,7 +750,14 @@ psf_binheader_writef (SF_PRIVATE *psf, const char *format, ...)
 					size = (size & 1) ? size : size + 1 ;
 					size = (size > 254) ? 254 : size ;
 
+#ifdef MAGMA_ENABLE_FIXES//SND013.patch
 					if (psf->header.indx + 1 + (sf_count_t) size > psf->header.len && psf_bump_header_allocation (psf, 1 + size))
+#else//SND013.patch
+#ifdef MAGMA_ENABLE_CANARIES
+					MAGMA_LOG("%MAGMA_BUG%", psf->header.indx + 1 + (sf_count_t) size > psf->header.len);
+#endif//SND013.patch
+					if (psf->header.indx + (sf_count_t) size > psf->header.len && psf_bump_header_allocation (psf, size))
+#endif//SND013.patch
 						break ;
 
 					header_put_byte (psf, size) ;
diff --git a/src/double64.c b/src/double64.c
index df49a8ff..50d508f3 100644
--- a/src/double64.c
+++ b/src/double64.c
@@ -91,7 +91,14 @@ int
 double64_init	(SF_PRIVATE *psf)
 {	static int double64_caps ;
 
+#ifdef MAGMA_ENABLE_FIXES//SND016.patch
 	if (psf->sf.channels < 1 || psf->sf.channels > SF_MAX_CHANNELS)
+#else//SND016.patch
+#ifdef MAGMA_ENABLE_CANARIES//SND016.patch
+    MAGMA_LOG("%MAGMA_BUG%", psf->sf.channels > SF_MAX_CHANNELS);
+#endif//SND016.patch
+	if (psf->sf.channels < 1)
+#endif//SND016.patch
 	{	psf_log_printf (psf, "double64_init : internal error : channels = %d\n", psf->sf.channels) ;
 		return SFE_INTERNAL ;
 		} ;
@@ -1060,4 +1067,3 @@ bd2d_write (double *buffer, int count)
 	{	DOUBLE64_WRITE (buffer [i], (unsigned char*) &buffer [i]) ;
 		} ;
 } /* bd2d_write */
-
diff --git a/src/file_io.c b/src/file_io.c
index 334ba2a2..79b8407b 100644
--- a/src/file_io.c
+++ b/src/file_io.c
@@ -386,8 +386,13 @@ psf_fwrite (const void *ptr, sf_count_t bytes, sf_count_t items, SF_PRIVATE *psf
 {	sf_count_t total = 0 ;
 	ssize_t	count ;
 
+#ifdef MAGMA_ENABLE_FIXES////SND004.patch
 	if (bytes == 0 || items == 0)
 		return 0 ;
+#endif
+#ifdef MAGMA_ENABLE_CANARIES////SND004.patch
+    MAGMA_LOG("%MAGMA_BUG%", MAGMA_OR(bytes == 0, items == 0));
+#endif////SND004.patch
 
 	if (psf->virtual_io)
 		return psf->vio.write (ptr, bytes*items, psf->vio_user_data) / bytes ;
@@ -819,7 +824,7 @@ psf_open_handle (PSF_FILE * pfile)
 	pwszPath = malloc (nResult * sizeof (WCHAR)) ;
 	if (!pwszPath)
 		return INVALID_HANDLE_VALUE ;
-	
+
 	int nResult2 = MultiByteToWideChar (CP_UTF8, 0, pfile->path, -1, pwszPath, nResult) ;
 	if (nResult != nResult2)
 	{	free (pwszPath) ;
@@ -1206,4 +1211,3 @@ psf_ftruncate (SF_PRIVATE *psf, sf_count_t len)
 } /* psf_ftruncate */
 
 #endif
-
diff --git a/src/flac.c b/src/flac.c
index 8caf4fa1..82874af1 100644
--- a/src/flac.c
+++ b/src/flac.c
@@ -169,6 +169,7 @@ flac_buffer_copy (SF_PRIVATE *psf)
 	const int32_t* const *buffer = pflac->wbuffer ;
 	unsigned i = 0, j, offset, channels, len ;
 
+#ifdef MAGMA_ENABLE_FIXES//SND006.patch
 	if (psf->sf.channels != (int) frame->header.channels)
 	{	psf_log_printf (psf, "Error: FLAC frame changed from %d to %d channels\n"
 									"Nothing to do but to error out.\n" ,
@@ -176,6 +177,10 @@ flac_buffer_copy (SF_PRIVATE *psf)
 		psf->error = SFE_FLAC_CHANNEL_COUNT_CHANGED ;
 		return 0 ;
 		} ;
+#endif//SND006.patch
+#ifdef MAGMA_ENABLE_CANARIES
+    MAGMA_LOG("%MAGMA_BUG%", psf->sf.channels != (int) frame->header.channels);
+#endif//SND006.patch
 
 	/*
 	**	frame->header.blocksize is variable and we're using a constant blocksize
@@ -441,19 +446,29 @@ sf_flac_meta_callback (const FLAC__StreamDecoder * UNUSED (decoder), const FLAC_
 
 	switch (metadata->type)
 	{	case FLAC__METADATA_TYPE_STREAMINFO :
-			if (psf->sf.channels > 0 && psf->sf.channels != (int) metadata->data.stream_info.channels)
+#ifdef MAGMA_ENABLE_FIXES//SND024.patch
+                if (psf->sf.channels > 0 && psf->sf.channels != (int) metadata->data.stream_info.channels)
 			{	psf_log_printf (psf, "Error: FLAC stream changed from %d to %d channels\n"
 									"Nothing to do but to error out.\n" ,
 									psf->sf.channels, metadata->data.stream_info.channels) ;
 				psf->error = SFE_FLAC_CHANNEL_COUNT_CHANGED ;
 				return ;
 				} ;
+#endif//SND024.patch
+#ifdef MAGMA_ENABLE_CANARIES//SND024.patch
+            MAGMA_LOG("%MAGMA_BUG%", MAGMA_AND(psf->sf.channels > 0, psf->sf.channels != (int) metadata->data.stream_info.channels));
+#endif//SND024.patch
 
+#ifdef MAGMA_ENABLE_FIXES//SND007.patch
 			if (psf->sf.channels > 0 && psf->sf.samplerate != (int) metadata->data.stream_info.sample_rate)
 			{	psf_log_printf (psf, "Warning: FLAC stream changed sample rates from %d to %d.\n"
 									"Carrying on as if nothing happened.",
 									psf->sf.samplerate, metadata->data.stream_info.sample_rate) ;
 				} ;
+#endif//SND007.patch
+#ifdef MAGMA_ENABLE_CANARIES
+            MAGMA_LOG("%MAGMA_BUG%", MAGMA_AND(psf->sf.channels > 0, psf->sf.samplerate != (int) metadata->data.stream_info.sample_rate));
+#endif//SND007.patch
 			psf->sf.channels = metadata->data.stream_info.channels ;
 			psf->sf.samplerate = metadata->data.stream_info.sample_rate ;
 			psf->sf.frames = metadata->data.stream_info.total_samples ;
diff --git a/src/ogg_opus.c b/src/ogg_opus.c
index dfa446ee..cb3971e7 100644
--- a/src/ogg_opus.c
+++ b/src/ogg_opus.c
@@ -162,8 +162,8 @@
 #if HAVE_EXTERNAL_XIPH_LIBS
 
 #include <ogg/ogg.h>
-#include <opus/opus.h>
-#include <opus/opus_multistream.h>
+#include <opus.h>
+#include <opus_multistream.h>
 
 #include "ogg.h"
 #include "ogg_vcomment.h"
diff --git a/src/paf.c b/src/paf.c
index 871931c6..c5af450e 100644
--- a/src/paf.c
+++ b/src/paf.c
@@ -198,8 +198,13 @@ paf_read_header	(SF_PRIVATE *psf)
 		psf->endian = SF_ENDIAN_BIG ;
 		} ;
 
+#ifdef MAGMA_ENABLE_FIXES//SND001.patch
 	if (paf_fmt.channels < 1 || paf_fmt.channels > SF_MAX_CHANNELS)
 		return SFE_PAF_BAD_CHANNELS ;
+#endif
+#ifdef MAGMA_ENABLE_CANARIES//SND001.patch
+    MAGMA_LOG("%MAGMA_BUG%", MAGMA_OR(paf_fmt.channels < 1, paf_fmt.channels > SF_MAX_CHANNELS));
+#endif//SND001.patch
 
 	psf->datalength = psf->filelength - psf->dataoffset ;
 
@@ -815,4 +820,3 @@ paf24_write_d (SF_PRIVATE *psf, const double *ptr, sf_count_t len)
 
 	return total ;
 } /* paf24_write_d */
-
diff --git a/src/sd2.c b/src/sd2.c
index f5ef9de2..f18df825 100644
--- a/src/sd2.c
+++ b/src/sd2.c
@@ -457,10 +457,15 @@ sd2_parse_rsrc_fork (SF_PRIVATE *psf)
 
 	rsrc.type_offset = rsrc.map_offset + 30 ;
 
+#ifdef MAGMA_ENABLE_FIXES//SND002.patch
 	if (rsrc.map_offset + 28 > rsrc.rsrc_len)
 	{	psf_log_printf (psf, "Bad map offset.\n") ;
 		goto parse_rsrc_fork_cleanup ;
 		} ;
+#endif
+#ifdef MAGMA_ENABLE_CANARIES//SND002.patch
+    MAGMA_LOG("%MAGMA_BUG%", rsrc.map_offset + 28 > rsrc.rsrc_len);
+#endif//SND002.patch
 
 	rsrc.type_count = read_rsrc_short (&rsrc, rsrc.map_offset + 28) + 1 ;
 	if (rsrc.type_count < 1)
@@ -616,4 +621,3 @@ parse_str_rsrc (SF_PRIVATE *psf, SD2_RSRC * rsrc)
 
 	return 0 ;
 } /* parse_str_rsrc */
-
diff --git a/src/ulaw.c b/src/ulaw.c
index ed2f8ff0..dae280ca 100644
--- a/src/ulaw.c
+++ b/src/ulaw.c
@@ -828,10 +828,18 @@ s2ulaw_array (const short *ptr, int count, unsigned char *buffer)
 static inline void
 i2ulaw_array (const int *ptr, int count, unsigned char *buffer)
 {	for (int i = 0 ; i < count ; i++)
+#ifdef MAGMA_ENABLE_FIXES//SND023.patch
 	{	if (ptr [i] == INT_MIN)
 			buffer [i] = ulaw_encode [INT_MAX >> (16 + 2)] ;
 		else if (ptr [i] >= 0)
-			buffer [i] = ulaw_encode [ptr [i] >> (16 + 2)] ;
+#else//SND023.patch
+	{
+#ifdef MAGMA_ENABLE_CANARIES//SND023.patch
+	MAGMA_LOG("%MAGMA_BUG%", ptr[i] == INT_MIN);
+#endif//SND023.patch
+                 if (ptr [i] >= 0)
+#endif//SND023.patch
+                     buffer [i] = ulaw_encode [ptr [i] >> (16 + 2)] ;
 		else
 			buffer [i] = 0x7F & ulaw_encode [-ptr [i] >> (16 + 2)] ;
 		} ;
@@ -850,10 +858,18 @@ f2ulaw_array (const float *ptr, int count, unsigned char *buffer, float normfact
 static inline void
 d2ulaw_array (const double *ptr, int count, unsigned char *buffer, double normfact)
 {	for (int i = 0 ; i < count ; i++)
+#ifdef MAGMA_ENABLE_FIXES//SND022.patch
 	{	if (!isfinite (ptr [i]))
 			buffer [i] = 0 ;
 		else if (ptr [i] >= 0)
-			buffer [i] = ulaw_encode [psf_lrint (normfact * ptr [i])] ;
+#else//SND022.patch
+	{
+#ifdef MAGMA_ENABLE_CANARIES//SND022.patch
+		MAGMA_LOG("%MAGMA_BUG%", !isfinite(ptr[i]));
+#endif//SND022.patch
+		if (ptr [i] >= 0)
+#endif//SND022.patch
+                    buffer [i] = ulaw_encode [psf_lrint (normfact * ptr [i])] ;
 		else
 			buffer [i] = 0x7F & ulaw_encode [- psf_lrint (normfact * ptr [i])] ;
 		} ;
@@ -1053,4 +1069,3 @@ ulaw_write_d2ulaw	(SF_PRIVATE *psf, const double *ptr, sf_count_t len)
 
 	return total ;
 } /* ulaw_write_d2ulaw */
-
diff --git a/src/wav.c b/src/wav.c
index 7ee94570..e27730c4 100644
--- a/src/wav.c
+++ b/src/wav.c
@@ -1150,11 +1150,14 @@ wav_write_header (SF_PRIVATE *psf, int calc_length)
 		psf_binheader_writef (psf, "4", BHW4 (tmp)) ;
 		psf_binheader_writef (psf, "44", BHW4 (0), BHW4 (0)) ; /* SMTPE format */
 		psf_binheader_writef (psf, "44", BHW4 (psf->instrument->loop_count), BHW4 (0)) ;
-
+#ifdef MAGMA_ENABLE_FIXES//SND025.patch
 		/* Make sure we don't read past the loops array end. */
 		if (psf->instrument->loop_count > ARRAY_LEN (psf->instrument->loops))
 			psf->instrument->loop_count = ARRAY_LEN (psf->instrument->loops) ;
-
+#endif//SND025.patch
+#ifdef MAGMA_ENABLE_CANARIES
+        MAGMA_LOG("%MAGMA_BUG%", psf->instrument->loop_count > ARRAY_LEN (psf->instrument->loops));
+#endif//SND025.patch
 		for (tmp = 0 ; tmp < psf->instrument->loop_count ; tmp++)
 		{	int type ;
 
diff --git a/src/wavlike.c b/src/wavlike.c
index 1c1ed2cf..0843cfdf 100644
--- a/src/wavlike.c
+++ b/src/wavlike.c
@@ -335,8 +335,15 @@ wavlike_read_fmt_chunk (SF_PRIVATE *psf, int fmtsize)
 					/* Terminate the buffer we're going to append_snprintf into. */
 					buffer [0] = 0 ;
 
+#ifdef MAGMA_ENABLE_FIXES//SND017.patch
 					for (bit = k = 0 ; bit < ARRAY_LEN (channel_mask_bits) && k < psf->sf.channels ; bit++)
+#else//SND017.patch
+					for (bit = k = 0 ; bit < ARRAY_LEN (channel_mask_bits) ; bit++)
+#endif//SND017.patch
 					{
+#ifdef MAGMA_ENABLE_CANARIES//SND017.patch
+                        MAGMA_LOG("%MAGMA_BUG%", k >= psf->sf.channels);
+#endif//SND017.patch
 						if (wav_fmt->ext.channelmask & (1 << bit))
 						{	if (k > psf->sf.channels)
 							{	psf_log_printf (psf, "*** More channel map bits than there are channels.\n") ;
@@ -350,11 +357,18 @@ wavlike_read_fmt_chunk (SF_PRIVATE *psf, int fmtsize)
 
 					/* Remove trailing ", ". */
 					bit = strlen (buffer) ;
+#ifdef MAGMA_ENABLE_FIXES//SND020.patch
 					if (bit >= 2)
 					{	buffer [--bit] = 0 ;
 						buffer [--bit] = 0 ;
 						} ;
-
+#else
+#ifdef MAGMA_ENABLE_CANARIES//SND020.patch
+                                        MAGMA_LOG("%MAGMA_BUG%", bit < 2);
+#endif//SND020.patch
+                                        buffer [--bit] = 0 ;
+                                        buffer [--bit] = 0 ;
+#endif//SND020.patch
 					if (k != psf->sf.channels)
 					{	psf_log_printf (psf, "  Channel Mask  : 0x%X\n", wav_fmt->ext.channelmask) ;
 						psf_log_printf (psf, "*** Less channel map bits than there are channels.\n") ;
