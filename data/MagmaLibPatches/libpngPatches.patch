diff --git a/png.c b/png.c
index 869cd395c..b53d17e07 100644
--- a/png.c
+++ b/png.c
@@ -616,6 +616,9 @@ png_free_data(png_const_structrp png_ptr, png_inforp info_ptr, png_uint_32 mask,
 #endif
 
 #ifdef PNG_eXIf_SUPPORTED
+#ifdef MAGMA_ENABLE_CANARIES
+   MAGMA_LOG("%MAGMA_BUG%", MAGMA_AND(info_ptr->eXIf_buf != NULL, (mask & info_ptr->free_me & PNG_FREE_EXIF) == 0))//PNG006.patch;
+#endif
    /* Free any eXIf entry */
    if (((mask & PNG_FREE_EXIF) & info_ptr->free_me) != 0)
    {
@@ -2582,8 +2585,10 @@ png_check_IHDR(png_const_structrp png_ptr,
        * extensive, therefore much more dangerous and much more difficult to
        * write in a way that avoids compiler warnings.
        */
+#ifdef MAGMA_ENABLE_FIXES
       png_warning(png_ptr, "Image width is too large for this architecture");
       error = 1;
+#endif
    }
 
 #ifdef PNG_SET_USER_LIMITS_SUPPORTED
@@ -4574,6 +4579,11 @@ png_image_free_function(png_voidp argument)
 #     endif
    }
 
+#ifdef MAGMA_ENABLE_FIXES
+#else
+   image->flags |= PNG_IMAGE_FLAG_INVALID;
+#endif
+
    /* Success. */
    return 1;
 }
@@ -4588,7 +4598,11 @@ png_image_free(png_imagep image)
    if (image != NULL && image->opaque != NULL &&
       image->opaque->error_buf == NULL)
    {
+#ifdef MAGMA_ENABLE_FIXES
       png_image_free_function(image);
+#else
+      (void)png_safe_execute(image, png_image_free_function, image);
+#endif
       image->opaque = NULL;
    }
 }
diff --git a/png.h b/png.h
index 4731d0777..b5541cc23 100644
--- a/png.h
+++ b/png.h
@@ -2969,6 +2969,14 @@ typedef struct
     * because that call initializes the 'flags' field.
     */
 
+#ifdef MAGMA_ENABLE_FIXES
+#else
+#define PNG_IMAGE_FLAG_INVALID 0x08
+   /* This indicates that the image and all its allocated resources have been
+       * freed or released and are not available for consumption.
+    */
+#endif
+
 #ifdef PNG_SIMPLIFIED_READ_SUPPORTED
 /* READ APIs
  * ---------
diff --git a/pngerror.c b/pngerror.c
index ec3a709b9..0e276e4f6 100644
--- a/pngerror.c
+++ b/pngerror.c
@@ -951,6 +951,10 @@ png_safe_execute(png_imagep image_in, int (*function)(png_voidp), png_voidp arg)
       result = function(arg);
    }
 
+#ifdef MAGMA_ENABLE_CANARIES
+   MAGMA_LOG("%MAGMA_BUG%", (image->flags & PNG_IMAGE_FLAG_INVALID) != 0)//PNG002.patch;
+#endif
+
    image->opaque->error_buf = saved_error_buf;
 
    /* And do the cleanup prior to any failure return. */
diff --git a/pngrtran.c b/pngrtran.c
index 238f5afe7..8866c0f15 100644
--- a/pngrtran.c
+++ b/pngrtran.c
@@ -1959,8 +1959,13 @@ png_read_transform_info(png_structrp png_ptr, png_inforp info_ptr)
          info_ptr->bit_depth = 8;
          info_ptr->num_trans = 0;
 
+#ifdef MAGMA_ENABLE_FIXES
          if (png_ptr->palette == NULL)
             png_error (png_ptr, "Palette is NULL in indexed image");
+#endif
+#ifdef MAGMA_ENABLE_CANARIES
+         MAGMA_LOG("%MAGMA_BUG%", png_ptr->palette == NULL)//PNG007.patch;
+#endif
       }
       else
       {
diff --git a/pngrutil.c b/pngrutil.c
index 2694fa72a..1e2453dcd 100644
--- a/pngrutil.c
+++ b/pngrutil.c
@@ -983,8 +983,14 @@ png_handle_PLTE(png_structrp png_ptr, png_inforp info_ptr, png_uint_32 length)
    else
       max_palette_length = PNG_MAX_PALETTE_LENGTH;
 
+#ifdef MAGMA_ENABLE_FIXES
    if (num > max_palette_length)
       num = max_palette_length;
+#endif
+
+#ifdef MAGMA_ENABLE_CANARIES
+   MAGMA_LOG("%MAGMA_BUG%", num > max_palette_length)//PNG003.patch;
+#endif
 
 #ifdef PNG_POINTER_INDEXING_SUPPORTED
    for (i = 0, pal_ptr = palette; i < num; i++, pal_ptr++)
@@ -2058,7 +2064,9 @@ png_handle_eXIf(png_structrp png_ptr, png_inforp info_ptr, png_uint_32 length)
       return;
    }
 
+#ifdef MAGMA_ENABLE_FIXES
    info_ptr->free_me |= PNG_FREE_EXIF;
+#endif
 
    info_ptr->eXIf_buf = png_voidcast(png_bytep,
              png_malloc_warn(png_ptr, length));
@@ -3162,12 +3170,27 @@ png_check_chunk_length(png_const_structrp png_ptr, png_uint_32 length)
    if (png_ptr->chunk_name == png_IDAT)
    {
       png_alloc_size_t idat_limit = PNG_UINT_31_MAX;
+#ifdef MAGMA_ENABLE_FIXES
       size_t row_factor =
          (size_t)png_ptr->width
          * (size_t)png_ptr->channels
          * (png_ptr->bit_depth > 8? 2: 1)
          + 1
          + (png_ptr->interlaced? 6: 0);
+#else
+      size_t row_factor_l =
+         (size_t)png_ptr->width
+         * (size_t)png_ptr->channels
+         * (png_ptr->bit_depth > 8? 2: 1)
+         + 1
+         + (png_ptr->interlaced? 6: 0);
+
+#ifdef MAGMA_ENABLE_CANARIES
+      MAGMA_LOG("%MAGMA_BUG%", row_factor_l == ((size_t)1 << (sizeof(png_uint_32) * 8)))//PNG001.patch;
+#endif
+
+      size_t row_factor = (png_uint_32)row_factor_l;
+#endif
       if (png_ptr->height > PNG_UINT_32_MAX/row_factor)
          idat_limit = PNG_UINT_31_MAX;
       else
@@ -3198,7 +3221,11 @@ png_combine_row(png_const_structrp png_ptr, png_bytep dp, int display)
 {
    unsigned int pixel_depth = png_ptr->transformed_pixel_depth;
    png_const_bytep sp = png_ptr->row_buf + 1;
+#ifdef MAGMA_ENABLE_FIXES
    png_alloc_size_t row_width = png_ptr->width;
+#else
+   png_uint_32 row_width = png_ptr->width;
+#endif
    unsigned int pass = png_ptr->pass;
    png_bytep end_ptr = 0;
    png_byte end_byte = 0;
@@ -3448,6 +3475,10 @@ png_combine_row(png_const_structrp png_ptr, png_bytep dp, int display)
             png_error(png_ptr, "invalid user transform pixel depth");
 
          pixel_depth >>= 3; /* now in bytes */
+
+#ifdef MAGMA_ENABLE_CANARIES
+         MAGMA_LOG("%MAGMA_BUG%", (row_width * pixel_depth) != (u_int64_t)row_width * pixel_depth)//PNG004.patch;
+#endif
          row_width *= pixel_depth;
 
          /* Regardless of pass number the Adam 7 interlace always results in a
@@ -3473,7 +3504,11 @@ png_combine_row(png_const_structrp png_ptr, png_bytep dp, int display)
 
             /* But don't allow this number to exceed the actual row width. */
             if (bytes_to_copy > row_width)
+#ifdef MAGMA_ENABLE_FIXES
                bytes_to_copy = (unsigned int)/*SAFE*/row_width;
+#else
+               bytes_to_copy = row_width;
+#endif
          }
 
          else /* normal row; Adam7 only ever gives us one pixel to copy. */
@@ -3653,7 +3688,11 @@ png_combine_row(png_const_structrp png_ptr, png_bytep dp, int display)
                   dp += bytes_to_jump;
                   row_width -= bytes_to_jump;
                   if (bytes_to_copy > row_width)
+#ifdef MAGMA_ENABLE_FIXES
                      bytes_to_copy = (unsigned int)/*SAFE*/row_width;
+#else
+                     bytes_to_copy = row_width;
+#endif
                }
          }
 
@@ -4589,6 +4628,23 @@ defined(PNG_USER_TRANSFORM_PTR_SUPPORTED)
    row_bytes = PNG_ROWBYTES(max_pixel_depth, row_bytes) +
        1 + ((max_pixel_depth + 7) >> 3U);
 
+#ifdef MAGMA_ENABLE_CANARIES
+    /* Since width is initially aligned on the next larger 8 pixels,
+     * the lowest 3 bits of row_bytes are initially all zeroes.
+     * The PNG_ROWBYTES() operation is merely a product, so the lowest
+     * 3 bits remain zeroes.
+     * The second operand of the following addition has a maximum value
+     * of 9, so it doesn't change any bits higher than the lowest 3.
+     * Hence, to recover the product, it is safe to just clear the lowest
+     * 3 bits.
+     */
+   size_t row_bytes_check = row_bytes & ~((size_t)7);
+    /* The input width resulted in an integer overflow, which could
+     * later cause a heap buffer overflow due to a bad allocation size
+     */
+   MAGMA_LOG("%MAGMA_BUG%", row_bytes_check < ((png_ptr->width + 7) & ~((png_uint_32)7)))//PNG005.patch;
+#endif
+
 #ifdef PNG_MAX_MALLOC_64K
    if (row_bytes > (png_uint_32)65536L)
       png_error(png_ptr, "This image requires a row greater than 64KB");
diff --git a/pngset.c b/pngset.c
index 9f4489bcf..574985064 100644
--- a/pngset.c
+++ b/pngset.c
@@ -583,7 +583,11 @@ png_set_PLTE(png_structrp png_ptr, png_inforp info_ptr,
    max_palette_length = (info_ptr->color_type == PNG_COLOR_TYPE_PALETTE) ?
       (1 << info_ptr->bit_depth) : PNG_MAX_PALETTE_LENGTH;
 
+#ifdef MAGMA_ENABLE_FIXES
    if (num_palette < 0 || num_palette > (int) max_palette_length)
+#else
+   if (num_palette < 0 || num_palette > PNG_MAX_PALETTE_LENGTH)
+#endif
    {
       if (info_ptr->color_type == PNG_COLOR_TYPE_PALETTE)
          png_error(png_ptr, "Invalid palette length");
@@ -603,7 +607,12 @@ png_set_PLTE(png_structrp png_ptr, png_inforp info_ptr,
 #        endif
       ))
    {
+#ifdef MAGMA_ENABLE_FIXES
       png_error(png_ptr, "Invalid palette");
+#else
+      png_chunk_report(png_ptr, "Invalid palette", PNG_CHUNK_ERROR);
+      return;
+#endif
    }
 
    /* It may not actually be necessary to set png_ptr->palette here;
