diff --git a/cqe-challenges/CROMU_00001/src/service.c b/cqe-challenges/CROMU_00001/src/service.c
index 9b89f217..19725a4e 100644
--- a/cqe-challenges/CROMU_00001/src/service.c
+++ b/cqe-challenges/CROMU_00001/src/service.c
@@ -65,7 +65,7 @@ typedef struct message_manager {
  **/
 typedef struct user {
 	char name[USERNAME_LENGTH];
-	pmessage_manager pmm;	
+	pmessage_manager pmm;
 	struct user *next;
 } user, *puser;
 
@@ -163,7 +163,7 @@ size_t create_user( puser_manager pum, char *username )
 		puts("[-] Error allocating user structure\n");
 		goto end;
 	}
-	
+
 	newuser->next = NULL;
 	newuser->name[0] = 0x00;
 	newuser->pmm = init_manager();
@@ -184,7 +184,7 @@ size_t create_user( puser_manager pum, char *username )
 
 	pum->user_count++;
 	id = pum->user_count;
-	
+
 end:
 	return id;
 }
@@ -359,7 +359,7 @@ void read_message( pmessage_manager pmm, size_t message_id )
 
 	bzero( buffer, 0x100 );
 	strncat( buffer, "***********************************\n", 0x100 );
-	
+
 	walker = pmm->root;
 
 	while ( walker ) {
@@ -539,7 +539,7 @@ size_t send_user_message( puser_manager pum, char *username, char *msg )
 	if ( (id = add_message( pu->pmm, pmsg )) == 0 ) {
 		puts("[-] Failed to add message\n");
 		goto end;
-	}	
+	}
 end:
 	return id;
 }
@@ -554,7 +554,7 @@ void handle_loggedin( puser_manager pum, puser pu )
 	size_t choice = 0;
 	char message[MESSAGE_LENGTH];
 	char username[USERNAME_LENGTH];
-	
+
 	if ( pum == NULL || pu == NULL ) {
 		goto end;
 	}
diff --git a/cqe-challenges/CROMU_00002/src/render.c b/cqe-challenges/CROMU_00002/src/render.c
index 1f315a01..16f0c769 100644
--- a/cqe-challenges/CROMU_00002/src/render.c
+++ b/cqe-challenges/CROMU_00002/src/render.c
@@ -102,8 +102,10 @@ void add_render_grid( tParticleData *pItem )
     if ( render_grid_x >= RENDER_GRID_X_SIZE || render_grid_y >= RENDER_GRID_Y_SIZE )
         return;
 #endif
-
     // Increase particle count in that grid
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
     g_renderGrid[(render_grid_x * RENDER_GRID_X_SIZE) + render_grid_y].particles_in_grid++;
 }
 
@@ -132,4 +134,3 @@ void display_render_grid( void )
 
     printf( "\n" );
 }
-
diff --git a/cqe-challenges/CROMU_00003/src/yolodex.c b/cqe-challenges/CROMU_00003/src/yolodex.c
index 3f1464df..1cbab0bc 100644
--- a/cqe-challenges/CROMU_00003/src/yolodex.c
+++ b/cqe-challenges/CROMU_00003/src/yolodex.c
@@ -393,6 +393,9 @@ void editUser(contact *ptr) {
 		}
 #ifdef PATCHED
 		data[31] = 0;
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
 #endif
 		if(data[0] != 0) {
 			memset(ptr->first, 0, 32);
@@ -402,6 +405,9 @@ void editUser(contact *ptr) {
 		recvUntil(data, 32, '\n');
 #ifdef PATCHED
 		data[31] = 0;
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
 #endif
 
 		if(data[0] && validateName(data) == 0) {
@@ -416,6 +422,9 @@ void editUser(contact *ptr) {
 		recvUntil(data, 14, '\n');
 #ifdef PATCHED
 		data[13] = 0;
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
 #endif
 		if(data[0] && validatePhone(data) == 0) {
 			puts("Not a legal phone number.  Stopping edit.");
diff --git a/cqe-challenges/CROMU_00004/src/service.c b/cqe-challenges/CROMU_00004/src/service.c
index b3140527..a92d85b2 100644
--- a/cqe-challenges/CROMU_00004/src/service.c
+++ b/cqe-challenges/CROMU_00004/src/service.c
@@ -135,7 +135,7 @@ void ParseCode(char *buf, char *output) {
 int recv(int fd, void *buf, size_t count, size_t *rx_bytes) {
 	size_t total_bytes = 0;
 	size_t rx;
-	int rval;	
+	int rval;
 
 	while (total_bytes < count) {
 		rval = receive(fd, buf+total_bytes, 1, &rx);
@@ -148,7 +148,7 @@ int recv(int fd, void *buf, size_t count, size_t *rx_bytes) {
 		total_bytes++;
 	}
 
-	*rx_bytes = total_bytes;	
+	*rx_bytes = total_bytes;
 	return(0);
 }
 
@@ -192,6 +192,9 @@ unsigned char *ReadWav(unsigned char *pcm) {
   // BUG. Check is done with integer division instead of
   // floating point which leads to an incorrectly
   // checked DataSize
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
   if (p->DataSize*8/p->NumSamples != 16) {
     puts("Invalid PCM length\n");
     _terminate(INVALID_PCM_LEN);
diff --git a/cqe-challenges/CROMU_00005/src/service.c b/cqe-challenges/CROMU_00005/src/service.c
index b48bfdaf..afcb1f5b 100644
--- a/cqe-challenges/CROMU_00005/src/service.c
+++ b/cqe-challenges/CROMU_00005/src/service.c
@@ -39,13 +39,13 @@ Pawns do not take diagonally, they only move forward one step at a time.
 As in chess, pieces can not jump over each other; the knight is the only exception to this rule.
 
 To exploit:
-If a white knight makes it to 7,8 and then tries to display the board (the '9' option), it will crash. 
+If a white knight makes it to 7,8 and then tries to display the board (the '9' option), it will crash.
 As seen in the pov.xml.
 */
 
 
 // global variables for use by all other functions
-char (*ptr_array)[WIDTH][HEIGHT]; // pointer to board array 
+char (*ptr_array)[WIDTH][HEIGHT]; // pointer to board array
 char current_team = WHITE_TEAM;  // white/black
 
 // Returns color of piece (BLACK_PIECE, WHITE_PIECE, or EMPTY)
@@ -136,7 +136,7 @@ int checkNoCollision(Move move)
 	Location dst = move.dst;
 
 	int squares[WIDTH][2]; // squares between src and dst
-	int square_cnt = 0; 
+	int square_cnt = 0;
 
 	char piece = getPiece(move.src);
 
@@ -196,7 +196,7 @@ int checkNoCollision(Move move)
 			}
 	}
 	else
-	{ 
+	{
 		// determine squares between src and dst on a DIAGONAL
 		int num = abs(move.dst.x - move.src.x);
 		if (num == abs(move.dst.y - move.src.y))
@@ -231,7 +231,7 @@ int checkNoCollision(Move move)
 	// now 'squares' has a list of all squares being passed through
 	for (int i = 0; i < square_cnt; i++)
 	{
-		// if we've already seen a piece in the way and we're still 
+		// if we've already seen a piece in the way and we're still
 		//   trying to move, collision
 		if (boop >= 1)
 			return COLLISION;
@@ -251,7 +251,7 @@ int checkNoCollision(Move move)
 		else
 		{
 			return COLLISION;
-		}	
+		}
 	}
 
 	return NO_COLLISION;
@@ -266,7 +266,7 @@ int performMove(Move move)
 	Location dst = move.dst;
 	int piece = getPiece(src);
 
-	if (current_team == WHITE_TEAM)	
+	if (current_team == WHITE_TEAM)
 	{
 		// WHITE's turn
 		if (getColor(piece) == BLACK_PIECE)
@@ -283,7 +283,7 @@ int performMove(Move move)
 		}
 	}
 
-	
+
 // NOTE: Vulnerability is here
 // the knight move check is placed before the bounds check, which is the vulnerability
 #ifndef PATCHED
@@ -378,7 +378,6 @@ int performMove(Move move)
 		return 0;
 	}
 #endif
-
 	if (piece == KNIGHT_BLACK)
 	{
 		if (dst.x == src.x + 2 || dst.x == src.x - 2)
@@ -481,7 +480,7 @@ void swap(Move move)
 	char tmp;
     tmp = (*ptr_array)[move.dst.x][move.dst.y];
     (*ptr_array)[move.dst.x][move.dst.y] = (*ptr_array)[move.src.x][move.src.y];
-    (*ptr_array)[move.src.x][move.src.y] = tmp;	
+    (*ptr_array)[move.src.x][move.src.y] = tmp;
 }
 
 // Verifies input is in correct move format x,y x,y
@@ -489,7 +488,7 @@ void swap(Move move)
 // return 0 otherwise
 int verifyFormat(char *buf, int len)
 {
-	
+
 	buf[len] = '\x00';
 	// #,# #,#
 	if (buf[0] >= '0' && buf[0] <= '9')
@@ -546,7 +545,7 @@ int parseUserInput(Move *movers)
 			return END_GAME;
 		}
 	}
-	else if (size != 7) 
+	else if (size != 7)
 	{
 		printf("incorrect input\n");
 		return INVALID_INPUT;
@@ -559,7 +558,7 @@ int parseUserInput(Move *movers)
 	}
 
 	for (int i = 0; i < sizeof(buf); i++)
-	{	
+	{
 		if (buf[i] <= '9' && buf[i] >= '0')
 		{
 			if (i == 0)
@@ -572,7 +571,7 @@ int parseUserInput(Move *movers)
 				tmp.dst.y = atoi(&buf[i]);
 		}
 	}
-	
+
 	if (tmp.src.x != 77 && tmp.src.y != 77 && tmp.dst.x != 77 && tmp.dst.y != 77)
 	{
 		movers->src = tmp.src;
@@ -599,7 +598,7 @@ int main(void)
 	displayer();
 
 	Move move;
-	
+
 	while(1)
 	{
 		// print prompt
@@ -650,4 +649,3 @@ int main(void)
 
 	return 0;
 }
-
diff --git a/cqe-challenges/CROMU_00006/src/bars.c b/cqe-challenges/CROMU_00006/src/bars.c
index 18731e78..5c11ff07 100644
--- a/cqe-challenges/CROMU_00006/src/bars.c
+++ b/cqe-challenges/CROMU_00006/src/bars.c
@@ -17,9 +17,9 @@ void bars(data_package data) {
   draw_bars(data, max_value, column_count, bar_character);
 }
 
-void draw_bars(data_package data, 
-               uint32 max_value, 
-               uint32 column_count, 
+void draw_bars(data_package data,
+               uint32 max_value,
+               uint32 column_count,
                uint32 bar_character) {
   if (column_count > (MAX_STACK_SIZE / 4)) {
     _terminate(-1);
@@ -52,7 +52,7 @@ double bar_scale_factor(uint32 column_count, uint32 max_value) {
 
 uint32 bar_use_columns(uint32 datum, double scale_factor, uint32 column_count) {
   uint32 use_columns = (uint32)((double) datum * scale_factor);
-  
+
 #ifdef PATCHED
   if (use_columns > column_count) use_columns = column_count;
 #endif
@@ -64,7 +64,7 @@ void draw_row(char* chart_row_ptr, uint32 bar_character, uint32 use_columns) {
   for (uint32 column = 0; column <= use_columns + 1; column++) {
     char fill = '\n';
     if (column < use_columns) fill = bar_character;
-    
+
     chart_row_ptr[column] = fill;
   }
 }
diff --git a/cqe-challenges/CROMU_00006/src/sparks.c b/cqe-challenges/CROMU_00006/src/sparks.c
index 239e0ba3..d95bfdb2 100644
--- a/cqe-challenges/CROMU_00006/src/sparks.c
+++ b/cqe-challenges/CROMU_00006/src/sparks.c
@@ -31,6 +31,9 @@ void sparks(data_package data) {
 #ifdef PATCHED
     int alloc_error = allocate( (candidate_count + 1)*4, 0, (void**)&sparkles);
 #else
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2, alpha.security.MallocOverflow] This is a bug.
+#endif
     int alloc_error = allocate(candidate_count + 1, 0, (void**)&sparkles);
 #endif
 
diff --git a/cqe-challenges/CROMU_00008/src/expression_parser.c b/cqe-challenges/CROMU_00008/src/expression_parser.c
index 35f1a54b..236d29da 100644
--- a/cqe-challenges/CROMU_00008/src/expression_parser.c
+++ b/cqe-challenges/CROMU_00008/src/expression_parser.c
@@ -71,6 +71,9 @@ void push_parser_stack( tItemStack item )
     if ( g_parseStackSize < MAX_PARSE_STACKSIZE )
 #endif
     {
+#ifndef PATCHED
+        // codechecker_confirmed [unix.cstring.BadSizeArg] This is a bug.
+#endif
         g_memoryGlobal.parseStack[g_parseStackSize] = item;
         g_parseStackSize++;
     }
@@ -80,6 +83,9 @@ void push_parser_stack( tItemStack item )
         THROW( PARSER_EXCEPTION_OVERFLOW );
     }
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.cstring.BadSizeArg] This is a bug.
+#endif
 }
 
 
@@ -667,5 +673,3 @@ void parse_search_expression( char *pszTemp )
             print_record_helper( db_search_index( results.data.result_list[idx] ) );
     }
 }
-
-
diff --git a/cqe-challenges/CROMU_00009/src/fs.c b/cqe-challenges/CROMU_00009/src/fs.c
index e5de4200..b4bdbe99 100644
--- a/cqe-challenges/CROMU_00009/src/fs.c
+++ b/cqe-challenges/CROMU_00009/src/fs.c
@@ -37,7 +37,7 @@ int InitFS(uint32_t fs_size) {
 	// round up to the nearest convenient page size
 	if ((fs_size % PAGE_SIZE) != 0) {
 		fs_size -= (fs_size % PAGE_SIZE);
-		fs_size += PAGE_SIZE; 
+		fs_size += PAGE_SIZE;
 	}
 
 	// make sure the fs_size is within limits
@@ -113,7 +113,7 @@ int DestroyFS() {
 	return(0);
 }
 
-/* 
+/*
    Find an inode given the file name
  */
 inode *FindInode(char *fname) {
@@ -124,7 +124,7 @@ inode *FindInode(char *fname) {
 		return(NULL);
 	}
 
-	// linear search 
+	// linear search
 	for (i = 0; i < MAX_INODE_PAGES; i++) {
 		if (!fs.inode_pages[i]) {
 			break;
@@ -132,7 +132,7 @@ inode *FindInode(char *fname) {
 
 		t = fs.inode_pages[i];
 		for (j = 0; j < INODES_PER_PAGE; j++) {
-			if ((t[j].type == INODE_FILE || t[j].type == INODE_DIRECTORY) 
+			if ((t[j].type == INODE_FILE || t[j].type == INODE_DIRECTORY)
 				&& !strcmp(t[j].fname, fname)) {
 				return(&(t[j]));
 			}
@@ -171,6 +171,9 @@ inode *FindDirEntry(inode *dir, char *fname) {
 		// by one entry, but only if the dir->fsize
 		// variable indicates that an entry is valid
 		for (j = 0; j <= MAX_DIR_INODES && (j+1)*4 <= dir->fsize; j++) {
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2, core.NullDereference] This is a bug.
 #endif
 			file = d->inodes[j];
 			if (!file) {
@@ -185,7 +188,7 @@ inode *FindDirEntry(inode *dir, char *fname) {
 
 }
 
-/* 
+/*
    Traverse the file system to see if a given file exists.
    retval:
      -1 error
@@ -206,7 +209,7 @@ int CheckFileExists(char *fname, inode **file_inode) {
 	// should include full path
 	if (fname[0] != '/') {
 		puts("invalid filename");
-		return(-1);	
+		return(-1);
 	}
 
 	// find the root inode
@@ -225,7 +228,7 @@ int CheckFileExists(char *fname, inode **file_inode) {
 		f = NULL;
 		retval = 0;
 
-		// read the directory contents to see 
+		// read the directory contents to see
 		// if our current token is in there
 		if ((i2 = FindDirEntry(i, tok))) {
 			// found this token
@@ -273,7 +276,7 @@ inode *FindFreeInode() {
 		for (j = 0; j < INODES_PER_PAGE; j++) {
 			in = &(ipage[j]);
 			if (in->type == INODE_FREE) {
-				return(in);	
+				return(in);
 			}
 		}
 	}
@@ -283,7 +286,7 @@ inode *FindFreeInode() {
 
 }
 
-/* 
+/*
    Find an available data block
  */
 block *FindFreeDataBlock() {
@@ -299,7 +302,7 @@ block *FindFreeDataBlock() {
 			if (i*PAGE_SIZE >= fs.fs_size) {
 				return(NULL);
 			}
-	
+
 			// allocate a new page
 			if (allocate(PAGE_SIZE, 0, (void *)&(free_list[i].page))) {
 				puts("Failed to allocate data blocks\n");
@@ -367,7 +370,7 @@ int SplitPath(char *full_name, char *path, char *fname) {
 
 /*
   Create a file full_name with the specified contents
-*/ 
+*/
 inode *CreateFile(char *full_name, char *contents) {
 	int i;
 	int index;
@@ -433,7 +436,7 @@ inode *CreateFile(char *full_name, char *contents) {
 
 	// locate available inode(s)
 	for (i = 0; i < inode_count; i++) {
-		if ((in = FindFreeInode()) == NULL) { 
+		if ((in = FindFreeInode()) == NULL) {
 			puts("out of inodes");
 			return(NULL);
 		}
@@ -563,7 +566,7 @@ int ReadFile(char *full_name) {
 		} else {
 			write(b, fsize);
 		}
-	}	
+	}
 	puts("");
 
 	return(0);
@@ -625,7 +628,7 @@ int mkdir(char *pathname) {
 	}
 
 	// locate an available inode
-	if ((in = FindFreeInode()) == NULL) { 
+	if ((in = FindFreeInode()) == NULL) {
 		puts("out of inodes");
 		return(-1);
 	}
@@ -646,7 +649,10 @@ int mkdir(char *pathname) {
 	for (i = 0; i <= MAX_DIR_INODES; i++) {
 #endif
 		if (dir->inodes[i] == NULL) {
-			dir->inodes[i] = in;
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2, core.NullDereference] This is a bug.
+#endif
+                        dir->inodes[i] = in;
 			// update the fsize value
 			if ((i+1)*4 > dir_inode->fsize) {
 				dir_inode->fsize = (i+1)*4;
@@ -664,7 +670,10 @@ int mkdir(char *pathname) {
 			last_inode = in;
 			in = in->indirect_inode;
 			for (index = 0; index < INODE_DATA_BLOCKS; index++) {
-				FreeDataBlock(last_inode->blocks[index]);
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2, core.NullDereference] This is a bug.
+#endif
+                            FreeDataBlock(last_inode->blocks[index]);
 			}
 			bzero(last_inode, sizeof(inode));
 		}
@@ -676,7 +685,7 @@ int mkdir(char *pathname) {
 	return(0);
 }
 
-/* 
+/*
    Remove a directory
  */
 int rmdir(char *pathname) {
@@ -712,7 +721,7 @@ int rmdir(char *pathname) {
 
 	// make sure it isn't the top level dir
 	if (!strcmp(pathname, "/")) {
-		puts("unable to remove /");	
+		puts("unable to remove /");
 		return(-1);
 	}
 
@@ -748,7 +757,7 @@ int rmdir(char *pathname) {
 		puts("parent directory doesn't have an entry for this directory...file system corruption detected");
 		return(1);
 	}
-	
+
 	// free the data blocks associated with the directory
 	index = 0;
 	in2 = file_inode;
@@ -981,7 +990,7 @@ FILE *fopen(char *path, const char *mode) {
 	} else if (!strcmp(mode, "a")) {
 		f->pos = file_inode->fsize;
 		f->mode = APPEND;
-		// calculate the inode, block, and offset in that block 
+		// calculate the inode, block, and offset in that block
 		// where we should start appending
 		f->curr_pos_inode = file_inode;
 		inode_depth = file_inode->fsize/(INODE_DATA_BLOCKS*DATA_BLOCK_SIZE);
@@ -1052,7 +1061,7 @@ size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream) {
 		}
 		p[i] = ((unsigned char *)b)[b_index++];
 		stream->pos++;
-	}	
+	}
 	stream->curr_pos_inode = in2;
 	stream->index = index;
 	stream->b_index = b_index;
@@ -1091,7 +1100,9 @@ size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream) {
 		return (0);
 	}
 #endif
-
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2, core.NullDereference] This is a bug.
+#endif
 	b_index = stream->b_index;
 	for (i = 0; i < size*nmemb; i++) {
 		if (b_index && (b_index % DATA_BLOCK_SIZE == 0)) {
@@ -1109,7 +1120,7 @@ size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream) {
 					return(i);
 				}
 
-				if ((in = FindFreeInode()) == NULL) { 
+				if ((in = FindFreeInode()) == NULL) {
 					puts("out of inodes");
 					return(0);
 				}
@@ -1143,18 +1154,18 @@ size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream) {
 		((unsigned char *)b)[b_index++] = p[i];
 		stream->i->fsize++;
 		stream->pos++;
-	}	
+	}
 	stream->curr_pos_inode = in2;
 	stream->index = index;
 	stream->b_index = b_index;
 	return(i);
-		
+
 
 	return(i);
 
 }
 
-/* 
+/*
    close the file identified by stream
  */
 int fclose(FILE *stream) {
@@ -1189,7 +1200,7 @@ int StatusFS() {
 		if (!fs.inode_pages[i]) {
 			break;
 		}
-				
+
 		in = fs.inode_pages[i];
 		for (j = 0; j < INODES_PER_PAGE; j++) {
 			if (in[j].type != INODE_FREE) {
diff --git a/cqe-challenges/CROMU_00010/src/map.c b/cqe-challenges/CROMU_00010/src/map.c
index d89ac9ef..38edb5ab 100644
--- a/cqe-challenges/CROMU_00010/src/map.c
+++ b/cqe-challenges/CROMU_00010/src/map.c
@@ -35,9 +35,9 @@ THE SOFTWARE.
 
 
 /*
-graph traversal service that emulates a street map.  
-provides routing from point to point 
-map can be created/edited by adding streets, intersections, 
+graph traversal service that emulates a street map.
+provides routing from point to point
+map can be created/edited by adding streets, intersections,
 and addresses
 */
 
@@ -96,7 +96,7 @@ void print_roads(pmap thisMap){
 }
 //returns null if not found
 
-//insert address in list after last address in list with lower or equal number, if equal numbers new is inserted after last. 
+//insert address in list after last address in list with lower or equal number, if equal numbers new is inserted after last.
 paddress add_address ( int number, char resident[32], proad thisRoad, pintersection prevIntersection,
  						double distance_to_prev, pintersection nextIntersection, double distance_to_next ){
 	address tempAddress;
@@ -115,7 +115,7 @@ paddress add_address ( int number, char resident[32], proad thisRoad, pintersect
 		//if next address number is higher, break, prevaddress will be set to NULL or prev.
 		if (nextAddress->number > number){
 			 nextAddress = NULL;
-		//else set prevaddress to nextaddress and if there is a next loop, else break	 
+		//else set prevaddress to nextaddress and if there is a next loop, else break
 		}else{
 			prevAddress = nextAddress;
 			if (nextAddress->self->next != NULL){
@@ -186,7 +186,7 @@ pintersection add_intersection ( proad thisRoad, proad other_road, pintersection
 	if (newNode == NULL){
 		puts("Failed to insert node");
 		return NULL;
-	} 
+	}
 	newIntersection = (pintersection)newNode->data;
 
 	if (prevIntersection != NULL){
@@ -217,11 +217,11 @@ void print_intersections(proad thisRoad){
 		printf("(@d)\t@s intersects @s\n", i, thisRoad->name, thisIntersection->other_road->name );
 		i++;
 		if (thisIntersection->prevIntersection != NULL){
-			printf("\t\t@f units after the intersection of @s\n",thisIntersection->distance_to_prev, 
+			printf("\t\t@f units after the intersection of @s\n",thisIntersection->distance_to_prev,
 					thisIntersection->prevIntersection->other_road->name);
 		}
 		if (thisIntersection->nextIntersection != NULL){
-			printf("\t\t@f units before the intersection of @s\n", thisIntersection->distance_to_next, 
+			printf("\t\t@f units before the intersection of @s\n", thisIntersection->distance_to_next,
 					thisIntersection->nextIntersection->other_road->name);
 		}
 		if (thisIntersection->self->next != NULL){
@@ -245,7 +245,7 @@ pintersection find_pintersection(proad thisRoad, pintersection searchpIntersecti
 		tempIntersection = startIntersection;
 	}
 	while (tempIntersection != NULL){
-		if ( (tempIntersection->prevIntersection == searchpIntersection) || 
+		if ( (tempIntersection->prevIntersection == searchpIntersection) ||
 			 (tempIntersection->nextIntersection == searchpIntersection) ){
 			return tempIntersection;
 		}
@@ -288,21 +288,21 @@ pintersection delete_intersection(proad thisRoad, pintersection deletedIntersect
 	pintersection tempIntersection =  NULL;
 	pintersection thisIntersection = NULL;
 	pdListNode thisNode = NULL;
-	//check for pointers to the deleted intersection 
+	//check for pointers to the deleted intersection
 	pintersection refIntersection = find_pintersection(thisRoad, deletedIntersection, NULL);
 	while (refIntersection != NULL){
 		// if prevIntersection is the match, replace with deleted->prev or NULL
 		if (refIntersection->prevIntersection == deletedIntersection){
 			if (deletedIntersection->self->prev != NULL){
 				refIntersection->prevIntersection = (pintersection)deletedIntersection->self->prev->data;
-			}else{ 
+			}else{
 				refIntersection->prevIntersection = NULL;
 			}
 		// if nextIntersection is the match, replace with deleted->next or NULL
 		}else {
 			if (deletedIntersection->self->next != NULL){
 				refIntersection->nextIntersection = (pintersection)deletedIntersection->self->next->data;
-			}else{ 
+			}else{
 				refIntersection->nextIntersection = NULL;
 			}
 		}
@@ -318,7 +318,7 @@ pintersection delete_intersection(proad thisRoad, pintersection deletedIntersect
 			}else{
 				refAddress->prevIntersection = NULL;
 			}
-	// if nextIntersection is the match, replace with deleted->next or NULL			
+	// if nextIntersection is the match, replace with deleted->next or NULL
 		}else {
 			if (deletedIntersection->self->next != NULL){
 				refAddress->nextIntersection = (pintersection)deletedIntersection->self->next->data;
@@ -371,13 +371,17 @@ prouteList push_to_turn_list(pmap thisMap, psList turnList, proad thisRoad, prou
 	}
 #endif
 
+
 #ifndef PATCHED
 	//CWE-467 use of sizeof() on pointer type
 	//1020
+#ifndef PATCHED
+// codechecker_confirmed [alpha.core.SizeofPtr] This is a bug.
+#endif
 	if (  (turnList->listRoot->count) > ( 3800/(sizeof(prouteList)) )  ){
 		return NULL;
 	}
-#endif	
+#endif
 	thisRouteList = (prouteList)(  (unsigned)turnList->listRoot->data + (unsigned int)( sizeof(routeList) * (unsigned int)(turnList->listRoot->count) )  );
 	bzero(thisRouteList, sizeof(routeList));
 	thisRouteList->thisRoad = thisRoad;
@@ -395,9 +399,9 @@ psList get_route(pmap thisMap, psList turnList, proad targetRoad, proad startRoa
 	bzero(turnList->listRoot->data, 4080);
 //
 //	bzero(turnList->listRoot->count, sizeof(int));
-//	
+//
 	prouteList curRouteList = push_to_turn_list(thisMap, turnList, startRoad, NULL);
-	proad curRoad = NULL; 
+	proad curRoad = NULL;
 	proad intersectionOtherRoad = NULL;
 	pintersection thisIntersection = NULL;
 	while (curRouteList->thisRoad != NULL){
@@ -410,7 +414,7 @@ psList get_route(pmap thisMap, psList turnList, proad targetRoad, proad startRoa
 			if ( !(is_in_turn_list(turnList, intersectionOtherRoad)) ){
 				prouteList result = push_to_turn_list(thisMap, turnList, intersectionOtherRoad, curRouteList);
 				if (result == NULL){
-					return NULL; 
+					return NULL;
 				}
 				if (intersectionOtherRoad == targetRoad){
 					return turnList;
@@ -427,5 +431,3 @@ psList get_route(pmap thisMap, psList turnList, proad targetRoad, proad startRoa
 	}
 	return NULL;
 }
-
-
diff --git a/cqe-challenges/CROMU_00011/src/service.c b/cqe-challenges/CROMU_00011/src/service.c
index a341b823..83720a7e 100644
--- a/cqe-challenges/CROMU_00011/src/service.c
+++ b/cqe-challenges/CROMU_00011/src/service.c
@@ -108,14 +108,14 @@ psplitCommand parse_command_line( char *cmd )
             }
         } else {
             /// If this is hit then the command line is invalid
-            goto error;        
+            goto error;
         }
 
         index++;
     }
-    
+
     /// Final parsing check. The right will be null for powerset
-    ///     and the mid can be 0 to just print the set    
+    ///     and the mid can be 0 to just print the set
     if ( sc->left != NULL) {
         goto end;
     }
@@ -173,9 +173,10 @@ int copymem( char *dest, char*src, int start, int len )
  * @param addName Variable to indicate if the name of the set is to be included in the data
  * @return Returns a buffer containing the subset
  **/
-#ifdef PATCHED 
+#ifdef PATCHED
 char * print_subsets( psetArray r, int addName, int depth )
 #else
+
 char * print_subsets( psetArray r, int addName )
 #endif
 {
@@ -188,12 +189,14 @@ char * print_subsets( psetArray r, int addName )
     if (depth > 10) {
         return NULL;
     }
-#endif 
+#endif
 
 	if ( r == NULL ) {
 		return NULL;
 	}
-
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
 	bzero( data, DATAMAX);
 
 	if (addName != 0 ) {
@@ -207,6 +210,9 @@ char * print_subsets( psetArray r, int addName )
 		if ( r->sElems[ei]->type == VALUE ) {
 #ifdef PATCHED
 			if ( index < DATAMAX-1 )
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
 #endif
 				data[index++] = '"';
 
@@ -216,11 +222,17 @@ char * print_subsets( psetArray r, int addName )
 			if ( index + strlen(t[0]) >= DATAMAX-1 ) {
 				goto end;
 			}
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
 #endif
 			index = copymem( data, t[0], index, strlen(t[0]));
 
 #ifdef PATCHED
 			if ( index < DATAMAX-1 )
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
 #endif
 				data[index++] = '"';
 		} else {
@@ -228,6 +240,9 @@ char * print_subsets( psetArray r, int addName )
 #ifdef PATCHED
             t[0] = print_subsets( tp, 0, depth + 1);
 #else
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
 			t[0] = print_subsets( tp, 0 );
 #endif
 
@@ -242,19 +257,27 @@ char * print_subsets( psetArray r, int addName )
 				goto end;
 			}
 #endif
-
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
 			index = copymem( data, t[0], index, strlen(t[0]));
-			deallocate(t[0], strlen(t[0]) + 1 );	
+			deallocate(t[0], strlen(t[0]) + 1 );
 		}
 
 #ifdef PATCHED
 		if ( index < DATAMAX - 1 )
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
 #endif
 			data[index++] = ',';
 	}
 
 #ifdef PATCHED
 	if ( index < DATAMAX-2 )
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
 #endif
 	{
 		if ( data[index-1] == ',' ) {
@@ -332,7 +355,7 @@ void exec_command( char *cmd )
 
         /// Add a null
 	cmd[index] = 0x00;
-	
+
 	psa = retrieve_set( cmd );
 
 	if ( psa == NULL ) {
@@ -342,8 +365,11 @@ void exec_command( char *cmd )
 #ifdef PATCHED
         ps = print_subsets( psa, 1, 0);
 #else
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
         ps = print_subsets( psa, 1 );
-#endif 
+#endif
         if ( ps != NULL ) {
         	printf("@s\n", ps);
 		deallocate(ps, strlen(ps)+1);
@@ -402,7 +428,7 @@ void add_set( psetArray newset )
     if ( newset == NULL ) {
         goto end;
     }
-    
+
     /// Handle the initial case
     if (root == NULL ) {
         root = newset;
@@ -507,7 +533,7 @@ psetArray parse_set( char *setstring)
                     }
                 default:
                     state = close_set;
-                    break;    
+                    break;
             };
         } else if ( *right == '"' ) {
             switch ( state ) {
@@ -647,7 +673,7 @@ psetArray parse_set( char *setstring)
                     state = error;
                     goto end;
                     break;
-			
+
                 default:
                     state = new_var;
                     break;
@@ -677,7 +703,7 @@ end:
         psa = NULL;
     }
 
-    return psa; 
+    return psa;
 }
 
 /**
@@ -763,7 +789,7 @@ psetArray set_difference( psetArray setone, psetArray settwo )
                 final = NULL;
                 goto end;
             }
-        }                
+        }
 
         index++;
     }
@@ -815,7 +841,7 @@ psetArray intersect( psetArray setone, psetArray settwo )
         }
 
         index++;
-    }    
+    }
 
 end:
     return newset;
@@ -855,7 +881,7 @@ psetArray unionset( psetArray setone, psetArray settwo )
         }
         index++;
     }
-    
+
     index = 0;
 
     /// Only elements from the second not already in the first will be copied
@@ -961,7 +987,7 @@ psetArray parse_operations( char *setName, char *setData )
 
             /// Because there is a later increment of setData the value
             ///   must be decremented by one to ensure no skipped characters
-            --setData;            
+            --setData;
 
             if ( nlen > 0x0f ) {
                 printf("!!Invalid set name length\n");
@@ -1016,11 +1042,11 @@ psetArray parse_operations( char *setName, char *setData )
 		goto end;
 	}
     }
-  
+
     if (final == NULL ) {
         goto end;
     }
- 
+
     strncpy( final->varName, setName, 15 );
 
     // Ensure that final will not contain itself as a set
@@ -1035,7 +1061,7 @@ psetArray parse_operations( char *setName, char *setData )
             }
         }
     }
- 
+
 end:
     if ( settwo && set_two_is_new) {
         free_set_array( settwo );
@@ -1084,7 +1110,7 @@ int handle_set_var( psplitCommand psc )
 
     if ( existing_sa == NULL ) {
 	/// If the set is not yet in the list then add it
-        add_set( psa );        
+        add_set( psa );
     } else {
         /// Free existing set elements
         for ( retval = 0; retval < existing_sa->varCount; retval++) {
@@ -1169,8 +1195,8 @@ void issubset( char *left, char* right )
 			goto end;
 		}
 		index++;
-	}	
-	
+	}
+
 	printf("TRUE\n");
 end:
 	if ( super ) {
@@ -1197,7 +1223,7 @@ void command_loop( void )
     while ( 1 ) {
         bzero( cmd, 0x100 );
         printf("> ");
-        
+
         result = receive_until( cmd, '\n', 0xff );
 
         if ( cmd[0] == '.' ) {
diff --git a/cqe-challenges/CROMU_00012/src/service.c b/cqe-challenges/CROMU_00012/src/service.c
index c274a984..7c8aba16 100644
--- a/cqe-challenges/CROMU_00012/src/service.c
+++ b/cqe-challenges/CROMU_00012/src/service.c
@@ -61,7 +61,7 @@ int recvUntil(int fd, char *buf, int size, char delim) {
 void bookKeeping(carstate *drive)
 {
 	int tmpAmount;
-	
+
 	validatePtr(drive);
 	if(drive->rpm > 6000)
 	{
@@ -138,6 +138,9 @@ void updateBTMetadata(carstate *drive, char *userbuf) {
 	if(len > 31)
 		len = 31;
 	#endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
 	memcpy(drive->bt_metadata, tmp, len);
 	validateRet();
 }
@@ -193,12 +196,12 @@ void serviceLoop() {
 	drivestuff.drive = &drivestuff._drive;
 	char *ptr;
 	validatePtr(drivestuff.drive);
-	memset(drivestuff.drive, 0, sizeof(carstate));
+        memset(drivestuff.drive, 0, sizeof(carstate));
 	validatePtr(drivestuff.drive);
 	initCar(drivestuff.drive);
 
 	while(1) {
-		memset(drivestuff.ibuf, 0, sizeof(drivestuff.ibuf));
+                memset(drivestuff.ibuf, 0, sizeof(drivestuff.ibuf));
 		int got;
 		got = recvUntil(0, drivestuff.ibuf, 255, '\n');
 		if(got <= 0)
diff --git a/cqe-challenges/CROMU_00014/src/download_dive.c b/cqe-challenges/CROMU_00014/src/download_dive.c
index d327ad35..e34d80fc 100644
--- a/cqe-challenges/CROMU_00014/src/download_dive.c
+++ b/cqe-challenges/CROMU_00014/src/download_dive.c
@@ -190,6 +190,9 @@ int download_dive(logbook_type *Info)  {
 		bin_number = (temp_ptr->timestamp - first_sample)/60;
 #ifdef PATCHED
 		if (bin_number >= 0 && bin_number < next_dive->dive_length+1)
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.MallocOverflow, core.uninitialized.ArraySubscript] This is a bug.
 #endif
 			bins[bin_number]++;
 
diff --git a/cqe-challenges/CROMU_00014/src/edit_dives.c b/cqe-challenges/CROMU_00014/src/edit_dives.c
index ed115506..19a9b070 100644
--- a/cqe-challenges/CROMU_00014/src/edit_dives.c
+++ b/cqe-challenges/CROMU_00014/src/edit_dives.c
@@ -142,6 +142,9 @@ size_t count;
 #ifdef PATCHED
     count=getline(buffer, sizeof(dive->location));
 #else
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.MallocOverflow, core.uninitialized.ArraySubscript] This is a bug.
+#endif
 	count=getline(buffer, sizeof(buffer));
 #endif
 
diff --git a/cqe-challenges/CROMU_00015/lib/printf.c b/cqe-challenges/CROMU_00015/lib/printf.c
index ef5d14c2..1596945b 100644
--- a/cqe-challenges/CROMU_00015/lib/printf.c
+++ b/cqe-challenges/CROMU_00015/lib/printf.c
@@ -121,7 +121,7 @@ void float_to_str( double val, char *buf, unsigned int max )
             val = -val;
             if ( c == end ) {
               return;
-	    } 
+	    }
         }
 
         // Calculate magnitude
@@ -305,6 +305,9 @@ int vprintf( const char *fmt, va_list arg )
 #ifdef PATCHED
                     float_to_str( float_arg, temp_buf, 64 );
 #else
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
                     float_to_str( float_arg, temp_buf );
 #endif
 
diff --git a/cqe-challenges/CROMU_00015/src/cityParsers.c b/cqe-challenges/CROMU_00015/src/cityParsers.c
index 44b278be..e83dc4df 100644
--- a/cqe-challenges/CROMU_00015/src/cityParsers.c
+++ b/cqe-challenges/CROMU_00015/src/cityParsers.c
@@ -399,6 +399,9 @@ pCity cityTopLevel( pstring str )
 #ifdef PATCHED
 				strncpy( newCity->mayor, temp, 29 );
 #else
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2, alpha.security.MallocOverflow, core.NullDereference] This is a bug.
+#endif
 				strcpy( newCity->mayor, temp );
 #endif
 				freeCharPtr( &temp );
diff --git a/cqe-challenges/CROMU_00015/src/countryParsers.c b/cqe-challenges/CROMU_00015/src/countryParsers.c
index 24b14a1b..d1dc7019 100644
--- a/cqe-challenges/CROMU_00015/src/countryParsers.c
+++ b/cqe-challenges/CROMU_00015/src/countryParsers.c
@@ -72,6 +72,9 @@ int countryMenu( pCountry co )
 #ifdef PATCHED
 			receive_until(selection, '\n', 19);
 #else
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
 			receive_until( selection, '\n', BSIZE-1);
 #endif
 
@@ -167,10 +170,10 @@ int countryMenu( pCountry co )
                                 printf("!!Failed to allocate structure\n");
                                 co->territories[ choice ] = NULL;
                                 continue;
-                        }       
-                        
+                        }
+
                         initTerritory( co->territories[choice] );
-                        
+
 			printf("\nNew Territory: ");
 			bzero(selection, BSIZE);
                         receive_until(selection, '\n', 19);
@@ -179,10 +182,10 @@ int countryMenu( pCountry co )
                         while ( isalnum( selection[length] ) ) {
                                 co->territories[choice]->name[length] = selection[length];
                                 length++;
-                        }       
+                        }
 			co->territories[choice]->name[length] = '\x00';
 			co->territory_count++;
-                        
+
 		} else if ( choice == 7 ) {
 
 			printf("\nTerritories:\n");
@@ -213,7 +216,7 @@ int countryMenu( pCountry co )
 		} else if ( choice == 9 ) {
 			return 1;
 		}
-		
+
 	}
 
 end:
@@ -233,7 +236,7 @@ void printCountryInfo( pCountry co )
 	if ( co == NULL ) {
 		return;
 	}
-	
+
 	printf("\tCountry: ");
 
 	if ( co->name[0] == '\x00' ) {
@@ -279,7 +282,7 @@ void printCountryInfo( pCountry co )
 		index++;
 	}
 
-	return;	
+	return;
 }
 
 /**
@@ -400,8 +403,8 @@ pCountry countryTopLevel( pstring str )
 	if ( endIndex == -1 || startIndex == endIndex ) {
 		goto error;
 	}
-	
-	/// Confirm the opening element;		
+
+	/// Confirm the opening element;
 	temp_name = copyData( str, startIndex, endIndex );
 
 	if ( temp_name == NULL ) {
@@ -511,7 +514,7 @@ pCountry countryTopLevel( pstring str )
 				if (newCountry->territories[newCountry->territory_count] == NULL ) {
 					goto error;
 				}
-	
+
 				newCountry->territory_count++;
 
 				break;
@@ -698,12 +701,12 @@ char* extractLanguage( pstring str )
 		printf("!!Failed to skip the final opening brace\n");
 		goto error;
 	}
-	
+
 	skipWhiteSpace(str);
 
 	/// If this is not a # indicating the closing brace then fail
 	if ( !atChar( str, '#' ) ) {
-		printf("!!Failed to locate the closing mark\n");		
+		printf("!!Failed to locate the closing mark\n");
 		goto error;
 	}
 
@@ -721,7 +724,7 @@ char* extractLanguage( pstring str )
 		printf("!!Failed to locate the end of the closing element id\n");
 		goto error;
 	}
-	
+
 	temp = copyData( str, start, end );
 
 #ifdef PATCHED
@@ -729,7 +732,9 @@ char* extractLanguage( pstring str )
 		goto error;
 	}
 #endif
-
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
 	if ( strcmp( temp, "Language") != 0 ) {
 		printf("!!Invalid closing element id: @s\n", temp);
 		deallocate(temp, strlen(temp)+1);
@@ -748,7 +753,7 @@ char* extractLanguage( pstring str )
 
 	/// Skip past the closing brace
 	skipLength( str, 1 );
-		
+
 
 	goto end;
 
@@ -861,12 +866,12 @@ char* extractCapitol( pstring str )
 		printf("!!Failed to skip the final opening brace\n");
 		goto error;
 	}
-	
+
 	skipWhiteSpace(str);
 
 	/// If this is not a # indicating the closing brace then fail
 	if ( !atChar( str, '#' ) ) {
-		printf("!!Failed to locate the closing mark\n");		
+		printf("!!Failed to locate the closing mark\n");
 		goto error;
 	}
 
@@ -884,7 +889,7 @@ char* extractCapitol( pstring str )
 		printf("!!Failed to locate the end of the closing element id\n");
 		goto error;
 	}
-	
+
 	temp = copyData( str, start, end );
 
 #ifdef PATCHED
@@ -892,7 +897,9 @@ char* extractCapitol( pstring str )
 		goto error;
 	}
 #endif
-
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2, alpha.security.MallocOverflow, core.NullDereference] This is a bug.
+#endif
 	if ( strcmp( temp, "Capitol") != 0 ) {
 		printf("!!Invalid closing element id: @s\n", temp);
 		deallocate(temp, strlen(temp)+1);
@@ -911,7 +918,7 @@ char* extractCapitol( pstring str )
 
 	/// Skip past the closing brace
 	skipLength( str, 1 );
-		
+
 
 	goto end;
 
@@ -924,4 +931,3 @@ error:
 end:
 	return capitol;
 }
-
diff --git a/cqe-challenges/CROMU_00015/src/countyParsers.c b/cqe-challenges/CROMU_00015/src/countyParsers.c
index ffa7a22d..37ea2553 100644
--- a/cqe-challenges/CROMU_00015/src/countyParsers.c
+++ b/cqe-challenges/CROMU_00015/src/countyParsers.c
@@ -64,15 +64,15 @@ int countyMenu( pCounty co )
 			case 2: 	// Set Seat
 				printf("\n-> ");
 				receive_until(selection, '\n', 19 );
-				
+
 				choice = 0;
 				while ( isalpha( selection[choice] ) ) {
 					co->seat[choice] = selection[choice];
 					choice++;
 				}
-				
+
 				/// NULL terminated
-				co->seat[choice] = '\x00';				
+				co->seat[choice] = '\x00';
 				break;
 			case 3:		// Set Population
 				printf("\n-> ");
@@ -157,7 +157,7 @@ int countyMenu( pCounty co )
 				while( isalnum( selection[choice] ) ) {
 					pc->name[choice] = selection[choice];
 					choice++;
-				} 
+				}
 
 				pc->name[choice] = '\x00';
 				co->city_count++;
@@ -227,7 +227,7 @@ void freeCounty( pCounty co )
 	}
 
 	deallocate( co, sizeof(County) );
-	
+
 	return;
 }
 
@@ -402,7 +402,7 @@ pCounty countyTopLevel( pstring str )
 				if ( tempChar == NULL ) {
 					goto error;
 				}
-	
+
 				bzero( newCounty->name, 20 );
 				strncpy( newCounty->name, tempChar, 19 );
 
@@ -481,7 +481,7 @@ pCounty countyTopLevel( pstring str )
 				printf("!!Element not allowed\n");
 				goto error;
 				break;
-		
+
 		};
 
 		getIndex( str, &lastGood);
@@ -505,7 +505,7 @@ pCounty countyTopLevel( pstring str )
 	}
 
 	skipLength(str, 1);
-	
+
 	getIndex( str, &startIndex );
 	skipAlpha( str );
 	getIndex( str, &endIndex);
@@ -523,7 +523,9 @@ pCounty countyTopLevel( pstring str )
 		goto error;
 	}
 #endif
-
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2, alpha.security.MallocOverflow, core.NullDereference] This is a bug.
+#endif
 	if ( strcmp( tempChar, "County" ) != 0 ) {
 		deallocate( tempChar, strlen(tempChar) + 1 );
 		goto error;
@@ -532,7 +534,7 @@ pCounty countyTopLevel( pstring str )
 	deallocate( tempChar, strlen(tempChar) + 1 );
 
 	skipWhiteSpace( str );
-	
+
 	if ( !atChar( str, '}' ) ) {
 		goto error;
 	}
@@ -574,7 +576,7 @@ int checkId ( pstring str, char *id, int ending )
 	}
 
 	skipWhiteSpace( str );
-	
+
 	if ( !atChar(str, '{'))  {
 		goto end;
 	}
@@ -594,7 +596,7 @@ int checkId ( pstring str, char *id, int ending )
 	startIndex = skipWhiteSpace( str );
 	endIndex = skipAlpha( str );
 
-	if ( endIndex == -1 ) { 
+	if ( endIndex == -1 ) {
 		goto end;
 	} else if ( startIndex == endIndex ) {
 		goto end;
@@ -676,7 +678,7 @@ double extractDensity( pstring str )
 	}
 
 	goto end;
-	
+
 error:
 	str->index = lastGood;
 	density = -1.0;
@@ -704,7 +706,7 @@ double extractArea( pstring str )
 
 	skipWhiteSpace( str );
 	getIndex( str, &lastGood );
-	
+
 	if ( str->buffer[ str->index ] != '{' ) {
 		goto end;
 	}
@@ -717,7 +719,7 @@ double extractArea( pstring str )
 
 	if ( endIndex == -1 || startIndex == endIndex ) {
 		goto end;
-	}	
+	}
 
 	temp = copyData( str, startIndex, endIndex );
 
@@ -795,9 +797,9 @@ double extractArea( pstring str )
 	}
 
 	incChar( str );
-	
+
 	goto end;
-	
+
 error:
 	str->index = lastGood;
 	area = -1.0;
@@ -825,7 +827,7 @@ char *extractSeat( pstring str )
 
 	skipWhiteSpace( str );
 	getIndex( str, &lastGood );
-	
+
 	if ( str->buffer[ str->index ] != '{' ) {
 		goto end;
 	}
@@ -838,7 +840,7 @@ char *extractSeat( pstring str )
 
 	if ( endIndex == -1 || startIndex == endIndex ) {
 		goto end;
-	}	
+	}
 
 	temp = copyData( str, startIndex, endIndex );
 
@@ -919,9 +921,9 @@ char *extractSeat( pstring str )
 	}
 
 	incChar( str );
-	
+
 	goto end;
-	
+
 error:
 	if ( seat ) {
 		deallocate( seat, strlen(seat) + 1 );
diff --git a/cqe-challenges/CROMU_00015/src/genericParsers.c b/cqe-challenges/CROMU_00015/src/genericParsers.c
index 99f37c61..4dda0788 100644
--- a/cqe-challenges/CROMU_00015/src/genericParsers.c
+++ b/cqe-challenges/CROMU_00015/src/genericParsers.c
@@ -236,12 +236,12 @@ Border *extractBorder( pstring str )
 		printf("!!Failed to skip the final opening brace\n");
 		goto error;
 	}
-	
+
 	skipWhiteSpace(str);
 
 	/// If this is not a # indicating the closing brace then fail
 	if ( !atChar( str, '#' ) ) {
-		printf("!!Failed to locate the closing mark\n");		
+		printf("!!Failed to locate the closing mark\n");
 		goto error;
 	}
 
@@ -259,7 +259,7 @@ Border *extractBorder( pstring str )
 		printf("!!Failed to locate the end of the closing element id\n");
 		goto error;
 	}
-	
+
 	temp = copyData( str, start, end );
 
 #ifdef PATCHED
@@ -267,7 +267,9 @@ Border *extractBorder( pstring str )
 		goto error;
 	}
 #endif
-
+#ifndef PATCHED
+// codechecker_confirmed [core.NullDereference] This is a bug.
+#endif
 	if ( strcmp( temp, "Border") != 0 ) {
 		printf("!!Invalid closing element id: @s\n", temp);
 		deallocate(temp, strlen(temp)+1);
@@ -289,7 +291,7 @@ Border *extractBorder( pstring str )
 
 	/// Everything succeeded, skip error
 	goto fin;
-		
+
 error:
 	deallocate( bor, sizeof(Border) );
 	bor = NULL;
@@ -406,12 +408,12 @@ int extractPopulation( pstring str )
 		printf("!!Failed to skip the final opening brace\n");
 		return -1;
 	}
-	
+
 	skipWhiteSpace(str);
 
 	/// If this is not a # indicating the closing brace then fail
 	if ( !atChar( str, '#' ) ) {
-		printf("!!Failed to locate the closing mark\n");		
+		printf("!!Failed to locate the closing mark\n");
 		return -1;
 	}
 
@@ -429,15 +431,17 @@ int extractPopulation( pstring str )
 		printf("!!Failed to locate the end of the closing element id\n");
 		return end;
 	}
-	
+
 	temp = copyData( str, start, end );
 
 #ifdef PATCHED
 	if ( temp == NULL ) {
 		return -1;
 	}
-#endif 
-
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2, alpha.security.MallocOverflow, core.NullDereference] This is a bug.
+#endif
 	if ( strcmp( temp, "Population") != 0 ) {
 		printf("!!Invalid closing element id: @s\n", temp);
 		deallocate(temp, strlen(temp)+1);
@@ -456,7 +460,7 @@ int extractPopulation( pstring str )
 
 	/// Skip past the closing brace
 	skipLength( str, 1 );
-		
+
 	/// Copy the name element data
 	temp = copyData( str, ps, pe );
 
@@ -530,6 +534,9 @@ char *extractName( pstring str )
 #endif
 
 	if ( temp == NULL ) {
+#ifndef PATCHED
+            // codechecker_confirmed [core.NullDereference] This is a bug.
+#endif
 		printf("!!Copy from @d to @d failed\n", start, end);
 		return NULL;
 	}
@@ -587,12 +594,12 @@ char *extractName( pstring str )
 		printf("!!Failed to skip the final opening brace\n");
 		return NULL;
 	}
-	
+
 	skipWhiteSpace(str);
 
 	/// If this is not a # indicating the closing brace then fail
 	if ( !atChar( str, '#' ) ) {
-		printf("!!Failed to locate the closing mark\n");		
+		printf("!!Failed to locate the closing mark\n");
 		return NULL;
 	}
 
@@ -610,7 +617,7 @@ char *extractName( pstring str )
 		printf("!!Failed to locate the end of the closing element id\n");
 		return NULL;
 	}
-	
+
 	temp = copyData( str, start, end );
 
 #ifdef PATCHED
@@ -618,7 +625,9 @@ char *extractName( pstring str )
 		return NULL;
 	}
 #endif
-
+#ifndef PATCHED
+// codechecker_confirmed [core.NullDereference] This is a bug.
+#endif
 	if ( strcmp( temp, "Name") != 0 ) {
 		printf("!!Invalid closing element id: @s\n", temp);
 		deallocate(temp, strlen(temp)+1);
@@ -637,7 +646,7 @@ char *extractName( pstring str )
 
 	/// Skip past the closing brace
 	skipLength( str, 1 );
-		
+
 	/// Copy the name element data
 	name = copyData( str, ns, ne );
 
diff --git a/cqe-challenges/CROMU_00015/src/planetParsers.c b/cqe-challenges/CROMU_00015/src/planetParsers.c
index b61005ee..4a95f44e 100644
--- a/cqe-challenges/CROMU_00015/src/planetParsers.c
+++ b/cqe-challenges/CROMU_00015/src/planetParsers.c
@@ -146,7 +146,7 @@ int planetMenu( pPlanet pl )
 				pl->countries[choice] = pc;
 
 				length = 0;
-	
+
 				while ( isalnum( selection[length] ) ) {
 					pc->name[length] = selection[length];
 					length++;
@@ -224,7 +224,7 @@ void freePlanet( pPlanet pl )
 
 		index++;
 	}
-	
+
 	deallocate( pl, sizeof(Planet) );
 
 	return;
@@ -279,7 +279,7 @@ void printPlanetInfo( pPlanet pl )
         if ( pl->mass >= 0.0 ) {
                 printf("\tMass: @f\n", pl->mass);
         }
-	
+
 	if ( pl->gravity >= 0.0 ) {
 		printf("\tGravity: @f\n", pl->gravity);
 	}
@@ -561,7 +561,7 @@ pPlanet planetTopLevel( pstring topLevel )
         }
 
         incChar(topLevel);
-	
+
         goto end;
 
 error:
@@ -684,12 +684,12 @@ double extractPeriod( pstring str )
 		printf("!!Failed to skip the final opening brace\n");
 		return period;
 	}
-	
+
 	skipWhiteSpace(str);
 
 	/// If this is not a # indicating the closing brace then fail
 	if ( !atChar( str, '#' ) ) {
-		printf("!!Failed to locate the closing mark\n");		
+		printf("!!Failed to locate the closing mark\n");
 		return -1.0;
 	}
 
@@ -707,14 +707,16 @@ double extractPeriod( pstring str )
 		printf("!!Failed to locate the end of the closing element id\n");
 		return -1.0;
 	}
-	
+
 	temp = copyData( str, start, end );
 #ifdef PATCHED
 	if ( temp == NULL ) {
 		return -1.0;
 	}
 #endif
-
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2, alpha.security.MallocOverflow, core.NullDereference] This is a bug.
+#endif
 	if ( strcmp( temp, "Period") != 0 ) {
 		printf("!!Invalid closing element id: @s\n", temp);
 		deallocate(temp, strlen(temp)+1);
@@ -733,7 +735,7 @@ double extractPeriod( pstring str )
 
 	/// Skip past the closing brace
 	skipLength( str, 1 );
-		
+
 	/// Copy the name element data
 	temp = copyData( str, ps, pe );
 
@@ -764,7 +766,7 @@ double extractOrbitSpeed( pstring str )
 	int se = 0;
 
 	if (str == NULL ) {
-		goto reterrvalue;	
+		goto reterrvalue;
 	}
 
 	start = skipWhiteSpace(str);
@@ -854,12 +856,12 @@ double extractOrbitSpeed( pstring str )
 		printf("!!Failed to skip the final opening brace\n");
 		goto reterrspeed;
 	}
-	
+
 	skipWhiteSpace(str);
 
 	/// If this is not a # indicating the closing brace then fail
 	if ( !atChar( str, '#' ) ) {
-		printf("!!Failed to locate the closing mark\n");		
+		printf("!!Failed to locate the closing mark\n");
 		return -1.0;
 	}
 
@@ -877,7 +879,7 @@ double extractOrbitSpeed( pstring str )
 		printf("!!Failed to locate the end of the closing element id\n");
 		return -1.0;
 	}
-	
+
 	temp = copyData( str, start, end );
 
 #ifdef PATCHED
@@ -885,7 +887,9 @@ double extractOrbitSpeed( pstring str )
 		return -1.0;
 	}
 #endif
-
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2, alpha.security.MallocOverflow, core.NullDereference] This is a bug.
+#endif
 	if ( strcmp( temp, "OrbitSpeed") != 0 ) {
 		printf("!!Invalid closing element id: @s\n", temp);
 		bzero(temp, strlen(temp) + 1 );
@@ -906,7 +910,7 @@ double extractOrbitSpeed( pstring str )
 
 	/// Skip past the closing brace
 	skipLength( str, 1 );
-		
+
 	/// Copy the name element data
 	temp = copyData( str, ss, se );
 
@@ -922,7 +926,7 @@ double extractOrbitSpeed( pstring str )
 	goto retspeed;
 
 reterrvalue:
-	return -1.0; 
+	return -1.0;
 
 reterrspeed:
 	speed = -1.0;
@@ -1037,12 +1041,12 @@ double extractAphelion( pstring str )
 		printf("!!Failed to skip the final opening brace\n");
 		return aphelion;
 	}
-	
+
 	skipWhiteSpace(str);
 
 	/// If this is not a # indicating the closing brace then fail
 	if ( !atChar( str, '#' ) ) {
-		printf("!!Failed to locate the closing mark\n");		
+		printf("!!Failed to locate the closing mark\n");
 		return -1.0;
 	}
 
@@ -1060,7 +1064,7 @@ double extractAphelion( pstring str )
 		printf("!!Failed to locate the end of the closing element id\n");
 		return -1.0;
 	}
-	
+
 	temp = copyData( str, start, end );
 
 #ifdef PATCHED
@@ -1068,7 +1072,9 @@ double extractAphelion( pstring str )
 		return -1.0;
 	}
 #endif
-
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2, alpha.security.MallocOverflow, core.NullDereference] This is a bug.
+#endif
 	if ( strcmp( temp, "Aphelion") != 0 ) {
 		printf("!!Invalid closing element id: @s\n", temp);
 		deallocate(temp, strlen(temp)+1);
@@ -1087,7 +1093,7 @@ double extractAphelion( pstring str )
 
 	/// Skip past the closing brace
 	skipLength( str, 1 );
-		
+
 	/// Copy the name element data
 	temp = copyData( str, ps, pe );
 
@@ -1208,12 +1214,12 @@ double extractPerihelion( pstring str )
 		printf("!!Failed to skip the final opening brace\n");
 		return perihelion;
 	}
-	
+
 	skipWhiteSpace(str);
 
 	/// If this is not a # indicating the closing brace then fail
 	if ( !atChar( str, '#' ) ) {
-		printf("!!Failed to locate the closing mark\n");		
+		printf("!!Failed to locate the closing mark\n");
 		return -1.0;
 	}
 
@@ -1231,7 +1237,7 @@ double extractPerihelion( pstring str )
 		printf("!!Failed to locate the end of the closing element id\n");
 		return -1.0;
 	}
-	
+
 	temp = copyData( str, start, end );
 
 	if ( strcmp( temp, "Perihelion") != 0 ) {
@@ -1252,7 +1258,7 @@ double extractPerihelion( pstring str )
 
 	/// Skip past the closing brace
 	skipLength( str, 1 );
-		
+
 	/// Copy the name element data
 	temp = copyData( str, ps, pe );
 
@@ -1373,12 +1379,12 @@ double extractRadius( pstring str )
 		printf("!!Failed to skip the final opening brace\n");
 		return radius;
 	}
-	
+
 	skipWhiteSpace(str);
 
 	/// If this is not a # indicating the closing brace then fail
 	if ( !atChar( str, '#' ) ) {
-		printf("!!Failed to locate the closing mark\n");		
+		printf("!!Failed to locate the closing mark\n");
 		return -1.0;
 	}
 
@@ -1396,7 +1402,7 @@ double extractRadius( pstring str )
 		printf("!!Failed to locate the end of the closing element id\n");
 		return -1.0;
 	}
-	
+
 	temp = copyData( str, start, end );
 
 	if ( strcmp( temp, "Radius") != 0 ) {
@@ -1417,7 +1423,7 @@ double extractRadius( pstring str )
 
 	/// Skip past the closing brace
 	skipLength( str, 1 );
-		
+
 	/// Copy the name element data
 	temp = copyData( str, rs, re );
 
@@ -1538,12 +1544,12 @@ double extractERadius( pstring str )
 		printf("!!Failed to skip the final opening brace\n");
 		return eradius;
 	}
-	
+
 	skipWhiteSpace(str);
 
 	/// If this is not a # indicating the closing brace then fail
 	if ( !atChar( str, '#' ) ) {
-		printf("!!Failed to locate the closing mark\n");		
+		printf("!!Failed to locate the closing mark\n");
 		return -1.0;
 	}
 
@@ -1561,7 +1567,7 @@ double extractERadius( pstring str )
 		printf("!!Failed to locate the end of the closing element id\n");
 		return -1.0;
 	}
-	
+
 	temp = copyData( str, start, end );
 
 	if ( strcmp( temp, "ERadius") != 0 ) {
@@ -1582,7 +1588,7 @@ double extractERadius( pstring str )
 
 	/// Skip past the closing brace
 	skipLength( str, 1 );
-		
+
 	/// Copy the eradius element data
 	temp = copyData( str, es, ee );
 
@@ -1703,12 +1709,12 @@ double extractMass( pstring str )
 		printf("!!Failed to skip the final opening brace\n");
 		return mass;
 	}
-	
+
 	skipWhiteSpace(str);
 
 	/// If this is not a # indicating the closing brace then fail
 	if ( !atChar( str, '#' ) ) {
-		printf("!!Failed to locate the closing mark\n");		
+		printf("!!Failed to locate the closing mark\n");
 		return -1.0;
 	}
 
@@ -1726,7 +1732,7 @@ double extractMass( pstring str )
 		printf("!!Failed to locate the end of the closing element id\n");
 		return -1.0;
 	}
-	
+
 	temp = copyData( str, start, end );
 
 #ifdef PATCHED
@@ -1734,7 +1740,9 @@ double extractMass( pstring str )
 		return -1.0;
 	}
 #endif
-
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2, alpha.security.MallocOverflow, core.NullDereference] This is a bug.
+#endif
 	if ( strcmp( temp, "Mass") != 0 ) {
 		printf("!!Invalid closing element id: @s\n", temp);
 		deallocate(temp, strlen(temp)+1);
@@ -1753,7 +1761,7 @@ double extractMass( pstring str )
 
 	/// Skip past the closing brace
 	skipLength( str, 1 );
-		
+
 	/// Copy the mass element data
 	temp = copyData( str, es, ee );
 
@@ -1874,12 +1882,12 @@ double extractGravity( pstring str )
 		printf("!!Failed to skip the final opening brace\n");
 		return gravity;
 	}
-	
+
 	skipWhiteSpace(str);
 
 	/// If this is not a # indicating the closing brace then fail
 	if ( !atChar( str, '#' ) ) {
-		printf("!!Failed to locate the closing mark\n");		
+		printf("!!Failed to locate the closing mark\n");
 		return -1.0;
 	}
 
@@ -1897,7 +1905,7 @@ double extractGravity( pstring str )
 		printf("!!Failed to locate the end of the closing element id\n");
 		return -1.0;
 	}
-	
+
 	temp = copyData( str, start, end );
 
 	if ( strcmp( temp, "Gravity") != 0 ) {
@@ -1918,7 +1926,7 @@ double extractGravity( pstring str )
 
 	/// Skip past the closing brace
 	skipLength( str, 1 );
-		
+
 	/// Copy the gravity element data
 	temp = copyData( str, es, ee );
 
@@ -1933,4 +1941,3 @@ double extractGravity( pstring str )
 
 	return gravity;
 }
-
diff --git a/cqe-challenges/CROMU_00016/src/receive.c b/cqe-challenges/CROMU_00016/src/receive.c
index 0d493691..3be23573 100644
--- a/cqe-challenges/CROMU_00016/src/receive.c
+++ b/cqe-challenges/CROMU_00016/src/receive.c
@@ -55,6 +55,9 @@ int InitReceive(void) {
 #ifdef PATCHED
 		if ((len = readUntil(buf, 9, '\n')) == -1) {
 #else
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
 		if ((len = readUntil(buf, 29, '\n')) == -1) {
 #endif
 			return(-1);
@@ -100,8 +103,11 @@ int InitReceive(void) {
 	}
 
 	// init the NextPkt struct
+#ifndef PATCHED
+// codechecker_confirmed [unix.API] This is a bug.
+#endif
 	bzero(&NextPkt, sizeof(pkt));
-	
+
 	return(0);
 
 }
diff --git a/cqe-challenges/CROMU_00017/src/service.c b/cqe-challenges/CROMU_00017/src/service.c
index 891eeabf..ca656162 100644
--- a/cqe-challenges/CROMU_00017/src/service.c
+++ b/cqe-challenges/CROMU_00017/src/service.c
@@ -78,6 +78,9 @@ void print_statistics()
 		#ifdef PATCHED
 			receive(STDIN, name, sizeof(name) -1 , NULL);
 		#else
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
 			receive(STDIN, name, sizeof(name) + 45, NULL);
 		#endif
 		printf("Good job, @s!\n", name);
@@ -91,6 +94,9 @@ void print_statistics()
 		#ifdef PATCHED
 			receive(STDIN, name, sizeof(name) -1 , NULL);
 		#else
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
 			receive(STDIN, name, sizeof(name) + 45, NULL);
 		#endif
 		printf("Good job, @s!\n", name);
@@ -104,6 +110,9 @@ void print_statistics()
 		#ifdef PATCHED
 			receive(STDIN, name, sizeof(name) -1 , NULL);
 		#else
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
 			receive(STDIN, name, sizeof(name) + 45, NULL);
 		#endif
 		printf("Good job, @s!\n", name);
diff --git a/cqe-challenges/CROMU_00019/src/casino.c b/cqe-challenges/CROMU_00019/src/casino.c
index 74b4bb7a..1e225866 100644
--- a/cqe-challenges/CROMU_00019/src/casino.c
+++ b/cqe-challenges/CROMU_00019/src/casino.c
@@ -50,7 +50,7 @@ int payouts[NUMBER_OF_PAYOUTS] = {
     20      // BLACKJACK_WIN
 };
 
-// Searches player list for matching player number. 
+// Searches player list for matching player number.
 // Returns pointer to player_info struct or 0 if not found.
 player_info *lookup_by_number(int number, player_info *root_player)
 {
@@ -66,7 +66,7 @@ player_info *lookup_by_number(int number, player_info *root_player)
             player = player->next;
         }
     }
-    return player;  
+    return player;
 }
 
 // Requests a player number from the user and returns the associated player info struct.
@@ -105,8 +105,8 @@ void print_player_info(player_info *player)
     printf("\n");
 }
 
-// Registers a new player and adds new player to the beginning of the linked list of players. 
-// Returns the new root_player node. 
+// Registers a new player and adds new player to the beginning of the linked list of players.
+// Returns the new root_player node.
 player_info *register_player(player_info *root_player)
 {
     player_info *new_player;
@@ -120,7 +120,7 @@ player_info *register_player(player_info *root_player)
     {
         new_player->number = prng() & 0x7fffffff; // positive numbers only
     } while (lookup_by_number(new_player->number, root_player) != 0);
-    
+
     printf("Enter your name:");
     receive_fixed_input(new_player->name, '\n', sizeof(new_player->name) - 1);
     printf("How much cash do you want to spend?:");
@@ -191,7 +191,7 @@ int lookup(char byte)
 }
 
 // Decodes a string of ascii characters into binary data.
-// Invalid input will terminate the program. 
+// Invalid input will terminate the program.
 // Can write up to size bytes to *decoded.
 void decode(char *encoded, char *decoded, size_t size)
 {
@@ -258,7 +258,7 @@ void programming_interface()
 #ifdef PATCHED
     // Provide additional stack space for decoded data to overflow to
     int new_payouts[NUMBER_OF_PAYOUTS * 2];
-#else 
+#else
     int new_payouts[NUMBER_OF_PAYOUTS];
 #endif
 
@@ -314,7 +314,7 @@ int main(void) {
     player_info *root_player = 0;
 
     // Play the game
-    while( (current_player == 0) || 
+    while( (current_player == 0) ||
         (current_player->wallet <= BREAK_THE_BANK) )
     {
         printf("\n");
@@ -330,7 +330,7 @@ int main(void) {
 
         char input;
         receive_fixed_input(&input, '\n', sizeof(input));
-        
+
         switch(input)
         {
             case '1':
diff --git a/cqe-challenges/CROMU_00020/src/handler.c b/cqe-challenges/CROMU_00020/src/handler.c
index b5b7642b..adf3685e 100644
--- a/cqe-challenges/CROMU_00020/src/handler.c
+++ b/cqe-challenges/CROMU_00020/src/handler.c
@@ -85,7 +85,6 @@ HANDLER(echo){
     _terminate(-1);
   }
 #endif
-
   size_t i = 0;
   while(1) {
     buf[i] = data[i];
diff --git a/cqe-challenges/CROMU_00021/src/service.c b/cqe-challenges/CROMU_00021/src/service.c
index 6090ea51..62dd6345 100644
--- a/cqe-challenges/CROMU_00021/src/service.c
+++ b/cqe-challenges/CROMU_00021/src/service.c
@@ -123,6 +123,9 @@ void process(char *input) {
 		if ( equals == NULL ) {
 			break;
 		}
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.core.DynamicTypeChecker, alpha.security.ArrayBoundV2, alpha.security.ArrayBoundV2, core.NullDereference, alpha.security.MallocOverflow] This is a bug.
 #endif
                 if(equals && *equals == '=') {
                     //declaration and assignment at once.
@@ -172,6 +175,9 @@ void process(char *input) {
                 ltype *out;
                 out = (ltype *)findInTrie(root, "add")->value;
                 #ifndef PATCHED
+#ifndef PATCHED
+// codechecker_confirmed [alpha.core.DynamicTypeChecker, alpha.security.ArrayBoundV2, alpha.security.ArrayBoundV2, core.NullDereference, alpha.security.MallocOverflow] This is a bug.
+#endif
                 push(funcStack, out);
                 #else
                 if(strcmp(out->type, "Function") == 0)
@@ -187,6 +193,9 @@ void process(char *input) {
                 ltype *out;
                 out = (ltype *)findInTrie(root, "sub")->value;
                 #ifndef PATCHED
+#ifndef PATCHED
+// codechecker_confirmed [alpha.core.DynamicTypeChecker, alpha.security.ArrayBoundV2, alpha.security.ArrayBoundV2, core.NullDereference, alpha.security.MallocOverflow] This is a bug.
+#endif
                 push(funcStack, out);
                 #else
                 if(strcmp(out->type, "Function") == 0)
@@ -202,6 +211,9 @@ void process(char *input) {
                 ltype *out;
                 out = (ltype *)findInTrie(root, "mul")->value;
                 #ifndef PATCHED
+#ifndef PATCHED
+// codechecker_confirmed [alpha.core.DynamicTypeChecker, alpha.security.ArrayBoundV2, alpha.security.ArrayBoundV2, core.NullDereference, alpha.security.MallocOverflow] This is a bug.
+#endif
                 push(funcStack, out);
                 #else
                 if(strcmp(out->type, "Function") == 0)
@@ -217,6 +229,9 @@ void process(char *input) {
                 ltype *out;
                 out = (ltype *)findInTrie(root, "div")->value;
                 #ifndef PATCHED
+#ifndef PATCHED
+// codechecker_confirmed [alpha.core.DynamicTypeChecker, alpha.security.ArrayBoundV2, alpha.security.ArrayBoundV2, core.NullDereference, alpha.security.MallocOverflow] This is a bug.
+#endif
                 push(funcStack, out);
                 #else
                 if(strcmp(out->type, "Function") == 0)
@@ -232,6 +247,9 @@ void process(char *input) {
                 ltype *out;
                 out = (ltype *)findInTrie(root, "mod")->value;
                 #ifndef PATCHED
+#ifndef PATCHED
+// codechecker_confirmed [alpha.core.DynamicTypeChecker, alpha.security.ArrayBoundV2, alpha.security.ArrayBoundV2, core.NullDereference, alpha.security.MallocOverflow] This is a bug.
+#endif
                 push(funcStack, out);
                 #else
                 if(strcmp(out->type, "Function") == 0)
@@ -247,6 +265,9 @@ void process(char *input) {
                 ltype *out;
                 out = (ltype *)findInTrie(root, "equals")->value;
                 #ifndef PATCHED
+#ifndef PATCHED
+// codechecker_confirmed [alpha.core.DynamicTypeChecker, alpha.security.ArrayBoundV2, alpha.security.ArrayBoundV2, core.NullDereference, alpha.security.MallocOverflow] This is a bug.
+#endif
                 push(funcStack, out);
                 #else
                 if(strcmp(out->type, "Function") == 0)
@@ -407,6 +428,9 @@ void mul() {
                 return;
             }
             #endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.core.DynamicTypeChecker, alpha.security.ArrayBoundV2, alpha.security.ArrayBoundV2, core.NullDereference, alpha.security.MallocOverflow] This is a bug.
+#endif
             times = (int)oper1->value;
             size = (oper2->len * (int)oper1->value) + 1;
             tmp = calloc(size, 1);
diff --git a/cqe-challenges/CROMU_00021/src/stack.c b/cqe-challenges/CROMU_00021/src/stack.c
index 61c2730b..2da44d08 100644
--- a/cqe-challenges/CROMU_00021/src/stack.c
+++ b/cqe-challenges/CROMU_00021/src/stack.c
@@ -39,6 +39,9 @@ void push(stack *myStack, void *value) {
 	#ifdef PATCHED
 	if(myStack->top < 31) {
 	#endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
 		myStack->top++;
 		myStack->items[myStack->top] = value;
 	#ifdef PATCHED
@@ -64,4 +67,4 @@ stack *initStack() {
 
 	return ret;
 
-}
\ No newline at end of file
+}
diff --git a/cqe-challenges/CROMU_00022/src/ui.c b/cqe-challenges/CROMU_00022/src/ui.c
index 73a02db1..3dc296df 100644
--- a/cqe-challenges/CROMU_00022/src/ui.c
+++ b/cqe-challenges/CROMU_00022/src/ui.c
@@ -96,7 +96,7 @@ void EpochToDate(int date[6], long int epoch){
 	int remainder = 0;
 	int temp = 0;
 	int count = 0;
-	//if epoch is negative, bail. 
+	//if epoch is negative, bail.
 	if ( epoch < 0 ){
 		date[0] = 0;
 		return;
@@ -123,7 +123,7 @@ void EpochToDate(int date[6], long int epoch){
 	int SinM = 0;
 	while ( temp >=0 ){
 		remainder = temp;
-		SinM = (  86400 * ( monthD[count] )  ); 
+		SinM = (  86400 * ( monthD[count] )  );
 		temp = remainder - SinM;
 		count += 1;
 	}
@@ -141,19 +141,19 @@ void EpochToDate(int date[6], long int epoch){
 	remainder = (  remainder - ( SinH * date[3] )  );
 	date[4] = ( remainder/60 );
 	//seconds
-	date[5] = (  remainder - ( 60 * date[4] )  ); 
+	date[5] = (  remainder - ( 60 * date[4] )  );
 }
 
 
 void MainMenu (pDiverInfo DiverInfo) {
 	char result = 0x01;
-	while (result == 0x01){			
+	while (result == 0x01){
 		puts ("");
 		puts ("C - Change Diver Info");
 		puts ("L - Log a New Dive");
-		puts ("D - Download Dive Data");	
-		puts ("E - Edit Dives");	
-		puts ("P - Print Dive Logs");	
+		puts ("D - Download Dive Data");
+		puts ("E - Edit Dives");
+		puts ("P - Print Dive Logs");
 		puts ("R - Remove Dives");
 		puts ("S - Diver Statistics");
 		puts ("X - Exit Application");
@@ -276,7 +276,7 @@ void ChangeDiverInfo( pDiverInfo DiverInfo ) {
 	SanitizeDate( DiverInfo->PADIDate );
 	PrintDiverInfo( DiverInfo );
 	return;
-} 
+}
 
 void LogNewDive( pDiverInfo DiverInfo ) {
 	puts ("");
@@ -335,7 +335,7 @@ void SanitizeDate(char date[32]){
 					if (  ( day >= 1 )&&( day <= 31 )  ){
 						validDate = 1;
 					}
-				} 
+				}
 			}
 		}
 	}
@@ -394,6 +394,9 @@ void SanitizeTime( char timeString[32] ){
 			}
 		}
 	}
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
 #endif
 	bzero(tempString, 16);
 
@@ -410,7 +413,7 @@ void SanitizeDiveEntry( pDiveEntry DiveEntryThis ){
 
 	SanitizeDate( DiveEntryThis->DiveDate );
 	SanitizeTime( DiveEntryThis->DiveTime );
-	
+
 	return;
 }
 
@@ -449,7 +452,6 @@ void DownloadDiveData( pDiverInfo DiverInfo ){
 		return;
 	}
 #endif
-
 	pDiveEntry DiveEntryNew = AddDive(DiverInfo);
 
 	unsigned long int timeS = 0;
@@ -481,7 +483,7 @@ void DownloadDiveData( pDiverInfo DiverInfo ){
 				depthS = 3000;
 			}
 
-			count += 1;	
+			count += 1;
 			depthSum += depthS;
 			if ( timeS < lowestTime ){
 				lowestTime = timeS;
@@ -500,10 +502,17 @@ void DownloadDiveData( pDiverInfo DiverInfo ){
 	DiveEntryNew->DiveDuration = ( ( highestTime - lowestTime )/60 );
 	DiveEntryNew->AvgDepth = ( depthSum/count );
 	DiveEntryNew->Dive_BinCount = count;
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
 	sprintf( DiveEntryNew->DiveDate, "@d/@d/@d",date[0],date[1],date[2] );
-	sprintf( DiveEntryNew->DiveTime, "@02d:@02d:@02d",date[3],date[4],date[5] );  
+
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
+	sprintf( DiveEntryNew->DiveTime, "@02d:@02d:@02d",date[3],date[4],date[5] );
 	ChangeDive( DiveEntryNew );
-	return;	
+	return;
 }
 
 pDiveEntryListNode SelectDive( pDiverInfo DiverInfo, char prompt[32] ){
@@ -521,19 +530,22 @@ pDiveEntryListNode SelectDive( pDiverInfo DiverInfo, char prompt[32] ){
 	while (  ( DiveEntryListThis != NULL )&&( count < MAXDIVECOUNT )  ){
 #endif
 #ifndef PATCHED
-	//CWE-787 
+	//CWE-787
 	while (  ( DiveEntryListThis != NULL )&&( count <= MAXDIVECOUNT )  ){
 #endif
 
 		DiveEntryThis = DiveEntryListThis->DiveEntry;
 		//129th pointer is written over count
-		list[count] = DiveEntryListThis;		
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
+                list[count] = DiveEntryListThis;
 		//count is incremented, count now points 1 bytes after start of DiveEntryList_s
 		count += 1;
 		printf("@4d: @-10s @-8s",count, DiveEntryThis->DiveDate, DiveEntryThis->DiveTime);
 		printf(" @-25s @-25s\n", DiveEntryThis->SiteName, DiveEntryThis->DiveLocation );
 		//DiveEntryListThis is ++, but doesn't matter because exit loop on count which is most certainly
-		//greater then MAXDIVECOUNT 
+		//greater then MAXDIVECOUNT
 		DiveEntryListThis = DiveEntryListThis->next;
 	}
 	printf("@s",prompt);
@@ -582,7 +594,7 @@ void DiverStatistics( pDiverInfo DiverInfo ){
 	pDiveEntry DiveEntryThis = NULL;
 	long int count = 0;
 	long int maxSum = 0;
-	long int lengthSum = 0; 
+	long int lengthSum = 0;
 	if ( DiveEntryListThis == NULL ){
 		printf("\nDive Log is empty\n");
 		return;
@@ -593,7 +605,7 @@ void DiverStatistics( pDiverInfo DiverInfo ){
 		maxSum = maxSum + DiveEntryThis->MaxDepth;
 		lengthSum = lengthSum + DiveEntryThis->DiveDuration;
 		DiveEntryListThis = DiveEntryListThis->next;
-	}	
+	}
 	maxSum = maxSum/count;
 	lengthSum = lengthSum/count;
 	printf("\nDives logged: @d\n",count);
@@ -601,4 +613,3 @@ void DiverStatistics( pDiverInfo DiverInfo ){
 	printf("Average Dive Length: @d\n",lengthSum);
 	return;
 }
-
diff --git a/cqe-challenges/CROMU_00023/src/dive.cc b/cqe-challenges/CROMU_00023/src/dive.cc
index 1fe66986..4510cbd1 100644
--- a/cqe-challenges/CROMU_00023/src/dive.cc
+++ b/cqe-challenges/CROMU_00023/src/dive.cc
@@ -33,8 +33,14 @@ uint32_t Dive::AddDiveBin( uint32_t timeval, uint32_t depth )
     if ( index >= DIVE_BIN_COUNT )
         return (-1);
 #endif
-
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
     m_diveBins[index].SetTimeVal( timeval );
+
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
     m_diveBins[index].SetDepth( depth );
 
     m_diveBinCount++;
diff --git a/cqe-challenges/CROMU_00024/src/bst.c b/cqe-challenges/CROMU_00024/src/bst.c
index 0facd16d..f44d73ba 100755
--- a/cqe-challenges/CROMU_00024/src/bst.c
+++ b/cqe-challenges/CROMU_00024/src/bst.c
@@ -216,6 +216,9 @@ data_item_type *prev_ptr, *next_ptr;
 
 #ifdef PATCHED
 #else				
+#ifndef PATCHED
+// codechecker_confirmed [core.NullDereference] This is a bug.
+#endif
 				next_ptr=next_ptr->next;
 #endif
 				free(next_ptr);
diff --git a/cqe-challenges/CROMU_00025/src/fpti_image_data.c b/cqe-challenges/CROMU_00025/src/fpti_image_data.c
index ca30e72c..d4c7c104 100644
--- a/cqe-challenges/CROMU_00025/src/fpti_image_data.c
+++ b/cqe-challenges/CROMU_00025/src/fpti_image_data.c
@@ -27,7 +27,7 @@ int fpti_add_pixel( pfpti_image_data fid, int x, int y, char *image, int xlen, i
 {
 	int pixel_index = 0;
 	char c = 0;
-	
+
 	if ( fid == NULL ) {
 		return 0;
 	}
@@ -172,7 +172,7 @@ int fpti_display_img( pfpti_image_data fid )
 			printf("[ERROR] Invalid FPTI Axis Type\n");
 			return 0;
 			break;
-	};		
+	};
 
 	//printf("maxx: @d minx: @d maxy: @d miny: @d\n", maxx, minx, maxy, miny);
 
@@ -207,7 +207,7 @@ int fpti_display_img( pfpti_image_data fid )
 			return 0;
 		}
 	}
-	
+
         for (int i = 0; i < image_length; i++) {
                 if (i%xlen == 0 && i != 0) {
                         printf("\n");
diff --git a/cqe-challenges/CROMU_00025/src/tbir_image_data.c b/cqe-challenges/CROMU_00025/src/tbir_image_data.c
index 571d2709..ddc3479a 100644
--- a/cqe-challenges/CROMU_00025/src/tbir_image_data.c
+++ b/cqe-challenges/CROMU_00025/src/tbir_image_data.c
@@ -71,7 +71,7 @@ int tbir_read_pixels( ptbir_image_data tid )
 		return 0;
 	}
 
-	if ( !(tid->flags & TBIR_HEADER) || !(tid->flags & TBIR_FLAGS) 
+	if ( !(tid->flags & TBIR_HEADER) || !(tid->flags & TBIR_FLAGS)
 		|| !(tid->flags & TBIR_PIXELT) || !(tid->flags & TBIR_LOADD) ) {
 		return 0;
 	}
@@ -82,7 +82,7 @@ int tbir_read_pixels( ptbir_image_data tid )
 	}
 
 	tid->flags |= TBIR_PIXELS;
-	
+
 	/// Calculate the length of the pixel data. Round to next 32 bit boundary to assume padding
 	dword_count = (tid->width * tid->height) * tid->pixel_type;
 	bits_to_consume = ( (dword_count + 31) & 0xffffffe0) - dword_count;
@@ -188,7 +188,7 @@ int tbir_read_pixels( ptbir_image_data tid )
 					tid->image_length = 0;
 					return tid->image_length;
 				}
-					
+
 				tid->image[index] = one[pixel];
 				break;
 			case 2:
@@ -215,6 +215,9 @@ int tbir_read_pixels( ptbir_image_data tid )
 #ifdef PATCHED
 					tid->image = NULL;
 					tid->image_length = 0;
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [core.uninitialized.ArraySubscript, unix.Malloc] This is a bug.
 #endif
 					return tid->image_length;
 				}
@@ -376,7 +379,7 @@ int tbir_display_img( ptbir_image_data tid )
 	return 0;
 }
 
-int tbir_read_width( ptbir_image_data tid ) 
+int tbir_read_width( ptbir_image_data tid )
 {
 	int width = 0;
 
@@ -576,7 +579,7 @@ int tbir_read_nbits( ptbir_image_data tid, int bitcount, int *value )
 	while ( bitcount ) {
 		data = data << 1;
 		data = data | ((tid->buffer[tid->cbyte] >> (7-tid->cbit)) & 0x1);
-		
+
 		tid->cbyte += (tid->cbit + 1) / 8;
 		tid->cbit = ( tid->cbit + 1 ) % 8;
 		bitcount -= 1;
diff --git a/cqe-challenges/CROMU_00026/src/messagehandler.cc b/cqe-challenges/CROMU_00026/src/messagehandler.cc
index 77306997..e38e34c3 100644
--- a/cqe-challenges/CROMU_00026/src/messagehandler.cc
+++ b/cqe-challenges/CROMU_00026/src/messagehandler.cc
@@ -69,6 +69,9 @@ CFullMessage *CMessageFragmentList::CFragmentData::AssembleFragments( void ) con
         if ( m_pMessageFragments[i] )
         {
             // Copy data
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
             memcpy( pFullMessageData+fullMessagePos, (void *)m_pMessageFragments[i]->GetData(), m_pMessageFragments[i]->GetDataLength() );
 
             // Update full message position
diff --git a/cqe-challenges/CROMU_00026/src/messagerenderer.cc b/cqe-challenges/CROMU_00026/src/messagerenderer.cc
index e2af1fc8..3da2435c 100644
--- a/cqe-challenges/CROMU_00026/src/messagerenderer.cc
+++ b/cqe-challenges/CROMU_00026/src/messagerenderer.cc
@@ -51,7 +51,9 @@ uint32_t add_render_buffer( uint8_t *pBuffer, uint32_t bufferPos, const char *ps
     if ( (bufferPos + lenToAdd) > maxBufferPos )
         return 0;
 #endif
-
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
     memcpy( (uint8_t*)pBuffer+bufferPos, (uint8_t*)pszString, strlen( pszString ) );
 
     return strlen( pszString );
diff --git a/cqe-challenges/CROMU_00027/src/command.c b/cqe-challenges/CROMU_00027/src/command.c
index 0187a5ef..e75566db 100644
--- a/cqe-challenges/CROMU_00027/src/command.c
+++ b/cqe-challenges/CROMU_00027/src/command.c
@@ -135,7 +135,10 @@ int ReceiveCommand(CommandStruct *command, int *more_commands) {
     if (decoded_size <= 0) {
       return -1;
     }
-    #endif 
+    #endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
     command->data = calloc(decoded_size + 1, 1);
     VerifyPointerOrTerminate(command->data, "command->data during parsing");
     char *encoded_data;
@@ -232,4 +235,4 @@ void HandleCommand(CommandStruct *command) {
       }
       break;
   }
-}
\ No newline at end of file
+}
diff --git a/cqe-challenges/CROMU_00027/src/page.c b/cqe-challenges/CROMU_00027/src/page.c
index 91056a0d..99064360 100644
--- a/cqe-challenges/CROMU_00027/src/page.c
+++ b/cqe-challenges/CROMU_00027/src/page.c
@@ -36,7 +36,7 @@ int AddPageVar(PageVar *varlist, char *cmd) {
   if (value - name > sizeof(varlist->name)) {
     // Invalid name length
     return -1;
-  } 
+  }
   PageVar *pagevar = GetPageVar(varlist, name, value -1);
   if (pagevar != NULL) {
     // Special case, variable already exists
@@ -58,7 +58,10 @@ int AddPageVar(PageVar *varlist, char *cmd) {
   if (end - value <= 0) {
     return -1;
   }
-  #endif 
+  #endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.core.Conversion] This is a bug.
+#endif
   pagevar->value = calloc(end - value + 1, 1);
   VerifyPointerOrTerminate(pagevar->value, "PageVar->value");
   memcpy(pagevar->value, value, end - value);
@@ -91,7 +94,7 @@ void DestroyVarList(PageVar *varlist) {
 }
 
 // Processes user supplied variable definitions and then serves the requested
-// page using those variables. 
+// page using those variables.
 // Variable definitions are in the same syntax as those scripted in a page
 // eg. [var:name:value][var:name2:value2]
 int InteractWithPage(char *page, int page_size, char *override_data) {
@@ -99,7 +102,7 @@ int InteractWithPage(char *page, int page_size, char *override_data) {
   if (override_data == NULL) {
     return ServePageWithOverride(page, page_size, NULL);
   }
-#endif 
+#endif
   PageVar *override_list = calloc(sizeof(PageVar), 1);
   VerifyPointerOrTerminate(override_list, "Override_list initialization");
   // Process override variable definitions
@@ -107,6 +110,9 @@ int InteractWithPage(char *page, int page_size, char *override_data) {
     // Check for start of var definition
     if (*override_data != '[') { break; }
     // Process var definition
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
     AddPageVar(override_list, override_data);
     // Locate end of var definition
     char *end_of_var = strchr(override_data, ']');
@@ -159,11 +165,11 @@ void OutputStr(char *s) {
     memcpy(&line[line_length],s, strlen(s));
     line_length += strlen(s);
   }
-} 
+}
 
 // Serves a page by interpreting command codes, processing script commands,
 // and handling variable substitution. Any variables provided in the override_list
-// will take precedence over variables of the same name defined in the page. 
+// will take precedence over variables of the same name defined in the page.
 int ServePageWithOverride(char *page, int page_size, PageVar *override_list) {
   // Initialize varlist
   PageVar *varlist = calloc(sizeof(PageVar), 1);
@@ -171,13 +177,16 @@ int ServePageWithOverride(char *page, int page_size, PageVar *override_list) {
   in_a_box = 0;
   memset(line, '\0', sizeof(line));
   line_length = 0;
-  
+
   #ifdef PATCHED
   if (page == NULL) {
     goto error;
   }
   #endif
 
+#ifndef PATCHED
+  // codechecker_confirmed [alpha.core.Conversion] This is a bug.
+#endif
   while ((*page != '\0')&&(page < page + page_size)) {
     if (*page == '~') {
       // Command character, process command
@@ -248,7 +257,7 @@ int ServePageWithOverride(char *page, int page_size, PageVar *override_list) {
         }
         printf("\n");
         page += 4;
-      } 
+      }
     } else if (*page == ']') {
       page++;
       if (in_a_box) {
@@ -301,7 +310,3 @@ error:
   DestroyVarList(override_list);
   return -1;
 }
-
-
-
-
diff --git a/cqe-challenges/CROMU_00027/src/tree.c b/cqe-challenges/CROMU_00027/src/tree.c
index 8cef1901..4e37705e 100644
--- a/cqe-challenges/CROMU_00027/src/tree.c
+++ b/cqe-challenges/CROMU_00027/src/tree.c
@@ -72,7 +72,7 @@ struct InitialPageInfo InitialInfo[NUM_INITIAL_PAGES] = {
   { "AML.Variables", "AML supports string variables.~n"
                       "Variables are created within a script (see AML.Scripts)~n"
                       "and referenced with this syntax:~n"
-                      "~t~#variable~#~n"},  
+                      "~t~#variable~#~n"},
   { "AML.Scripts",  "AML supports additional commands within script tags ~[~]~n"
                     "~t~[var:name:value~] - sets a variable~n"
                     "~t~[line:character:length~] - insert a line of characters~n"
@@ -106,7 +106,7 @@ int InitializeTree() {
       free(node->page);
       free(node);
       return -1;
-    } 
+    }
   }
   return 0;
 }
@@ -133,7 +133,7 @@ void WalkTree(TreeNode *nodein) {
     // Pop node
     indent = (int)node_stack[--index];
     node = node_stack[--index];
-    
+
     for (int i=0; i<indent; i++) {
       printf("    ");
     }
@@ -143,7 +143,7 @@ void WalkTree(TreeNode *nodein) {
       node_stack[index++] = node->peer;
       node_stack[index++] = (TreeNode *)indent;
     }
-    
+
     if (node->child) {
       node_stack[index++] = node->child;
       node_stack[index++] = (TreeNode *)(indent + 1);
@@ -223,9 +223,9 @@ int DeleteNode(char *name) {
   return 0;
 }
 
-// Finds a node in the tree by name. 
+// Finds a node in the tree by name.
 // Returns pointer to the node or NULL
-TreeNode *LookupNode(char *name) {  
+TreeNode *LookupNode(char *name) {
   TreeNode *node = root->child;
   // Make a local copy of the name and walk its subparts
   char local_name[64];
@@ -289,9 +289,9 @@ int InsertNodeInTree(TreeNode *node) {
       insert_location->peer = node;
     }
     return 0;
-  } 
+  }
   // Strip leading portion of name
-  strncpy(node->name, last_part + 1, sizeof(node->name));  
+  strncpy(node->name, last_part + 1, sizeof(node->name));
   last_part[0] = '\0';
   insert_location = LookupNode(local_name);
   if (insert_location == NULL) {
@@ -309,4 +309,4 @@ int InsertNodeInTree(TreeNode *node) {
     insert_location->peer = node;
     return 0;
   }
-}
\ No newline at end of file
+}
diff --git a/cqe-challenges/CROMU_00028/src/carbonate.c b/cqe-challenges/CROMU_00028/src/carbonate.c
index fc3b853d..9fbee882 100644
--- a/cqe-challenges/CROMU_00028/src/carbonate.c
+++ b/cqe-challenges/CROMU_00028/src/carbonate.c
@@ -45,6 +45,9 @@ int main(void) {
       safe_set_stuff();
     }
 #else
+#ifndef PATCHED
+// codechecker_confirmed [core.uninitialized.ArraySubscript] This is a bug.
+#endif
   if (scramble_okay()) {
     while(1) {
       cool_set_stuff();
diff --git a/cqe-challenges/CROMU_00029/src/room.c b/cqe-challenges/CROMU_00029/src/room.c
index 73c38b86..93ffe9d0 100644
--- a/cqe-challenges/CROMU_00029/src/room.c
+++ b/cqe-challenges/CROMU_00029/src/room.c
@@ -92,7 +92,7 @@ int ParseDimensions(char *buf) {
 		return(-1);
 	}
 	Z = atoi(z);
-	
+
 	return(0);
 }
 
@@ -188,14 +188,14 @@ void SetHC(uint32_t i, char *buf) {
 #define RELATIVE_PCT (.25)
 void InitCustom(void) {
 	uint32_t i;
-	char *temps[] = { 
-		"-264.15", 
-		"-193.15", 
-		"-112.15", 
-		" -31.15", 
-		"  49.85", 
-		" 129.85", 
-		" 210.85", 
+	char *temps[] = {
+		"-264.15",
+		"-193.15",
+		"-112.15",
+		" -31.15",
+		"  49.85",
+		" 129.85",
+		" 210.85",
 		" 291.85" };
 	char buf[100];
 	double val;
@@ -258,7 +258,7 @@ void InitCustom(void) {
 			if (read_until(buf, "\n", 99) == -1) {
 				_terminate(-1);
 			}
-	
+
 			val = cgcatof(buf);
 
 #ifdef PATCHED
@@ -339,7 +339,7 @@ int InitMaterial(void) {
 		material = atoi(buf);
 	}
 
-	// set up the thermal conductivity and heat capacities 
+	// set up the thermal conductivity and heat capacities
 	switch(material) {
 		case 1:
 			InitAir();
@@ -412,7 +412,7 @@ int InitMaterial(void) {
 	// flush any remaining chars from stdin
 	flush_stdin();
 
-	if (isothermic) {	
+	if (isothermic) {
 		// isothermic, so what temperature value?
 		temperature = -274.0;
 		while (temperature < MIN_TEMP || temperature > MAX_TEMP) {
diff --git a/cqe-challenges/CROMU_00030/src/packet.c b/cqe-challenges/CROMU_00030/src/packet.c
index 71230085..1f52602f 100644
--- a/cqe-challenges/CROMU_00030/src/packet.c
+++ b/cqe-challenges/CROMU_00030/src/packet.c
@@ -839,6 +839,9 @@ int check_win(int goal)
 	{
 		printf("YOU WIN, what is your name?\n");
 		#ifndef PATCHED
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
 		int len = receive_until(buff, '\n', 25);
 		#else
 		int len = receive_until(buff, '\n', 5);
diff --git a/cqe-challenges/CROMU_00031/src/moves.c b/cqe-challenges/CROMU_00031/src/moves.c
index 70b33d36..0c75c5ad 100644
--- a/cqe-challenges/CROMU_00031/src/moves.c
+++ b/cqe-challenges/CROMU_00031/src/moves.c
@@ -242,6 +242,9 @@ int AcceptMove(char b[X_MAX][Y_MAX], char *srcx, char *srcy, char *dstx, char *d
 #ifdef PATCHED
 		if ((rxcount = receive_until(s.input, '\n', 14)) == 0) {
 #else
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
 		if ((rxcount = receive_until(s.input, '\n', 16)) == 0) {
 #endif
 			if (rxcount == 0) {
diff --git a/cqe-challenges/CROMU_00032/src/parseCVF.c b/cqe-challenges/CROMU_00032/src/parseCVF.c
index fb6f5e1a..9cad455c 100644
--- a/cqe-challenges/CROMU_00032/src/parseCVF.c
+++ b/cqe-challenges/CROMU_00032/src/parseCVF.c
@@ -59,7 +59,7 @@ void freeCVF( pcvf cvf )
 			free( cvf->pds[index].pixelArray);
 			cvf->pds[index].pixelArray = NULL;
 			cvf->pds[index].charCount = 0;
-		}	
+		}
 		index++;
 	}
 
@@ -178,7 +178,7 @@ int parseCVFFrame( pBitStream pbs, pcvf pNewImage )
 
 	unsigned int length = 0;
 	unsigned int index = 0;
-	
+
 	unsigned int xbits = 0;
 	unsigned int ybits = 0;
 	unsigned int pixel_index_length = 0;
@@ -219,7 +219,7 @@ int parseCVFFrame( pBitStream pbs, pcvf pNewImage )
 	/// Bit 6 indicates x/y or index based
 	/// This has not been implemented and probably won't be
 	index_type = (flag>>6) & 0x1;
-	
+
 	/// Bits 5-3 indicate dictionary
 	pixel_dict = (flag>>3) & 0x7;
 
@@ -287,7 +287,7 @@ int parseCVFFrame( pBitStream pbs, pcvf pNewImage )
 	newFrame->height = pNewImage->height;
 	newFrame->width = pNewImage->width;
 
-	newFrame->image = malloc( length );	
+	newFrame->image = malloc( length );
 
 	if ( newFrame->image == NULL ) {
 		free(newFrame);
@@ -686,7 +686,7 @@ int parseCVFHeader( pBitStream pbs, pcvf pNewImage )
 		return 0;
 	}
 
-	memset( pNewImage->renderedFrames, 0x00, sizeof(pframe) * pNewImage->frameCount); 
+	memset( pNewImage->renderedFrames, 0x00, sizeof(pframe) * pNewImage->frameCount);
 
 	return 1;
 }
diff --git a/cqe-challenges/CROMU_00033/src/file.c b/cqe-challenges/CROMU_00033/src/file.c
index 9ce281c7..a1725e1a 100644
--- a/cqe-challenges/CROMU_00033/src/file.c
+++ b/cqe-challenges/CROMU_00033/src/file.c
@@ -1,16 +1,16 @@
 /*
  Copyright (c) 2014 Cromulence LLC
- 
+
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
- 
+
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
- 
+
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
@@ -18,7 +18,7 @@
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
- 
+
  */
 
 #include "file.h"
@@ -32,75 +32,77 @@ int bubble_sort( pfile parent )
     pfile *list = NULL;
     pfile nl = NULL;
     int result = 0;
-    
+
     if (parent == NULL) {
         return 0;
     }
-    
+
     if ( parent->data == NULL ) {
         return 0;
     }
-    
+
     /// Do an initial count on the list since it is possible
     /// that some have been freed. If this is the case then fix
     /// up the pointers and modify the length
     list = (pfile*)parent->data;
-    
+
     while ( outer_index < parent->length ) {
         if ( list[outer_index] != NULL ) {
             total_count++;
         }
-        
+
         outer_index++;
     }
-    
+
     if (total_count < parent->length ) {
         outer_index = 0;
         total_count = 0;
-        
+
         while ( outer_index < parent->length ) {
             if ( list[outer_index] != NULL ) {
                 list[total_count] = list[outer_index];
                 total_count++;
             }
-            
+
             outer_index++;
         }
-        
+
         outer_index = total_count;
-        
+
         /// Clear out the remainders
         while ( total_count < parent->length) {
             list[total_count] = NULL;
             total_count++;
         }
-        
+
 #ifdef PATCHED
         /// Update the correct length
         parent->length = outer_index;
 #endif
-        
     }
-    
+
     outer_index = 0;
-    
+
     while ( outer_index < parent->length) {
         total_count = outer_index+1;
-        
+
         while ( total_count < parent->length ) {
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
             result = strcmp( list[outer_index]->name, list[total_count]->name);
-            
+
             if ( result > 0 ) {
                 nl = list[total_count];
                 list[total_count] = list[outer_index];
                 list[outer_index] = nl;
             }
-            
+
             total_count++;
         }
         outer_index++;
     }
-    
+
     return 1;
 }
 
@@ -109,40 +111,40 @@ int remove_sub_file( pfile parent, char *name )
     pfile *list = NULL;
     int index = 0;
     pfile t = NULL;
-    
+
     if ( parent == NULL || name == NULL ) {
         return 0;
     }
-    
+
     if ( parent->data == NULL ) {
         return 0;
     }
-    
+
     list = (pfile*)parent->data;
-    
+
     while ( index < parent->length ) {
         t = list[index];
-        
+
         if ( t == NULL ) {
             index++;
             continue;
         }
-        
+
         if ( strcmp( t->name, name ) == 0 ) {
-            
+
             if ( t->type == DIR ) {
                 printf("[ERROR] Cannot delete a directory\n");
                 return 0;
             }
-            
+
             free_file( t );
             list[index] = NULL;
             return 1;
         }
-        
+
         index ++;
     }
-    
+
     return 0;
 }
 
@@ -153,18 +155,18 @@ int delete_file( char *name )
     int start = 0;
     int end = 0;
     int max = 0;
-    
+
     if ( name == NULL ) {
         return 0;
     }
-    
+
     /// Handle base case
     if ( name[0] != '/' ) {
         if ( does_sub_file_exist( base, name ) == 0 ) {
             printf("[ERROR] Could not locate $s\n", name);
             return 0;
         }
-        
+
         if ( remove_sub_file( base, name ) != 0 ) {
             printf("[INFO] $s removed\n", name );
             return 1;
@@ -172,20 +174,20 @@ int delete_file( char *name )
             return 0;
         }
     }
-    
+
     start = 1;
     max = strlen(name);
-   
+
     if ( max > 256 ) {
         printf("[ERROR] Name too long\n");
         return 0;
     }
- 
+
     while ( end != -1 ) {
         end = find_next_slash( name, start, max );
-        
+
         memset(nm, 0, 256);
-        
+
         if ( end == -1 ) {
 
 	    if ( (max - start) > 256 ) {
@@ -194,12 +196,12 @@ int delete_file( char *name )
 	    }
 
             memcpy( nm, name+start, max-start);
-            
+
             if ( does_sub_file_exist( base, nm ) == 0 ) {
                 printf("[ERROR] Could not locate $s\n", name );
                 return 0;
             }
-            
+
             if ( remove_sub_file( base, nm ) != 0 ) {
                 printf("[INFO] $s removed\n", nm );
                 return 1;
@@ -207,15 +209,15 @@ int delete_file( char *name )
                 return 0;
             }
         }
-       
+
         if ( (end-start) > 256 ) {
             printf("[ERROR] Size calculation failed\n");
             return 0;
         }
- 
+
         memcpy( nm, name+start, end-start);
         base = retrieve_sub( base, nm );
-        
+
         if ( base == NULL ) {
             printf("[ERROR] Failed to locate directory $s\n", nm);
             return 0;
@@ -224,11 +226,11 @@ int delete_file( char *name )
 	if ( base->type != DIR ) {
 	    return 0;
         }
-        
+
         start = end + 1;
-    
+
     }
-    
+
     return 0;
 }
 
@@ -237,43 +239,43 @@ pfile retrieve_sub( pfile pf, char *name )
     pfile *list = NULL;
     int index = 0;
     pfile t = NULL;
-    
+
     if ( pf == NULL || name == NULL ) {
         return NULL;
     }
-    
+
     if ( pf->type != DIR ) {
         return NULL;
     }
 
     list = (pfile*)pf->data;
-    
+
     while ( index < pf->length ) {
         t = list[index];
-        
+
         if ( t == NULL ) {
             index++;
             continue;
         }
-        
+
         if ( strcmp( t->name, name ) == 0 ) {
             return t;
         }
-        
+
         index++;
     }
-    
+
     return NULL;
 }
 
 int find_next_slash( char *str, int start, int max )
 {
     int index = -1;
-    
+
     if ( str == NULL ) {
         return -1;
     }
-    
+
     while ( start < max ) {
         if ( str[start] == '/' ) {
             index = start;
@@ -282,49 +284,49 @@ int find_next_slash( char *str, int start, int max )
             start++;
         }
     }
-    
+
     return index;
 }
 
 int fixup_dir_length( pfile d )
 {
     char *nd = NULL;
-    
+
     if ( d == NULL ) {
         return 0;
     }
-    
+
     /// Base case
     if ( d->length == 0 ) {
         d->length = 1;
-        
+
         /// 8 is used because it is rounded up anyway
         d->data = malloc( 8 );
-        
+
         if ( d->data == NULL ) {
             printf("[ERROR] Failed to fixup dir data\n");
             d->length = 0;
             return 0;
         }
-        
+
         memset(d->data, 0, 8);
     } else {
         /// Increment it by 1
         d->length += 1;
-        
+
         nd = malloc( d->length * sizeof(pfile));
-        
+
         if ( nd == NULL ) {
             d->length--;
             return 0;
         }
-        
+
         memset(nd, 0, d->length * sizeof(pfile));
         memcpy(nd, d->data, (d->length-1)*sizeof(pfile));
         free(d->data);
         d->data = nd;
     }
-    
+
     return 1;
 }
 
@@ -335,40 +337,40 @@ pfile get_file( char *name )
     int start = 0;
     int end = 0;
     int max = 0;
-    
+
     char sdir[256];
-    
+
     if ( name == NULL ) {
         return NULL;
     }
-    
+
     /// Handle the base case
     if ( name[0] != '/') {
         rv = retrieve_sub( cbase, name );
-        
+
         return rv;
     }
-    
+
     start = 1;
     max = strlen(name);
-    
+
     while ( end != -1 ) {
         end = find_next_slash( name, start, max );
-        
+
         if ( end == -1 ) {
             memset( sdir, 0, 256 );
             memcpy( sdir, name+start, max-start);
-            
+
             rv = retrieve_sub( cbase, sdir );
-            
+
             return rv;
         }
-        
+
         memset( sdir, 0, 256 );
         memcpy( sdir, name+start, end-start);
-        
+
         cbase = retrieve_sub( cbase, sdir );
-        
+
         start = end + 1;
         if ( cbase ) {
             if (cbase->type != DIR ) {
@@ -379,7 +381,7 @@ pfile get_file( char *name )
             return cbase;
         }
     }
-    
+
     return NULL;
 }
 
@@ -388,24 +390,24 @@ int does_sub_file_exist( pfile pf, char *name)
     pfile *list = NULL;
     int index = 0;
     pfile t = NULL;
-    
+
     list = (pfile*)pf->data;
-    
+
     while ( index < pf->length ) {
         t = list[index];
-        
+
         if ( t == NULL ) {
             index++;
             continue;
         }
-        
+
         if ( strcmp( t->name, name ) == 0 ) {
             return 1;
         }
-        
+
         index++;
     }
-    
+
     return 0;
 }
 
@@ -414,13 +416,13 @@ int add_file_to_dir( pfile dir, pfile file )
     if ( dir == NULL || file == NULL ) {
         return 0;
     }
-    
+
     if ( fixup_dir_length( dir ) == 0 ) {
         return 0;
     }
-    
+
     ((pfile*)dir->data)[ dir->length-1] = file;
-    
+
     return 1;
 }
 
@@ -433,7 +435,7 @@ int add_file( pfile nf )
     int max = 0;
     pfile cbase_dir = root;
     pfile temp = NULL;
-    
+
     if ( nf == NULL ) {
         return 0;
     }
@@ -445,48 +447,48 @@ int add_file( pfile nf )
             printf("[ERROR] Failed to add file to root\n");
             return 0;
         }
-        
+
         return 1;
     }
-    
+
     start = 1;
     max = strlen(nf->name);
-    
+
     /// Handle the case where the name is just '/'
     if ( max == 1 ) {
         printf("[ERROR] You cannot add '/'\n");
         return 0;
     }
-    
+
     while ( end != -1 ) {
         end = find_next_slash( nf->name, start, max );
-        
+
         /// If this is the end then copy out the name and add it in
         if ( end == -1 ) {
             memset(base, 0, 256);
             memcpy( base, nf->name+start, max-start );
             memset( nf->name, 0, 256);
             memcpy( nf->name, base, max - start );
-            
+
             if ( does_sub_file_exist( cbase_dir, nf->name) == 1) {
                 printf("[ERROR] File already exists\n");
                 return 0;
             }
-            
+
             if ( add_file_to_dir( cbase_dir, nf) == 0 ) {
                 printf("[ERROR] Failed to add file to $s\n", cbase_dir->name);
                 return 0;
             }
-            
+
             return 1;
         } else {
             memset( base, 0, 256);
-            
+
             /// Copy the dir name and determine if it is valid
             memcpy( base, nf->name+start, end-start);
-            
+
             temp = retrieve_sub( cbase_dir, base );
-            
+
             if ( temp == NULL ) {
                 printf("[ERROR] Directory $s does not exist.\n", base);
                 return 0;
@@ -496,7 +498,7 @@ int add_file( pfile nf )
             } else {
                 cbase_dir = temp;
             }
-            
+
             start = end + 1;
         }
     }
@@ -509,13 +511,13 @@ void free_file( pfile f )
     if ( f == NULL ) {
         return;
     }
-    
+
     if ( f->data != NULL ) {
         free(f->data);
     }
-    
+
     free(f);
-    
+
     return;
 }
 
@@ -537,23 +539,23 @@ pfile init_file( void )
 int set_name( pfile pf, char *name)
 {
     int length = 0;
-    
+
     if (pf == NULL ) {
         return 0;
     }
-    
+
     if ( name == NULL ) {
         return 0;
     }
-    
+
     length = strlen( name );
-    
+
     if ( length > 255 ) {
         return 0;
     }
-    
+
     memcpy( pf->name, name, length );
-    
+
     return length;
 }
 
@@ -562,42 +564,42 @@ int set_type( pfile pf, int type )
     if ( pf == NULL ) {
         return 0;
     }
-    
+
     if ( type != FILE && type != DIR ) {
         return 0;
     }
-    
+
     pf->type = type;
-    
+
     return 1;
 }
 
 int set_data( pfile pf, int length, char *data )
 {
     char *tn = NULL;
-    
+
     if ( pf == NULL ) {
         return 0;
     }
-    
+
     if ( data == NULL ) {
         return 0;
     }
-    
+
     if ( length > 0x400 ) {
         return 0;
     }
-    
+
     tn = malloc( length + 1 );
-    
+
     if ( tn == NULL ) {
         return 0;
     }
-    
+
     memcpy( tn, data, length + 1 );
-    
+
     pf->length = length;
     pf->data = tn;
-    
+
     return 1;
 }
diff --git a/cqe-challenges/CROMU_00034/src/service.c b/cqe-challenges/CROMU_00034/src/service.c
index 4f2cd6e2..8b6f48d0 100644
--- a/cqe-challenges/CROMU_00034/src/service.c
+++ b/cqe-challenges/CROMU_00034/src/service.c
@@ -35,7 +35,7 @@ uint16_t read_short()
 	uint16_t val;
 	//size_t rx;
 
-	//if ( receive( STDIN, &val, sizeof(val), &rx ) != 0 ) 
+	//if ( receive( STDIN, &val, sizeof(val), &rx ) != 0 )
 	if (receive_bytes( (uint8_t*)&val, sizeof(val) ) != 2 )
 	{
         return 0;
@@ -51,7 +51,7 @@ void populate_entry(int entry, int num, char* str, int str_len, uint8_t req, uin
 	entry_info_table[entry][num]->required = req;
 	entry_info_table[entry][num]->str_len = str_len;
 	strncpy(entry_info_table[entry][num]->entry_str, str, str_len);
-	bzero(str, NAME_LEN_MAX);	
+	bzero(str, NAME_LEN_MAX);
 }
 
 void populate_sub_entry(int entry, int num, char* str, int str_len, uint8_t req, uint8_t mult, uint8_t type)
@@ -62,7 +62,7 @@ void populate_sub_entry(int entry, int num, char* str, int str_len, uint8_t req,
 	sub_entry_info_list[entry][num]->required = req;
 	sub_entry_info_list[entry][num]->str_len = str_len;
 	strncpy(sub_entry_info_list[entry][num]->entry_str, str, str_len);
-	bzero(str, NAME_LEN_MAX);	
+	bzero(str, NAME_LEN_MAX);
 }
 
 #define REQ 1
@@ -148,7 +148,7 @@ void populateEntryInfo()
 	populate_entry(entry, num++, ss, strlen(ss), 0, 0, CHAR);
 
 	strcpy(ss, "doors");
-	populate_entry(entry, num++, ss, strlen(ss), REQ, 0, CHAR);	
+	populate_entry(entry, num++, ss, strlen(ss), REQ, 0, CHAR);
 
 // BOOKS
 	num = 0;
@@ -170,7 +170,7 @@ void populateEntryInfo()
 	populate_entry(entry, num++, ss, strlen(ss), 0, MULT_OK, STR);
 
 	strcpy(ss, "made into a movie");
-	populate_entry(entry, num++, ss, strlen(ss), REQ, 0, BOOL);	
+	populate_entry(entry, num++, ss, strlen(ss), REQ, 0, BOOL);
 
 // SONG
 	num = 0;
@@ -189,7 +189,7 @@ void populateEntryInfo()
 	populate_entry(entry, num++, ss, strlen(ss), 0, 0, STR);
 
 	strcpy(ss, "free online");
-	populate_entry(entry, num++, ss, strlen(ss), REQ, 0, BOOL);	
+	populate_entry(entry, num++, ss, strlen(ss), REQ, 0, BOOL);
 
 // JOB
 	num = 0;
@@ -426,8 +426,8 @@ void populateSubEntryInfo()
 // return an entry_info with the proper title field name
 uint8_t getEntryInfo(uint16_t title, uint8_t entry, uint8_t is_sub, Entry_Info *entry_info)
 {
-	if (is_sub) 
-		#ifdef PATCHED 
+	if (is_sub)
+		#ifdef PATCHED
 			{
 				if (sub_entry_info_list[title][entry] == NULL) {
 					return 0;
@@ -435,9 +435,12 @@ uint8_t getEntryInfo(uint16_t title, uint8_t entry, uint8_t is_sub, Entry_Info *
 				memcpy(entry_info,sub_entry_info_list[title][entry], sizeof(Entry_Info));
 			}
 		#else
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
 			memcpy(entry_info,sub_entry_info_list[title][entry], sizeof(Entry_Info));
 		#endif
-	else 
+	else
 		#ifdef PATCHED
 			{
 				if (entry_info_table[title][entry] == NULL) {
@@ -446,6 +449,9 @@ uint8_t getEntryInfo(uint16_t title, uint8_t entry, uint8_t is_sub, Entry_Info *
 				memcpy(entry_info,entry_info_table[title][entry], sizeof(Entry_Info));
 			}
 		#else
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
 			memcpy(entry_info,entry_info_table[title][entry], sizeof(Entry_Info));
 		#endif
 	if (entry_info->mult_ok > 1 || entry_info->required > 1)
@@ -513,7 +519,7 @@ int parse_book(uint8_t* buff, int rcv_len, int first_offset)
 
 	char is_subtitle = 0;
 	uint16_t parent_of_subtitle = 0;
-	
+
 	char **names;
 	char is_initial_subtitle = 0;
 
@@ -534,7 +540,7 @@ int parse_book(uint8_t* buff, int rcv_len, int first_offset)
 					is_subtitle = 0;
 					if (!parent_of_subtitle)
 						continue;
-					chapter = (Chapter*)(buff+parent_of_subtitle); 
+					chapter = (Chapter*)(buff+parent_of_subtitle);
 				}
 			}
 			else
@@ -543,8 +549,8 @@ int parse_book(uint8_t* buff, int rcv_len, int first_offset)
 				is_initial_subtitle = 0;
 			}
 		}
-		else 
-		{	
+		else
+		{
 			// first chapter handled here
 			chapter = (Chapter*)(buff+next_offset);
 		}
@@ -555,7 +561,6 @@ int parse_book(uint8_t* buff, int rcv_len, int first_offset)
 			return -1;
 		}
 		#endif
-
 		//if (chapter->title >= NUM_TITLES-1 && !is_subtitle)
 		if (chapter->title == HOBBIES && !is_subtitle)
 		{ 	// we just found HOBBIES, change over
@@ -576,7 +581,6 @@ int parse_book(uint8_t* buff, int rcv_len, int first_offset)
 			entry_table = entry_info_table;
 
 			#ifndef PATCHED
-
 			if ((t = verify_chapter(chapter)) != 0)
 			{
 				printf("Malformed chapter found! @d Exiting.\n", t);
@@ -585,14 +589,14 @@ int parse_book(uint8_t* buff, int rcv_len, int first_offset)
 		}
 		#else
 		}
-		
+
 		if ((t = verify_chapter(chapter)) != 0)
 		{
 			printf("Malformed chapter found! @d Exiting.\n", t);
 			_terminate(-2);
 		}
 		#endif
-		
+
 
 		printf("Title: @s\n", names[chapter->title]);
 
@@ -636,11 +640,11 @@ int parse_book(uint8_t* buff, int rcv_len, int first_offset)
 			// once per chapter, check the required entries
 			if (first)
 			{
-				memset(prev_read_entries, -1, chapter->entry_count); 
+				memset(prev_read_entries, -1, chapter->entry_count);
 				memset(required_entries, -1, MAX_ENTRY_PER_TITLE);
 
 				// record the required entries for this chapter
-				// later, make sure that these are populated 
+				// later, make sure that these are populated
 				first = 0;
 				prev_read_counter = 0;
 				required_entries[0] = 0;
@@ -659,7 +663,7 @@ int parse_book(uint8_t* buff, int rcv_len, int first_offset)
 				req_cnt--;
 				required_entries[0] = req_cnt;
 			}
-  
+
 			// if this entry was in the required_entry list, remove it (it has been satisfied)
 			for (uint8_t i = 1; i <= req_cnt; i++)
 			{
@@ -668,7 +672,7 @@ int parse_book(uint8_t* buff, int rcv_len, int first_offset)
 					// remove this from the required_entries list
 					required_entries[i] = 70;
 					required_entries[0] -= 1;
-				}	
+				}
 			}
 
 			for (uint8_t i = 1; i <= prev_read_counter; i++)
@@ -681,7 +685,7 @@ int parse_book(uint8_t* buff, int rcv_len, int first_offset)
 						printf("Duplicate entry found! Exiting...\n");
 						_terminate(-1);
 					}
-				}	
+				}
 			}
 
 			prev_read_entries[prev_read_counter++] = entry->entry;
@@ -821,7 +825,7 @@ void test_win()
 		if (successful[i] == 1)
 			success += 1;
 	}
-	
+
 	if (success == 5)
 	{
 		char buff[10];
@@ -893,7 +897,7 @@ int main()
 	current_buffer_offset += sizeof(Header);
 
 	// print header info
-	printf("Length: @d\n", buffer_size);	
+	printf("Length: @d\n", buffer_size);
 	printf("Magic number: 0x@x\n", header->magic_number);
 	printf("Future: 0x@x\n", header->future);
 	printf("Offset: 0x@x\n", header->offset_to_first_chapter);
@@ -905,7 +909,7 @@ int main()
 		return -1;
 	}
 	test_win();
-	
+
 
 	free(buffer);
 	printf("good book.\n");
diff --git a/cqe-challenges/CROMU_00035/src/service.c b/cqe-challenges/CROMU_00035/src/service.c
index 9f9a9455..cfd36cdc 100644
--- a/cqe-challenges/CROMU_00035/src/service.c
+++ b/cqe-challenges/CROMU_00035/src/service.c
@@ -67,7 +67,7 @@ pDataStruct init_data(){
 	workingData->root->parent = NULL;
 	workingData->root->directoryHeadNode = NULL;
 	char *name = mallocOrDie( 5, "Failed to malloc root name" );
-	workingData->root->name = name;	
+	workingData->root->name = name;
 	strcpy(name, "");
 	return workingData;
 }
@@ -81,7 +81,7 @@ pPerms find_perm_by_name(char *name, pNode node, pDataStruct workingData){
 			if ( strcmp(tempPerm->user->name,name) == 0 ){
 				return tempPerm;
 			}
-		} 
+		}
 		if ( tempPerm->group != NULL ){
 			if ( strcmp(tempPerm->group->name,name) == 0 ){
 				return tempPerm;
@@ -97,7 +97,7 @@ pPerms add_perm(pUser user, pGroup group, pNode node){
 	pPerms newPerms = mallocOrDie( sizeof( sPerms ), "Failed to malloc pPerms" );
 	if ( user != NULL ){
 		newPerms->user = user;
-	} 
+	}
 	if ( group != NULL ){
 		newPerms->group = group;
 	}
@@ -109,7 +109,7 @@ pPerms add_perm(pUser user, pGroup group, pNode node){
 		while ( tempPerm != NULL ){
 			if (  ( lastPerm->user  != NULL ) && ( lastPerm->user == user  )  ){//test if perm already exists
 				return NULL;
-			} 
+			}
 			if (  ( lastPerm->group != NULL ) && ( lastPerm->group == group ) ){//test if perm already exists
 				return NULL;
 			}
@@ -130,11 +130,11 @@ pPerms delete_perms(pNode node,pPerms temp){//returns next perm or null if no ne
 	pPerms retval = temp->next;
 	if (temp->prev != NULL){
 		temp->prev->next = temp->next;
-	} 
+	}
 #ifdef PATCHED
 	if (temp->prev == NULL) {//first perm in list
 		node->perms = temp->next;
-	}	
+	}
 #endif
 	if (temp->next != NULL){
 		temp->next->prev = temp->prev;
@@ -143,7 +143,7 @@ pPerms delete_perms(pNode node,pPerms temp){//returns next perm or null if no ne
 			node->perms = temp->next;
 		}
 #endif
-	}	
+	}
 	free(temp);
 	return retval;
 
@@ -238,7 +238,7 @@ void delete_file_bytes(pFile file, unsigned int newSize){
 				flag = 1;
 				remainderbytes = size - newSize;//how many bytes to delete from this chunk
 			} //if this chunk is a keeper and we need more
-			temp = temp->next;			
+			temp = temp->next;
 		}
 	}
 	size = last->chunkSize - remainderbytes;
@@ -303,7 +303,7 @@ pFileChunk delete_chunk(pFile file, pFileChunk chunk){
 		if (chunk->next == NULL){//last no next
 			file->tail = NULL;
 		}else {//not last
-			chunk->next->prev = chunk->prev;	
+			chunk->next->prev = chunk->prev;
 		}
 		file->chunkCount -= 1;
 	}
@@ -344,8 +344,8 @@ pNode delete_node(pNode node, pDataStruct workingData){
 			node->parent->directoryHeadNode = NULL;
 			node->parent->directoryTailNode = NULL;
 		} else {//first but not only
-			node->next->prev = NULL;			
-		}		
+			node->next->prev = NULL;
+		}
 	} else {//not first
 		node->prev->next = node->next;
 		if (node->next == NULL){//last
@@ -372,7 +372,7 @@ pNode add_directory( unsigned int date, char *name, pNode parent, pUser user ){
 }
 
 pUser _add_user( char *name, pUser userList ){
-	//add user to userList, 
+	//add user to userList,
 	//if userList is NULL, create single element list
 	pUser newUser = mallocOrDie( sizeof( sUser ), "Failed to allocate user");
 	char *newName = mallocOrDie( strlen( name ) + 1, "Failed to allocate username");
@@ -410,7 +410,7 @@ pGroupUserList is_user_in_group( pUser user, pGroup group ){
 		if ( temp->user == user ){return temp;}
 		temp = temp->next;
 	}
-	return NULL; 
+	return NULL;
 }
 
 int is_user_valid(pUser user, pDataStruct workingData){
@@ -463,7 +463,7 @@ pGroupUserList remove_user_from_group(pUser user, pGroup group){
 
 
 pUser remove_user(pUser user, pDataStruct workingData){
-	//returns prev or null 
+	//returns prev or null
 	pGroup groupList = workingData->group;
 	pUser retval = NULL;
 	pUser last = NULL;
@@ -638,7 +638,7 @@ char *recursive_path(pNode start, pNode end){
 	if (end == start){
 		char *path = mallocOrDie(strlen(end->name) + 2, "Failed to allocate endName");
 		strcpy(path, end->name);
-		return path; 
+		return path;
 	}
 	if ( end->parent == NULL ){
 		return NULL;
@@ -648,7 +648,7 @@ char *recursive_path(pNode start, pNode end){
 	if (path == NULL){
 		return NULL;
 	}
-	char *retpath = mallocOrDie(  ( strlen(path) + strlen(end->name) + 2 ), "Failed to allocate retpath"); 	
+	char *retpath = mallocOrDie(  ( strlen(path) + strlen(end->name) + 2 ), "Failed to allocate retpath");
 	strcpy(retpath, path);
 	strcat(retpath, "/");
 	strcat(retpath, end->name);
@@ -667,7 +667,13 @@ void str_of_path(char *path, pDataStruct workingData, pNode end){
 	strncpy(path, newPath, size );
 #endif
 #ifndef PATCHED
-	strcpy(path, newPath );	
+// codechecker_confirmed [unix.Malloc] This is a bug.
+#endif
+#ifndef PATCHED
+#ifndef PATCHED
+// codechecker_confirmed [unix.Malloc] This is a bug.
+#endif
+	strcpy(path, newPath );
 #endif
 	free ( newPath );
 	return;
@@ -714,7 +720,7 @@ pNode find_file_node_by_name(char *name, pNode directory){
 		}
 		temp = find_node_by_name(name,temp->next);
 	}
-	return NULL;	
+	return NULL;
 }
 
 
@@ -722,4 +728,4 @@ int main(){
 	pDataStruct workingData = init_data();
 	start_UI(workingData);
 	return 0;
-}
\ No newline at end of file
+}
diff --git a/cqe-challenges/CROMU_00036/src/canvas.c b/cqe-challenges/CROMU_00036/src/canvas.c
index 4282cb59..7ab07cd8 100644
--- a/cqe-challenges/CROMU_00036/src/canvas.c
+++ b/cqe-challenges/CROMU_00036/src/canvas.c
@@ -31,7 +31,7 @@ THE SOFTWARE.
 
 // Allocates memory for each layer and creates new canvas object
 int CreateCanvas(Canvas **can, uint16_t y_size, uint16_t x_size, uint8_t layers) {
-  
+
   if (layers > CANVAS_MAX_LAYERS) {
     return -1;
   }
@@ -39,7 +39,8 @@ int CreateCanvas(Canvas **can, uint16_t y_size, uint16_t x_size, uint8_t layers)
   if (layers == 0) {
     return -1;
   }
-  #endif 
+  #endif
+
   Canvas *c;
   if (allocate(sizeof(Canvas), 0, (void **)&c) != 0) {
     _terminate(-1);
@@ -76,7 +77,7 @@ void DestroyCanvas(Canvas **c) {
   *c = NULL;
 }
 
-// Flattens the canvas 
+// Flattens the canvas
 // Starting from layer 1 and moving up, any non-default colors are overlayed onto layer 0
 void FlattenCanvas(Canvas *c) {
   for (int l = 1; l < c->num_layers; l++) {
@@ -89,4 +90,4 @@ void FlattenCanvas(Canvas *c) {
       }
     }
   }
-}
\ No newline at end of file
+}
diff --git a/cqe-challenges/CROMU_00036/src/paint.c b/cqe-challenges/CROMU_00036/src/paint.c
index 92d76dd0..210b57fc 100644
--- a/cqe-challenges/CROMU_00036/src/paint.c
+++ b/cqe-challenges/CROMU_00036/src/paint.c
@@ -56,8 +56,10 @@ void SetColor(Canvas *c, uint16_t y, uint16_t x, uint8_t layer, uint8_t color) {
   if (y >= c->y_size || x >= c->x_size) {
     return;
   }
-#endif 
-
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
   current_layer[y * c->x_size + x] = color;
 }
 
@@ -119,7 +121,7 @@ void PaintTriangle(Canvas *c, uint8_t layer, uint8_t color, uint8_t fill, VGF_Tr
       x_low = *x1;
     } else if (*x1 > x_high) {
       x_high = *x1;
-    } 
+    }
     if (*x2 < x_low) {
       x_low = *x2;
     } else if (*x2 > x_high) {
@@ -133,7 +135,7 @@ void PaintTriangle(Canvas *c, uint8_t layer, uint8_t color, uint8_t fill, VGF_Tr
       }
       return;
     }
-   
+
     if (*y1 == *y2) {
       last_y = *y1;
     } else {
@@ -199,7 +201,7 @@ void PaintTriangle(Canvas *c, uint8_t layer, uint8_t color, uint8_t fill, VGF_Tr
       }
       y++;
     }
-  } 
+  }
 }
 
 
@@ -366,17 +368,17 @@ void PaintCircle(Canvas *c, uint8_t layer, uint8_t color, uint8_t fill, VGF_Circ
       SetColor(c, y_pos + y, x_pos - x, layer, color);
       SetColor(c, y_pos - y, x_pos + x, layer, color);
       SetColor(c, y_pos - y, x_pos - x, layer, color);
-      
+
       SetColor(c, y_pos + x, x_pos + y, layer, color);
       SetColor(c, y_pos + x, x_pos - y, layer, color);
       SetColor(c, y_pos - x, x_pos + y, layer, color);
       SetColor(c, y_pos - x, x_pos - y, layer, color);
     } else {
       // Fill circle
-      if (y > 0) { 
+      if (y > 0) {
         ConnectPoints(c, layer, color, x_pos + x, y_pos - y, x_pos + x, y_pos + y - 1);
         ConnectPoints(c, layer, color, x_pos - x, y_pos - y, x_pos - x, y_pos + y - 1);
-      } 
+      }
       if (x > 0) {
         ConnectPoints(c, layer, color, x_pos + y, y_pos - x, x_pos + y, y_pos + x - 1);
         ConnectPoints(c, layer, color, x_pos - y, y_pos - x, x_pos - y, y_pos + x - 1);
@@ -420,7 +422,7 @@ void PaintSpray(Canvas *c, uint8_t layer, uint8_t color, uint8_t fill, VGF_Spray
   while ((x_pos > spray->x_start - width) && (x_pos >= 0)) {
     SetColor(c, y_pos, x_pos, layer, color);
     x_pos -= step;
-  }  
+  }
 
   x_pos = spray->x_start;
 
@@ -442,4 +444,3 @@ void PaintSpray(Canvas *c, uint8_t layer, uint8_t color, uint8_t fill, VGF_Spray
   SetColor(c, spray->y_start - width, spray->x_start, layer, color);
 
 }
-
diff --git a/cqe-challenges/CROMU_00037/src/admin.c b/cqe-challenges/CROMU_00037/src/admin.c
index 6af8ddae..90603fe3 100644
--- a/cqe-challenges/CROMU_00037/src/admin.c
+++ b/cqe-challenges/CROMU_00037/src/admin.c
@@ -80,6 +80,9 @@ void SendBroadcastMessage(void) {
 	char message[1024];
 
 	// read in the Message:
+#ifndef PATCHED
+// codechecker_confirmed [unix.API] This is a bug.
+#endif
 	zero(message, 1024);
 	print("Message: ");
 	if (read_until(message, '\n', 1024) == -1) {
diff --git a/cqe-challenges/CROMU_00038/src/print_gps_tag_text.c b/cqe-challenges/CROMU_00038/src/print_gps_tag_text.c
index 3e2df3ee..c0318e41 100644
--- a/cqe-challenges/CROMU_00038/src/print_gps_tag_text.c
+++ b/cqe-challenges/CROMU_00038/src/print_gps_tag_text.c
@@ -43,6 +43,9 @@ void print_gps_tag_text(unsigned short tag) {
 	if ( strlen( gps_tags[tag]) > 2048 ) {
 		gps_tags[tag][2048] = '\x00';
 	}
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2, alpha.core.PointerSub, alpha.security.ArrayBoundV2] This is a bug.
 #endif
 		printf("@s", gps_tags[tag]);
 
diff --git a/cqe-challenges/CROMU_00038/src/process_exif_ifd.c b/cqe-challenges/CROMU_00038/src/process_exif_ifd.c
index 8d17fd8c..a56da2de 100644
--- a/cqe-challenges/CROMU_00038/src/process_exif_ifd.c
+++ b/cqe-challenges/CROMU_00038/src/process_exif_ifd.c
@@ -32,7 +32,7 @@ extern unsigned short (*swap_short)(unsigned short);
 extern unsigned (*swap_word)(unsigned);
 
 void process_xif_ifd(IFD_Type *ifd_ptr, TIFF_Hdr_Type *tiff_hdr, unsigned short segment_size, unsigned char *endofsegment_ptr)  {
-	
+
 int i;
 unsigned short entry_count;
 unsigned short tag;
@@ -94,7 +94,9 @@ unsigned int remaining_size;
 		((char*)(ifd_ptr))[value+2048] = '\x00';
 	    }
 #endif
-
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2, alpha.core.PointerSub, alpha.security.ArrayBoundV2] This is a bug.
+#endif
             printf("Value: @s\n", (char *)(ifd_ptr) + value);
         }
         else {
diff --git a/cqe-challenges/CROMU_00038/src/service.c b/cqe-challenges/CROMU_00038/src/service.c
index 6f332817..e79b9f94 100755
--- a/cqe-challenges/CROMU_00038/src/service.c
+++ b/cqe-challenges/CROMU_00038/src/service.c
@@ -38,7 +38,7 @@ unsigned short SOM;
 unsigned short marker;
 unsigned short segment_size;
 unsigned short tagMark;
-unsigned short byte_align;    
+unsigned short byte_align;
 unsigned char *tiff_header;
 unsigned char *xif_data;
 void *tmp_ptr;
@@ -74,7 +74,7 @@ int i;
         puts("SOM marker found");
     }
 
-    // Now look for the next marker, which can be SAP0 or SAP1 
+    // Now look for the next marker, which can be SAP0 or SAP1
     ret_code = receive_bytes((unsigned char *)&marker, sizeof(marker));
 
     if (ret_code == -1 ) {
@@ -164,7 +164,7 @@ int i;
         printf("Invalid segment size\n");
         _terminate(-1);
     }
-    
+
     xif_data = malloc(segment_size);
 
     if ((int)xif_data == 0) {
@@ -213,7 +213,9 @@ int i;
         _terminate(-1);
     }
 #endif
-
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2, alpha.core.PointerSub, alpha.security.ArrayBoundV2] This is a bug.
+#endif
     printf("TagMark = @x\n", swap_short(tiff_hdr->Fixed));
 
     offset = swap_word(tiff_hdr->Offset_to_IFD);
@@ -259,6 +261,9 @@ int i;
 		if ( strlen( (char *)(tiff_hdr) + swap_word(IFD->Entry[i].Value)) > 2048) {
 			((char *)(tiff_hdr))[swap_word(IFD->Entry[i].Value)+2048] = '\x00';
 		}
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2, alpha.core.PointerSub, alpha.security.ArrayBoundV2] This is a bug.
 #endif
                 printf("Value: @s\n", (char *)(tiff_hdr) + swap_word(IFD->Entry[i].Value));
 #ifdef PATCHED
@@ -290,8 +295,7 @@ int i;
 
         }
     }
- 
-    puts("Finished processing");
 
-}  // main  
+    puts("Finished processing");
 
+}  // main
diff --git a/cqe-challenges/CROMU_00039/src/packet.c b/cqe-challenges/CROMU_00039/src/packet.c
index 99fb9dc4..1de92832 100644
--- a/cqe-challenges/CROMU_00039/src/packet.c
+++ b/cqe-challenges/CROMU_00039/src/packet.c
@@ -177,6 +177,9 @@ int HandleReadRequest(unsigned char *pkt, uint8_t pkt_len) {
 		SendError(request_id, ERROR_BADLEN);
 		return(0);
 	}
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
 #endif
 	strncpy(name, (char *)pkt+5, name_len);
 
diff --git a/cqe-challenges/CROMU_00040/lib/new_printf.c b/cqe-challenges/CROMU_00040/lib/new_printf.c
index 128435db..d9c0d75b 100644
--- a/cqe-challenges/CROMU_00040/lib/new_printf.c
+++ b/cqe-challenges/CROMU_00040/lib/new_printf.c
@@ -292,12 +292,12 @@ int vprintf( const char *fmt, va_list arg )
 
                 // single char
             if (*fmt == 'c') {
-                
+
                 char c = (char )va_arg(arg, int);
 
                 pad_len = width - 1;
 
-                // justify right 
+                // justify right
                 if (!left_justification) {
                     for (i=0; i< pad_len; ++i) {
 
@@ -328,7 +328,7 @@ int vprintf( const char *fmt, va_list arg )
                 continue;
             }
 
-                 // Integer 
+                 // Integer
             if (*fmt == 'd')  {
 
                 int int_arg = va_arg( arg, int );
@@ -377,7 +377,7 @@ int vprintf( const char *fmt, va_list arg )
             }
 
 
-                 // Integer 
+                 // Integer
             if (*fmt == 'u')  {
 
                 unsigned int int_arg = va_arg( arg, int );
@@ -430,7 +430,7 @@ int vprintf( const char *fmt, va_list arg )
 
                 // hex
             if ( *fmt == 'x')  {
-            
+
                 unsigned int int_arg = va_arg( arg, unsigned int );
                 char *c;
 
@@ -525,10 +525,16 @@ int vprintf( const char *fmt, va_list arg )
 
                 int output_strlen;
 
+#ifndef PATCHED
+// codechecker_confirmed [core.NullDereference] This is a bug.
+#endif
                 if (precision > 0 && precision < strlen(string_arg))
 
                     output_strlen = precision;
                 else
+#ifndef PATCHED
+// codechecker_confirmed [core.NullDereference] This is a bug.
+#endif
                     output_strlen = strlen(string_arg);
 
 
@@ -554,6 +560,9 @@ int vprintf( const char *fmt, va_list arg )
                 while ( *string_arg && output_strlen > 0 )
 #endif
                 {
+#ifndef PATCHED
+// codechecker_confirmed [core.NullDereference] This is a bug.
+#endif
                     putc( *string_arg );
                     character_count++;
                     string_arg++;
@@ -614,7 +623,7 @@ int vsprintf( char *str, const char *fmt, va_list arg )
             left_justification=0;
             pad_len=0;
 
-            
+
             if (*fmt == '@') {
 
                 str[character_count]='@';
@@ -661,12 +670,12 @@ int vsprintf( char *str, const char *fmt, va_list arg )
 
                 // single char
             if (*fmt == 'c') {
-                
+
                 char c = (char )va_arg(arg, int);
 
                 pad_len = width - 1;
 
-                // justify right 
+                // justify right
                 if (!left_justification) {
                     for (i=0; i< pad_len; ++i) {
 
@@ -696,7 +705,7 @@ int vsprintf( char *str, const char *fmt, va_list arg )
                 continue;
             }
 
-                 // Integer 
+                 // Integer
             if (*fmt == 'd')  {
 
                 int int_arg = va_arg( arg, int );
@@ -746,7 +755,7 @@ int vsprintf( char *str, const char *fmt, va_list arg )
 
                 // hex
             if ( *fmt == 'x')  {
-            
+
                 unsigned int int_arg = va_arg( arg, unsigned int );
                 char *c;
 
@@ -902,7 +911,7 @@ int printf( const char *fmt, ... )
 
    // done = vsprintf(large_buff, fmt, arg);
    // transmit( STDOUT, large_buff, done, &tx_count );
-    
+
     done = vprintf( fmt, arg );
     va_end( arg );
 
diff --git a/cqe-challenges/CROMU_00040/src/find_recipe.c b/cqe-challenges/CROMU_00040/src/find_recipe.c
index 08ce3887..d8ddd111 100644
--- a/cqe-challenges/CROMU_00040/src/find_recipe.c
+++ b/cqe-challenges/CROMU_00040/src/find_recipe.c
@@ -42,7 +42,7 @@ size_t size;
 
 	size=getline(buffer, sizeof(buffer));
 
-	if (size <=1 ) 
+	if (size <=1 )
 		return;
 
 
@@ -87,13 +87,15 @@ size_t size;
 				return;
 			}
 #endif
-
 				printf("Would you like to tag this recipe? ");
 
 				size=getline(answer, sizeof(answer));
 
 				if (size <1 )  {
-					book=book->next;
+#ifndef PATCHED
+// codechecker_confirmed [core.NullDereference] This is a bug.
+#endif
+                                        book=book->next;
 					continue;
 				}
 
diff --git a/cqe-challenges/CROMU_00040/src/get_instructions.c b/cqe-challenges/CROMU_00040/src/get_instructions.c
index 69ba00df..ef49e6bb 100644
--- a/cqe-challenges/CROMU_00040/src/get_instructions.c
+++ b/cqe-challenges/CROMU_00040/src/get_instructions.c
@@ -35,7 +35,7 @@ size_t size;
 char buffer[1024];
 char *temp_step;
 char **step_list;
-	
+
 int step_count = 0;
 
 
@@ -44,11 +44,11 @@ int step_count = 0;
 
 	size=getline(buffer, sizeof(buffer));
 
-	if (size <=1) 
+	if (size <=1)
 		return;
 	else {
 
-	
+
 	// the dynamic array is null terminated so allocate memory for the null too
 #ifdef PATCHED
 		recipe->Instructions = malloc(sizeof(char *) * 4);
@@ -66,6 +66,9 @@ int step_count = 0;
 #ifdef PATCHED
 		memset(recipe->Instructions, 0, sizeof(char *)*4);
 #else
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
 		memset(recipe->Instructions, 0, sizeof(char *)*2);
 #endif
 
@@ -73,6 +76,9 @@ int step_count = 0;
 #ifdef PATCHED
 		temp_step=malloc(strlen(buffer)+1);
 #else
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
 		temp_step=malloc(strlen(buffer));
 #endif
 
@@ -85,6 +91,9 @@ int step_count = 0;
 
 #ifdef PATCHED
 		memset( temp_step, 0, strlen(buffer) + 1 );
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
 #endif
 
 		strcpy(temp_step, buffer);
@@ -116,6 +125,9 @@ int step_count = 0;
 #ifdef PATCHED
 			memset(step_list, 0, sizeof(char *)*(step_count+4));
 #else
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
 			memset(step_list, 0, sizeof(char *)*(step_count+2));
 #endif
 
@@ -136,6 +148,9 @@ int step_count = 0;
 
 #ifdef PATCHED
 			memset( temp_step, 0, strlen(buffer)+ 1);
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
 #endif
 			strcpy(temp_step, buffer);
 
diff --git a/cqe-challenges/CROMU_00040/src/print_recipe.c b/cqe-challenges/CROMU_00040/src/print_recipe.c
index b99fd019..e1f88df0 100644
--- a/cqe-challenges/CROMU_00040/src/print_recipe.c
+++ b/cqe-challenges/CROMU_00040/src/print_recipe.c
@@ -44,7 +44,9 @@ Ingredient_Type *ingredient;
 		return;
 	}
 #endif
-
+#ifndef PATCHED
+// codechecker_confirmed [core.NullDereference] This is a bug.
+#endif
 	printf("\t\t@s\n\n", book->Title);
 
 	ingredient = book->Ingredient_List;
@@ -98,7 +100,7 @@ Ingredient_Type *ingredient;
 			continue;
 
 		}
-		
+
 		printf("\t\t@s\n\n", book->Title);
 
 		ingredient = book->Ingredient_List;
@@ -130,7 +132,9 @@ Ingredient_Type *ingredient;
 			continue;
 		}
 #endif
-
+#ifndef PATCHED
+// codechecker_confirmed [core.NullDereference] This is a bug.
+#endif
 		while(temp[0]) {
 
 			printf("@s\n", temp[0]);
@@ -145,4 +149,3 @@ Ingredient_Type *ingredient;
 
 
 }
-
diff --git a/cqe-challenges/CROMU_00041/src/message.c b/cqe-challenges/CROMU_00041/src/message.c
index 273e6a89..fcb55ac3 100644
--- a/cqe-challenges/CROMU_00041/src/message.c
+++ b/cqe-challenges/CROMU_00041/src/message.c
@@ -46,7 +46,7 @@ void print_message(int user_offset, int msg_offset)
 	if (!strcmp(globs.listOfMessages[user_offset][msg_offset].to, ""))
 		return;
 	printf("******************\n");
-	printf("To: @s\nFrom: @s \nMsg: @s\n", globs.listOfMessages[user_offset][msg_offset].to, globs.listOfMessages[user_offset][msg_offset].from, globs.listOfMessages[user_offset][msg_offset].msg);		
+	printf("To: @s\nFrom: @s \nMsg: @s\n", globs.listOfMessages[user_offset][msg_offset].to, globs.listOfMessages[user_offset][msg_offset].from, globs.listOfMessages[user_offset][msg_offset].msg);
 }
 
 // if draft == 1, this is a draft message
@@ -87,20 +87,26 @@ int add_message(char *dest, char *src, char *msg, char draft)
 		#ifndef PATCHED
 		if (current_user->msg_count >= MAX_MESSAGES)
 		{
+#ifndef PATCHED
+                    // codechecker_confirmed [alpha.security.ArrayBoundV2, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 			target = current_user->msg_count; // a naive person might assume this is zero...that's the problem
 			goto label;
 		}
 		#endif
 	}
-	
+
 	// add messages into blank spots
 	#ifdef PATCHED
-	for (int i = 0; i < MAX_MESSAGES; i++) 
+	for (int i = 0; i < MAX_MESSAGES; i++)
 	#else
-	for (int i = 0; i < MAX_MESSAGES+1; i++) 
+	for (int i = 0; i < MAX_MESSAGES+1; i++)
 	#endif
 	{
-		if (globs.listOfMessages[index][i].match != 0xbeef)
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2, alpha.security.ArrayBoundV2] This is a bug.
+#endif
+                if (globs.listOfMessages[index][i].match != 0xbeef)
 		{
 			// this message is not valid, replace it
 			target = i;
@@ -138,7 +144,7 @@ void list_drafts(char *name)
 	int found = 0;
 	for (int i = 0; i < MAX_MESSAGES; i++)
 	{
-		if (globs.listOfMessages[index][i].match != 0xbeef) 
+		if (globs.listOfMessages[index][i].match != 0xbeef)
 		{
 			continue;
 		}
@@ -159,7 +165,7 @@ void list_inbox(char *name)
 	int found = 0;
 	for (int i = 0; i < MAX_MESSAGES; i++)
 	{
-		if (globs.listOfMessages[index][i].match != 0xbeef) 
+		if (globs.listOfMessages[index][i].match != 0xbeef)
 		{
 			continue;
 		}
@@ -286,7 +292,7 @@ void print_draft_for_send(char *name)
 		printf("No space left for this user.\n");
 		return;
 	}
-	// pointer to destination message 
+	// pointer to destination message
 	Message *dst_msg = &(globs.listOfMessages[dst_index][target]);
 
 	strcpy(dst_msg->from, cur->from);
@@ -339,4 +345,3 @@ void print_draft_for_del(char *name)
 	globs.listOfMessages[index][choice].match = 0;
 	current_user->msg_count--;
 }
-
diff --git a/cqe-challenges/CROMU_00042/src/matrix.c b/cqe-challenges/CROMU_00042/src/matrix.c
index 1ca96b6c..6c47f9b4 100644
--- a/cqe-challenges/CROMU_00042/src/matrix.c
+++ b/cqe-challenges/CROMU_00042/src/matrix.c
@@ -84,18 +84,18 @@ int32_t ReadMatrix(int32_t *m) {
 		if (receive_until(buf, '\n', 7) == 0) {
 			return(0);
 		}
-		x = atoi(buf);	
+		x = atoi(buf);
 		if (x < 1 || x > MAX_X) {
 			puts("invalid");
 			return(0);
 		}
-	
+
 		// Y
 		printf("Y: ");
 		if (receive_until(buf, '\n', 7) == 0) {
 			return(0);
 		}
-		y = atoi(buf);	
+		y = atoi(buf);
 		if (y < 1 || y > MAX_Y) {
 			puts("invalid");
 			return(0);
@@ -105,7 +105,7 @@ int32_t ReadMatrix(int32_t *m) {
 		X = x;
 		Y = y;
 	}
-	
+
 #ifdef PATCHED
 	uint16_t matrix_size;
 #else
@@ -117,7 +117,7 @@ int32_t ReadMatrix(int32_t *m) {
 		puts("matrix too large");
 		return(0);
 	}
-		
+
 
 	// Read in the matrix values
 	puts("Enter the matrix values");
@@ -158,18 +158,18 @@ int32_t matrix_add(void) {
 	puts("Provide the matrix dimensions");
 	if (!ReadMatrix(m1)) {
 		return(0);
-	}	
+	}
 	puts("Second matrix");
 	if (!ReadMatrix(m2)) {
 		return(0);
-	}	
+	}
 	Add(m1, m2, result);
 	puts("Result");
 	PrintMatrix(result);
 
 	return(1);
 }
-	
+
 int32_t matrix_sub(void) {
 	int32_t m1[MAX_MATRIX_SIZE];
 	int32_t m2[MAX_MATRIX_SIZE];
@@ -182,18 +182,18 @@ int32_t matrix_sub(void) {
 	puts("Provide the matrix dimensions");
 	if (!ReadMatrix(m1)) {
 		return(0);
-	}	
+	}
 	puts("Second matrix");
 	if (!ReadMatrix(m2)) {
 		return(0);
-	}	
+	}
 	Sub(m1, m2, result);
 	puts("Result");
 	PrintMatrix(result);
 
 	return(1);
 }
-	
+
 int32_t matrix_smul(void) {
 	int32_t m1[MAX_MATRIX_SIZE];
 	int32_t result[MAX_MATRIX_SIZE];
@@ -206,23 +206,23 @@ int32_t matrix_smul(void) {
 	puts("Provide the matrix dimensions");
 	if (!ReadMatrix(m1)) {
 		return(0);
-	}	
+	}
 	printf("Multiplier: ");
 	if (receive_until(buf, '\n', 7) == 0) {
 		return(0);
 	}
-	multiplier = atoi(buf);	
+	multiplier = atoi(buf);
 	ScalerMultiply(m1, multiplier, result);
 	puts("Result");
 	PrintMatrix(result);
 
 	return(1);
 }
-	
+
 int32_t matrix_command(char *t) {
 	char buf[8];
 	uint8_t choice;
-	
+
 	while (1) {
 		PrintMenu();
 		if (receive_until(buf, '\n', 7) == 0) {
diff --git a/cqe-challenges/CROMU_00042/src/simon.c b/cqe-challenges/CROMU_00042/src/simon.c
index 0a75efe9..843c35df 100644
--- a/cqe-challenges/CROMU_00042/src/simon.c
+++ b/cqe-challenges/CROMU_00042/src/simon.c
@@ -124,4 +124,4 @@ void simon_command(char *t) {
     }
   }
   printf("You Win!\n");
-}
\ No newline at end of file
+}
diff --git a/cqe-challenges/CROMU_00042/src/sort.c b/cqe-challenges/CROMU_00042/src/sort.c
index d5f3a6e4..03a69009 100644
--- a/cqe-challenges/CROMU_00042/src/sort.c
+++ b/cqe-challenges/CROMU_00042/src/sort.c
@@ -17,6 +17,9 @@ void sort_command( char *pszLine )
 #ifdef PATCHED
     unsigned char itemCount = atoi( pszLine );
 #else
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
     char itemCount = atoi( pszLine );
 #endif
 
diff --git a/cqe-challenges/CROMU_00043/src/packet_analysis.c b/cqe-challenges/CROMU_00043/src/packet_analysis.c
index 6a1fc0aa..3ddb592b 100644
--- a/cqe-challenges/CROMU_00043/src/packet_analysis.c
+++ b/cqe-challenges/CROMU_00043/src/packet_analysis.c
@@ -52,6 +52,9 @@ void TransmitOptionHeader(OptionHeader *header) {
 #ifdef PATCHED
       TransmitBytes(header->value, strlen(header->value));
 #else
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
       TransmitFormattedBytes(header->value);
 #endif
       TransmitBytes("\n", 1);
@@ -219,7 +222,7 @@ int AnalyzePhysicalLayer(SystemState *state, Packet *packet) {
     DisplayFormatted(state, DISPLAY_PHYSICAL, "Transmit strength: +u\n", *(uint32_t *)(packet->data + 22));
     DisplayFormatted(state, DISPLAY_PHYSICAL, "Receive strength: +u\n", *(uint32_t *)(packet->data + 26));
     DisplayFormatted(state, DISPLAY_PHYSICAL, "Frequency: +d\n", *(uint32_t  *)(packet->data + 30));
-    DisplayFormatted(state, DISPLAY_PHYSICAL, "SNR: +u\n", *(uint32_t  *)(packet->data + 34)); 
+    DisplayFormatted(state, DISPLAY_PHYSICAL, "SNR: +u\n", *(uint32_t  *)(packet->data + 34));
     // Checksum intentionally not verified
     packet->data += 42;
     packet->size -= 42;
@@ -251,7 +254,7 @@ int AnalyzeTransportLayer(SystemState *state, Packet *packet) {
     if (packet->size < 22) {
       DisplayFormatted(state, DISPLAY_TRANSPORT, "Transport Layer too short\n");
       return -1;
-    }   
+    }
     DisplayFormatted(state, DISPLAY_TRANSPORT, "Transport Type: STREAM\n");
     DisplayFormatted(state, DISPLAY_TRANSPORT, "Stream number: +u\n", *(int *)(packet->data + 4));
     DisplayFormatted(state, DISPLAY_TRANSPORT, "Sequence number: +u\n", *(int *)(packet->data + 8));
@@ -273,7 +276,7 @@ int AnalyzeTransportLayer(SystemState *state, Packet *packet) {
   } else {
     DisplayFormatted(state, DISPLAY_TRANSPORT, "Invalid Transport Type\n");
     return -1;
-  } 
+  }
   return 0;
 }
 
@@ -318,7 +321,7 @@ int AnalyzeNetworkLayer(SystemState *state, Packet *packet) {
       return -1;
     }
     DisplayFormatted(state, DISPLAY_NETWORK, "Network debug type: +s\n", debug_type_names[debug_type]);
-    DisplayFormatted(state, DISPLAY_NETWORK, "Source Address: +x\n",  *(uint32_t *)(packet->data + 8)); 
+    DisplayFormatted(state, DISPLAY_NETWORK, "Source Address: +x\n",  *(uint32_t *)(packet->data + 8));
     DisplayFormatted(state, DISPLAY_NETWORK, "Destination Address: +x\n",*(uint32_t *)(packet->data + 12));
     DisplayFormatted(state, DISPLAY_NETWORK, "Hop Count: +u\n", *(uint16_t *)(packet->data + 16));
     DisplayFormatted(state, DISPLAY_NETWORK, "Timestamp: +u\n", *(uint32_t *)(packet->data + 18));
@@ -409,7 +412,7 @@ int AnalyzeApplicationLayer(SystemState *state, Packet *packet) {
     if (packet->size < length) {
       DisplayFormatted(state, DISPLAY_APPLICATION, "Application layer too short\n");
       return -1;
-    } 
+    }
     char buffer[256];
     bzero(buffer, sizeof(buffer));
     memcpy(buffer, (char *)packet->data, length);
@@ -428,8 +431,11 @@ int AnalyzeApplicationLayer(SystemState *state, Packet *packet) {
     if (packet->size < length) {
       DisplayFormatted(state, DISPLAY_APPLICATION, "Application layer too short\n");
       return -1;
-    } 
-    #endif 
+    }
+    #endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.taint.TaintPropagation, alpha.security.ArrayBoundV2] This is a bug.
+#endif
     bzero(buffer, sizeof(buffer));
     memcpy(buffer, (char *)packet->data, length);
     DisplayFormatted(state, DISPLAY_APPLICATION, "To: +s\n", buffer);
@@ -446,8 +452,11 @@ int AnalyzeApplicationLayer(SystemState *state, Packet *packet) {
     if (packet->size < length) {
       DisplayFormatted(state, DISPLAY_APPLICATION, "Application layer too short\n");
       return -1;
-    } 
-    #endif 
+    }
+    #endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
     bzero(buffer, sizeof(buffer));
     memcpy(buffer, (char *)packet->data, length);
     DisplayFormatted(state, DISPLAY_APPLICATION, "Subject: +s\n", buffer);
@@ -550,8 +559,8 @@ int AnalyzePacket(SystemState *state, Packet *packet) {
 
     TransmitBytes("skip\n", 5);
    return -1;
-  } 
-  // Otherwise, show packet 
+  }
+  // Otherwise, show packet
   state->stats->num_packets_shown++;
 
   if (AnalyzePhysicalLayer(state, packet) == 0) {
@@ -569,4 +578,4 @@ int AnalyzePacket(SystemState *state, Packet *packet) {
   }
 
   return -2;
-}
\ No newline at end of file
+}
diff --git a/cqe-challenges/CROMU_00044/src/userdatabase.cc b/cqe-challenges/CROMU_00044/src/userdatabase.cc
index 1ab2fde7..91fa4453 100644
--- a/cqe-challenges/CROMU_00044/src/userdatabase.cc
+++ b/cqe-challenges/CROMU_00044/src/userdatabase.cc
@@ -49,6 +49,9 @@ bool CUserEntry::DeleteMessage( CUserMessage *pCur )
 
 #else
     // BUG:: Update the last unread message if we need to
+#ifndef PATCHED
+// codechecker_confirmed [unix.Malloc] This is a bug.
+#endif
     m_oMessageQueue.DeleteItem( pCur );
 #endif
 
diff --git a/cqe-challenges/KPRCA_00002/src/main.c b/cqe-challenges/KPRCA_00002/src/main.c
index 4d27ee6d..a8604955 100755
--- a/cqe-challenges/KPRCA_00002/src/main.c
+++ b/cqe-challenges/KPRCA_00002/src/main.c
@@ -57,6 +57,9 @@
         return ERR_OVF; \
     }
 #else
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.MallocOverflow] This is a bug.
+#endif
 #define ASSERT_OVF(sz)
 #endif
 
diff --git a/cqe-challenges/KPRCA_00007/src/main.c b/cqe-challenges/KPRCA_00007/src/main.c
index 5896560f..b90e9bee 100644
--- a/cqe-challenges/KPRCA_00007/src/main.c
+++ b/cqe-challenges/KPRCA_00007/src/main.c
@@ -228,7 +228,7 @@ static void prompt_edit_router(router_t *router)
     char *line;
     printf("AS %d\n", router->asn);
     printf(" Name: %s\n", router->name);
-    printf(" IP: %d.%d.%d.%d\n", router->ip >> 24, 
+    printf(" IP: %d.%d.%d.%d\n", router->ip >> 24,
         (router->ip >> 16) & 0xff,
         (router->ip >> 8) & 0xff,
         (router->ip >> 0) & 0xff);
@@ -595,7 +595,7 @@ static void cmd_query_route(char *line)
         if (route == &g_default_route)
             bit = 1 << 31;
         else
-            bit = 1 << (30 - route->length);     
+            bit = 1 << (30 - route->length);
         route = (ip & bit) == 0 ? route->left : route->right;
     }
 
@@ -628,7 +628,7 @@ static void cmd_add_router(char *line)
     char *word = strsep(&line, " ");
     if (word == NULL)
         goto bad_arguments;
-    
+
     unsigned int asn = strtoul(word, NULL, 10);
     if (asn == INVALID_ASN || asn > MAX_ROUTERS)
         goto bad_arguments;
@@ -652,7 +652,7 @@ static void cmd_delete_router(char *line)
     char *word = strsep(&line, " ");
     if (word == NULL)
         goto bad_arguments;
-    
+
     unsigned int asn = strtoul(word, NULL, 10);
     if (asn == INVALID_ASN || asn > MAX_ROUTERS)
         goto bad_arguments;
@@ -694,7 +694,7 @@ static void cmd_edit_router(char *line)
     char *word = strsep(&line, " ");
     if (word == NULL)
         goto bad_arguments;
-    
+
     unsigned int asn = strtoul(word, NULL, 10);
 #ifdef PATCHED
     if (asn == INVALID_ASN || asn > MAX_ROUTERS)
@@ -726,7 +726,7 @@ static void cmd_list_router(char *line)
             continue;
         printf("AS %d\n", router->asn);
         printf(" Name: %s\n", router->name);
-        printf(" IP: %d.%d.%d.%d\n", router->ip >> 24, 
+        printf(" IP: %d.%d.%d.%d\n", router->ip >> 24,
             (router->ip >> 16) & 0xff,
             (router->ip >> 8) & 0xff,
             (router->ip >> 0) & 0xff);
diff --git a/cqe-challenges/KPRCA_00008/src/memcpy_fast.c b/cqe-challenges/KPRCA_00008/src/memcpy_fast.c
index 500df07c..91a789bd 100644
--- a/cqe-challenges/KPRCA_00008/src/memcpy_fast.c
+++ b/cqe-challenges/KPRCA_00008/src/memcpy_fast.c
@@ -41,6 +41,9 @@ void *memcpy_fast(void *dst, void *src, size_t length)
     size_t i = 0;
     do
     {
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
         ((uint128_t*)dst)[i] = ((uint128_t*)src)[i];
     }
     while (++i < (length / 16));
diff --git a/cqe-challenges/KPRCA_00009/src/gb.c b/cqe-challenges/KPRCA_00009/src/gb.c
index 2ba1657a..1904d733 100644
--- a/cqe-challenges/KPRCA_00009/src/gb.c
+++ b/cqe-challenges/KPRCA_00009/src/gb.c
@@ -209,6 +209,9 @@ static void copy_title(char *dst, const hdr_t *hdr)
 #ifdef PATCHED
         else
             return;
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
 #endif
     dst[i] = 0;
 }
diff --git a/cqe-challenges/KPRCA_00010/src/uwfc.c b/cqe-challenges/KPRCA_00010/src/uwfc.c
index 63cc2811..b1efb4f1 100644
--- a/cqe-challenges/KPRCA_00010/src/uwfc.c
+++ b/cqe-challenges/KPRCA_00010/src/uwfc.c
@@ -141,6 +141,9 @@ uwfc_t *init_track() {
     }
 
 #ifndef PATCHED
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.MallocOverflow] This is a bug.
+#endif
     track_size = validate_header(track) - UWFC_HEADER_SIZE; //size of file
 #else
     track_size = validate_header(track); //track->sub_chunk2_size (size of data)
diff --git a/cqe-challenges/KPRCA_00011/src/main.c b/cqe-challenges/KPRCA_00011/src/main.c
index e47cf7fc..3fc3498c 100644
--- a/cqe-challenges/KPRCA_00011/src/main.c
+++ b/cqe-challenges/KPRCA_00011/src/main.c
@@ -298,6 +298,9 @@ int login()
 #if PATCHED
   readuntil(STDIN, buf, sizeof(buf), '\n');
 #else
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2, unix.Malloc] This is a bug.
+#endif
   readuntil(STDIN, buf, sizeof(buf) + 4, '\n');
 #endif
   if (strcmp(g_password, buf) != 0)
@@ -472,6 +475,9 @@ void remove_movie()
 #if PATCHED
   if (movie_delete(&movies_full, movie_id) != 0 || movie_delete(&movies_rented, movie_id) != 0)
 #else
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2, unix.Malloc] This is a bug.
+#endif
   if (movie_delete(&movies_full, movie_id) != 0)
 #endif
     printf("[ERROR] Failed to remove.\n");
diff --git a/cqe-challenges/KPRCA_00012/src/main.c b/cqe-challenges/KPRCA_00012/src/main.c
index b2e49893..7f572073 100644
--- a/cqe-challenges/KPRCA_00012/src/main.c
+++ b/cqe-challenges/KPRCA_00012/src/main.c
@@ -266,6 +266,9 @@ int extract_text(pkk_t *pkk, char *buf)
 #endif
     {
       c = recover_byte(&pixel);
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
       buf[i] = c;
     }
 
diff --git a/cqe-challenges/KPRCA_00012/src/pkk.c b/cqe-challenges/KPRCA_00012/src/pkk.c
index 5b3139c5..4efa24fe 100644
--- a/cqe-challenges/KPRCA_00012/src/pkk.c
+++ b/cqe-challenges/KPRCA_00012/src/pkk.c
@@ -99,6 +99,9 @@ pkk_t* parse_pkk(char *data, unsigned int len)
   if (c + sizeof(pixel_t) * width * height > data + len)
 #endif
     goto fail;
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
   pkk->pixels = (pixel_t *) malloc(sizeof(pixel_t) * width * height);
   if (pkk->pixels == NULL)
     goto fail;
diff --git a/cqe-challenges/KPRCA_00013/src/accel.c b/cqe-challenges/KPRCA_00013/src/accel.c
index 55578f2d..59c1d2e6 100644
--- a/cqe-challenges/KPRCA_00013/src/accel.c
+++ b/cqe-challenges/KPRCA_00013/src/accel.c
@@ -528,6 +528,9 @@ static queue_t *infixtorpn(char *infix, size_t size)
                 if(func_idx == func_size) {
 #endif
                     func_size *= 2;
+#ifndef PATCHED
+// codechecker_confirmed [core.uninitialized.ArraySubscript] This is a bug.
+#endif
                     int *temp = realloc(func_args, func_size * sizeof(int));
                     if (temp == NULL)
                         goto error;
diff --git a/cqe-challenges/KPRCA_00013/src/accelfunc.c b/cqe-challenges/KPRCA_00013/src/accelfunc.c
index abd87e7c..bab78434 100644
--- a/cqe-challenges/KPRCA_00013/src/accelfunc.c
+++ b/cqe-challenges/KPRCA_00013/src/accelfunc.c
@@ -226,6 +226,9 @@ double handle_op_median(stack_t **args, int *is_bad_formula)
     goto done;
 
 error:
+    #ifndef PATCHED
+// codechecker_confirmed [alpha.core.CallAndMessageUnInitRefArg] This is a bug.
+#endif
     clear_stack(args);
     *is_bad_formula = 1;
     median = 0.0;
diff --git a/cqe-challenges/KPRCA_00014/src/main.c b/cqe-challenges/KPRCA_00014/src/main.c
index a1c2c57d..0f80aa26 100644
--- a/cqe-challenges/KPRCA_00014/src/main.c
+++ b/cqe-challenges/KPRCA_00014/src/main.c
@@ -89,7 +89,7 @@ static int process(opcode_t op)
 {
     static void* opcode_table[] = {
         &&do_invalid, &&do_load, &&do_store, &&do_syscall,
-        &&do_add, &&do_sub, &&do_mul, &&do_div, 
+        &&do_add, &&do_sub, &&do_mul, &&do_div,
         &&do_or, &&do_and, &&do_xor,
         &&do_slt, &&do_slte
     };
@@ -105,6 +105,9 @@ static int process(opcode_t op)
         goto *opcode_table[(unsigned)opc];
 #else
     if (opc < NUM_OPCODES)
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
         goto *opcode_table[opc];
 #endif
 
@@ -181,7 +184,7 @@ int main()
         if (read_fully(state.registers, sizeof(state.registers)) != 0)
             goto bad_init;
     }
-    
+
     if (flags & (MEM_SIZE-1))
     {
         if (read_fully(state.memory, flags & (MEM_SIZE-1)) != 0)
diff --git a/cqe-challenges/KPRCA_00016/cb_1/src/main.c b/cqe-challenges/KPRCA_00016/cb_1/src/main.c
index 24c1e281..04c992c3 100644
--- a/cqe-challenges/KPRCA_00016/cb_1/src/main.c
+++ b/cqe-challenges/KPRCA_00016/cb_1/src/main.c
@@ -183,6 +183,9 @@ void delete_message(user_t *user, msg_queue *messages, int msg_id)
 
 fail:
   send_delete_res(STATUS_FAIL, 0);
+  #ifndef PATCHED
+// codechecker_confirmed [alpha.core.Conversion, core.NullDereference, core.uninitialized.UndefReturn] This is a bug.
+#endif
   while ((msg = deq_msg(&tmp_queue)) != NULL);
 
 }
diff --git a/cqe-challenges/KPRCA_00016/cb_1/src/message.c b/cqe-challenges/KPRCA_00016/cb_1/src/message.c
index ab0c79a8..63b9cb15 100644
--- a/cqe-challenges/KPRCA_00016/cb_1/src/message.c
+++ b/cqe-challenges/KPRCA_00016/cb_1/src/message.c
@@ -72,6 +72,10 @@ message_t* parse_message(char *data, user_t *from, user_t *to, unsigned int len)
     key[2] = to->auth_code ^ to->user_id;
     key[3] = to->auth_code;
     protect_msg(key, unprotected, MAX_TEXT_LEN);
+
+#ifndef PATCHED
+// codechecker_confirmed [alpha.core.Conversion, core.NullDereference, core.uninitialized.UndefReturn] This is a bug.
+#endif
     msg->text = malloc(MAX_TEXT_LEN);
     if (msg->text == NULL)
       goto fail;
diff --git a/cqe-challenges/KPRCA_00018/src/squarerabbit.c b/cqe-challenges/KPRCA_00018/src/squarerabbit.c
index 1d5ae986..947162c1 100644
--- a/cqe-challenges/KPRCA_00018/src/squarerabbit.c
+++ b/cqe-challenges/KPRCA_00018/src/squarerabbit.c
@@ -432,4 +432,3 @@ int dealer_hit()
 
     return score;
 }
-
diff --git a/cqe-challenges/KPRCA_00019/src/session.c b/cqe-challenges/KPRCA_00019/src/session.c
index 65e32a1b..e28d2790 100644
--- a/cqe-challenges/KPRCA_00019/src/session.c
+++ b/cqe-challenges/KPRCA_00019/src/session.c
@@ -110,7 +110,7 @@ static void session_send_reject(unsigned int id, unsigned int reason)
         unsigned reason : 16;
         unsigned char data[];
     } rej;
-    
+
     rej.hdr.code = COMMAND_REJECT;
     rej.hdr.id = id;
     rej.hdr.length = sizeof(struct command_reject) - sizeof(control_hdr_t);
@@ -261,16 +261,36 @@ static void session_configuration_request(command_t *cmd)
                 if (mtu < 48)
                 {
                     resp->result = 1;
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.MallocOverflow] This is a bug.
+#endif
                     resp->config[resp_offset] = type;
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.MallocOverflow] This is a bug.
+#endif
                     resp->config[resp_offset+1] = 2;
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.MallocOverflow] This is a bug.
+#endif
                     *(unsigned short*)&resp->config[resp_offset+2] = 48;
                     resp_offset += 4;
                 }
                 else
                 {
                     ch->remote_mtu = mtu;
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.MallocOverflow] This is a bug.
+#endif
+
                     resp->config[resp_offset] = type;
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.MallocOverflow] This is a bug.
+#endif
+
                     resp->config[resp_offset+1] = 2;
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.MallocOverflow] This is a bug.
+#endif
                     *(unsigned short*)&resp->config[resp_offset+2] = mtu;
                     resp_offset += 4;
                 }
@@ -387,7 +407,7 @@ static void session_echo_request(command_t *cmd)
 {
     // just change the code and resend
     cmd->hdr.code = ECHO_RESPONSE;
-    
+
     _session_send(0x0001, cmd->hdr.length + sizeof(control_hdr_t), (unsigned char *)cmd);
 }
 
@@ -464,7 +484,7 @@ static int session_handle_control()
             break;
         offset += cmd->hdr.length;
 
-        session_handle_command(cmd);        
+        session_handle_command(cmd);
     }
     return 0;
 }
@@ -477,7 +497,7 @@ static int session_handle_packet()
     channel_t *ch = g_channels[g_current_packet.hdr.channel];
     if (ch == NULL || ch->state != OPEN)
     {
-        // XXX ignore? 
+        // XXX ignore?
         return 0;
     }
 
diff --git a/cqe-challenges/KPRCA_00020/src/asl6.c b/cqe-challenges/KPRCA_00020/src/asl6.c
index 18a528da..edc8c4d8 100644
--- a/cqe-challenges/KPRCA_00020/src/asl6.c
+++ b/cqe-challenges/KPRCA_00020/src/asl6.c
@@ -408,6 +408,9 @@ static void print_oid(element *e)
 #ifdef PATCHED
     ret = read_octet_int(&e->data[i], e->length - i, &v);
 #else
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
     ret = read_octet_int(&e->data[i], e->length, &v);
 #endif
     if (ret < 0) {
diff --git a/cqe-challenges/KPRCA_00021/src/main.c b/cqe-challenges/KPRCA_00021/src/main.c
index d206e687..618c2916 100644
--- a/cqe-challenges/KPRCA_00021/src/main.c
+++ b/cqe-challenges/KPRCA_00021/src/main.c
@@ -118,6 +118,9 @@ o        o         o      o     +\n\
     sz = sz > 0 ? strlen(item->item.i_string.s) : (buf + sizeof(buf) - c - 1);
     memcpy(c, item->item.i_string.s, sz);
 #else
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
     strcpy(c, item->item.i_string.s);
 #endif
     c += item->item.i_string.len;
diff --git a/cqe-challenges/KPRCA_00022/src/utils.c b/cqe-challenges/KPRCA_00022/src/utils.c
index 7c6ea292..9618f9eb 100644
--- a/cqe-challenges/KPRCA_00022/src/utils.c
+++ b/cqe-challenges/KPRCA_00022/src/utils.c
@@ -27,6 +27,9 @@ static int verify_choice(char **valid_choices, char *choice, size_t num_elements
         if (strlen(valid_choices[i]) == strlen(choice) &&
                 memcmp(valid_choices[i], choice, strlen(valid_choices[i])) == 0)
 #else
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
         if (memcmp(valid_choices[i], choice, strlen(valid_choices[i])) == 0)
 #endif
             return 0;
diff --git a/cqe-challenges/KPRCA_00023/src/form.c b/cqe-challenges/KPRCA_00023/src/form.c
index 9472c31c..2fa853f7 100644
--- a/cqe-challenges/KPRCA_00023/src/form.c
+++ b/cqe-challenges/KPRCA_00023/src/form.c
@@ -313,6 +313,9 @@ int handle_update(form_t *form, char *arg)
 #ifdef PATCHED
   } else if (strncmp(cur->answer, input_buf, strlen(input_buf)) == 0) {
 #else
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2, alpha.security.MallocOverflow] This is a bug.
+#endif
   } else if (strncmp(cur->answer, input_buf, strlen(cur->answer)) == 0) {
 #endif
     strcpy(cur->answer, input_buf);
diff --git a/cqe-challenges/KPRCA_00024/cb_1/src/main.c b/cqe-challenges/KPRCA_00024/cb_1/src/main.c
index ea3983e5..88ab47f2 100644
--- a/cqe-challenges/KPRCA_00024/cb_1/src/main.c
+++ b/cqe-challenges/KPRCA_00024/cb_1/src/main.c
@@ -66,7 +66,7 @@ void list()
     key k;
     result res;
     size_t bytes;
-    
+
     buf[0] = 0;
     k.data.count = 0;
     res = db_next(k);
@@ -75,6 +75,9 @@ void list()
 #ifdef PATCHED
         if (strlen(buf) + strlen((char*)res.rec.data->k.data.data) + 30 > sizeof(buf))
             break;
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
 #endif
         item_details *d = (item_details *)res.rec.data->data.data;
         sprintf(buf, "%s%s (Price: %d.%02d, Count: %d)\n", buf, res.rec.data->k.data.data,
@@ -131,7 +134,7 @@ void sell()
     d.price = strtol(tmp, NULL, 10);
     read_until(STDIN, tmp, sizeof(tmp), '\n');
     d.count = strtoul(tmp, NULL, 10);
-    
+
     rec.k.data.count = strlen(name) + 1;
     rec.k.data.data = (opaque *)name;
     rec.data.count = sizeof(d);
diff --git a/cqe-challenges/KPRCA_00025/src/Map.c b/cqe-challenges/KPRCA_00025/src/Map.c
index ef55c86e..ca67880e 100644
--- a/cqe-challenges/KPRCA_00025/src/Map.c
+++ b/cqe-challenges/KPRCA_00025/src/Map.c
@@ -309,6 +309,9 @@ DefineFunction(Map, void, deserialize, Buffer *buf)
 #ifdef PATCHED
         if (id > max_id && id != MAP_WALL_ID && id != MAP_EMPTY_ID)
             max_id = id;
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.MallocOverflow] This is a bug.
 #endif
         ASSERT_OR_RAISE(count + i <= this->m_width * this->m_height, EXC_BAD_STATE);
 
@@ -322,6 +325,9 @@ DefineFunction(Map, void, deserialize, Buffer *buf)
     }
 #ifdef PATCHED
     ASSERT_OR_RAISE(i >= max_id, EXC_BAD_STATE);
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.MallocOverflow] This is a bug.
 #endif
     // decode the player
     $(this->m_player, deserialize, buf);
diff --git a/cqe-challenges/KPRCA_00025/src/Monster.c b/cqe-challenges/KPRCA_00025/src/Monster.c
index b35c8b00..f1062f0f 100644
--- a/cqe-challenges/KPRCA_00025/src/Monster.c
+++ b/cqe-challenges/KPRCA_00025/src/Monster.c
@@ -39,7 +39,7 @@ DefineFunction(Monster, void, init, const kind_data_t *kind, unsigned int level)
     this->m_level = level;
     this->m_kind = kind;
     $(this, set_name, kind->name);
-    
+
     this->m_max_health = kind->max_health + level * LEVEL_HEALTH_MULTIPLIER / 100;
     this->m_attack = kind->attack + level * LEVEL_ATTACK_MULTIPLIER / 100;
     this->m_defense = kind->defense + level * LEVEL_DEFENSE_MULTIPLIER / 100;
@@ -66,6 +66,9 @@ DefineFunction(Monster, void, set_name, const char *name)
 #if PATCHED
     if (strlen(name)+1 > MONSTER_NAME_LEN)
         raise(EXC_BAD_STATE);
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.MallocOverflow] This is a bug.
 #endif
     strcpy(this->m_name, name);
 }
@@ -140,7 +143,7 @@ void Monster_print_array(Array *arr)
     for (i = 0; i < arr->m_count; i++)
     {
         Monster *m = $(arr, get, i);
-        $($g->m_io, format, "%2d. %s (%s)\n    Level: %2d    XP: %d\n    Health: %d / %d\n", 
+        $($g->m_io, format, "%2d. %s (%s)\n    Level: %2d    XP: %d\n    Health: %d / %d\n",
             i + 1, m->m_name, m->m_kind->name, m->m_level, m->m_xp, m->m_health, m->m_max_health);
     }
 }
diff --git a/cqe-challenges/KPRCA_00026/src/ac.c b/cqe-challenges/KPRCA_00026/src/ac.c
index e9afe11d..929bdc69 100644
--- a/cqe-challenges/KPRCA_00026/src/ac.c
+++ b/cqe-challenges/KPRCA_00026/src/ac.c
@@ -107,6 +107,9 @@ void ac_process(void *ud)
       }
 #endif
       i = ac_queue_head;
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.MallocOverflow, core.NullDereference] This is a bug.
+#endif
       size_t start = ac_queue[i].start, end = ac_queue[i].end;
 
       if (end-start < sizeof(word))
@@ -197,6 +200,9 @@ char *ac_read(int fd, char term)
     mutex_lock(&ac_mutex);
 #endif
     ac_buffer = newbuf;
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.MallocOverflow, core.NullDereference] This is a bug.
+#endif
     memcpy(&ac_buffer[ac_idx], word, count);
     ac_idx += count;
     ac_buffer[ac_idx] = 0;
diff --git a/cqe-challenges/KPRCA_00027/src/protocol.c b/cqe-challenges/KPRCA_00027/src/protocol.c
index 0e5ea628..d3e337e0 100644
--- a/cqe-challenges/KPRCA_00027/src/protocol.c
+++ b/cqe-challenges/KPRCA_00027/src/protocol.c
@@ -138,6 +138,9 @@ void handle_new_permit_ring(char *buf, int buf_len)
           c = MASTER_KEY_LEN + sizeof(int) + i * sizeof(ppermit_t);
           if (permit_test((ppermit_t *)&buf[c], *(int *)&buf[c + 22], &buf[c + 8]) == PRES_OK)
           {
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
             memcpy(&pring.permits[i], &buf[c], sizeof(ppermit_t));
             pring.num_permits++;
           }
@@ -209,4 +212,3 @@ void handle_test_permit_ring(char *buf, int buf_len)
   }
   _send_response(RES_ERROR, NULL, 0);
 }
-
diff --git a/cqe-challenges/KPRCA_00028/src/eval.c b/cqe-challenges/KPRCA_00028/src/eval.c
index b341bf54..0dc2b238 100644
--- a/cqe-challenges/KPRCA_00028/src/eval.c
+++ b/cqe-challenges/KPRCA_00028/src/eval.c
@@ -261,6 +261,9 @@ static exp_t *subst(exptup_list *z, exp_t *e)
 #ifdef PATCHED
       if (z->value && z->value->fst && z->value->fst->name && strcmp(e->name, z->value->fst->name) == 0)
 #else
+#ifndef PATCHED
+// codechecker_confirmed [core.NullDereference] This is a bug.
+#endif
       if (strcmp(e->name, z->value->fst->name) == 0)
 #endif
         return z->value->snd;
@@ -351,6 +354,9 @@ exp_t *lambda(exp_t *l, exp_t *e, sym_list *s)
 #ifdef PATCHED
     CDR(cake) = n;
 #else
+#ifndef PATCHED
+// codechecker_confirmed [alpha.core.DynamicTypeChecker] This is a bug.
+#endif
     CDR(CDR(cake)) = n;
 #endif
   }
diff --git a/cqe-challenges/KPRCA_00029/src/bbs.c b/cqe-challenges/KPRCA_00029/src/bbs.c
index 4fb8c31d..8fbd50d0 100644
--- a/cqe-challenges/KPRCA_00029/src/bbs.c
+++ b/cqe-challenges/KPRCA_00029/src/bbs.c
@@ -345,7 +345,9 @@ void bbs_rx(const uint8_t *data, size_t count)
     if (count > sizeof(str)-1)
         count = sizeof(str)-1;
 #endif
-
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
     memcpy(str, data, count);
     str[count] = 0; // make sure string is NULL-terminated
 
@@ -381,4 +383,3 @@ int main()
     modem_loop(bbs_rx);
     return 0;
 }
-
diff --git a/cqe-challenges/KPRCA_00030/src/gld.c b/cqe-challenges/KPRCA_00030/src/gld.c
index 2005ef6a..474c3950 100644
--- a/cqe-challenges/KPRCA_00030/src/gld.c
+++ b/cqe-challenges/KPRCA_00030/src/gld.c
@@ -123,6 +123,9 @@ int bomb_collisions(pixel_list_t *bombs, pixel_list_t *living_cells)
 #ifdef PATCHED
                     if (dead_cell != NULL && dead_cell->is_alive) {
 #else
+#ifndef PATCHED
+// codechecker_confirmed [core.NullDereference] This is a bug.
+#endif
                     if (dead_cell->is_alive) {
 #endif
                         dead_cell->is_alive = FALSE;
diff --git a/cqe-challenges/KPRCA_00031/src/string.c b/cqe-challenges/KPRCA_00031/src/string.c
index 5a028df1..4d3b1faa 100644
--- a/cqe-challenges/KPRCA_00031/src/string.c
+++ b/cqe-challenges/KPRCA_00031/src/string.c
@@ -47,6 +47,9 @@ string *new_string(char *d)
       error(EALLOC);
     s->d[nz] = '\0';
     s->cap = nz;
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.MallocOverflow] This is a bug.
 #endif
     strcpy(s->d, d);
   }
diff --git a/cqe-challenges/KPRCA_00032/src/atree.c b/cqe-challenges/KPRCA_00032/src/atree.c
index 479d277a..ccf1f95b 100644
--- a/cqe-challenges/KPRCA_00032/src/atree.c
+++ b/cqe-challenges/KPRCA_00032/src/atree.c
@@ -138,7 +138,7 @@ static atree_node_t **_atree_walk(atree_t *tree, freqtab_t *ftab, int is_insert)
 
             n->level = i;
             n->max_degree = NODE_MIN_DEGREE;
-            
+
             if (node)
             {
                 n->children[n->degree].child = node;
@@ -166,7 +166,7 @@ static atree_node_t **_atree_walk(atree_t *tree, freqtab_t *ftab, int is_insert)
                 {
                     // XXX node->degree already incremented
                     node->degree--;
-                    return 0; 
+                    return 0;
                 }
 
                 n->max_degree = new_length;
@@ -349,7 +349,7 @@ static void _atree_gather_subset(atree_t *tree, freqtab_t *ftab, atree_node_t *n
         r = realloc(*results, c * sizeof(char *));
         if (r == NULL)
             return;
-        
+
         memcpy(&r[*count], node->words, node->degree * sizeof(char *));
         *results = r;
         *count += node->degree;
diff --git a/cqe-challenges/KPRCA_00033/src/lsimp.c b/cqe-challenges/KPRCA_00033/src/lsimp.c
index 2c7ea3d0..6bec1dd0 100644
--- a/cqe-challenges/KPRCA_00033/src/lsimp.c
+++ b/cqe-challenges/KPRCA_00033/src/lsimp.c
@@ -75,6 +75,9 @@ lsimp_msg_t* parse_msg(char *buf, unsigned int buf_len)
     if (msg->type) break;
 #endif
     if (buf_len == 4) break;
+#ifndef PATCHED
+// codechecker_confirmed [alpha.core.DynamicTypeChecker] This is a bug.
+#endif
     dword = *(int *)(pos);
     pos += sizeof(int);
     buf_len -= sizeof(int);
diff --git a/cqe-challenges/KPRCA_00034/src/main.c b/cqe-challenges/KPRCA_00034/src/main.c
index bbd6737f..0610e0ba 100644
--- a/cqe-challenges/KPRCA_00034/src/main.c
+++ b/cqe-challenges/KPRCA_00034/src/main.c
@@ -59,7 +59,7 @@ char *read_line(silk_t *silk)
 {
     size_t cnt = 0, idx = 0;
     char *result = NULL;
-    
+
     do {
         if (cnt == idx)
         {
@@ -86,7 +86,7 @@ char *read_line(silk_t *silk)
             goto fail;
         result = tmp;
     }
-    result[idx] = 0; 
+    result[idx] = 0;
     return result;
 
 fail:
@@ -141,6 +141,9 @@ static int send_response(priv_t *priv, unsigned int code, char *text)
         int result;
 
 #ifndef PATCHED
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.taint.TaintPropagation] This is a bug.
+#endif
         fdprintf(STDERR, "WARNING text is too long: ");
         fdprintf(STDERR, text);
         fdprintf(STDERR, "\n");
@@ -210,7 +213,7 @@ int do_sell(priv_t *priv, char *resource)
     product_t *p;
 
     name = resource;
-    
+
     seller = strchr(name, ';');
     if (seller == NULL)
         goto bad_request;
@@ -243,7 +246,7 @@ int do_sell(priv_t *priv, char *resource)
         p->quantity += quantity;
         return send_response(priv, RESP_UPDATED, "Record updated");
     }
-    
+
     p = malloc(sizeof(product_t));
     if (p == NULL)
         goto internal_error;
diff --git a/cqe-challenges/KPRCA_00035/src/main.c b/cqe-challenges/KPRCA_00035/src/main.c
index d855d2ab..c0ef6555 100644
--- a/cqe-challenges/KPRCA_00035/src/main.c
+++ b/cqe-challenges/KPRCA_00035/src/main.c
@@ -157,7 +157,9 @@ int process_sys(state *machine)
   } else {
     return 0;
   }
-
+#ifndef PATCHED
+// codechecker_confirmed [core.uninitialized.ArraySubscript, core.uninitialized.Branch, alpha.security.ArrayBoundV2] This is a bug.
+#endif
   sv.fp(sv.fd, &(machine->memory[start]), len, NULL);
   return 0;
 }
diff --git a/cqe-challenges/KPRCA_00036/src/trex.c b/cqe-challenges/KPRCA_00036/src/trex.c
index d84cc340..7b8db1ba 100644
--- a/cqe-challenges/KPRCA_00036/src/trex.c
+++ b/cqe-challenges/KPRCA_00036/src/trex.c
@@ -70,6 +70,9 @@ static int match_helper(state_t *state, unsigned char *str, int match_len, match
 #ifdef PATCHED
     if (g_epsilon_loop[state->id] > strlen(str))
 #else
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
     if (g_epsilon_loop[state->id] >= strlen(str))
 #endif
         g_epsilon_loop[state->id] = strlen(str);
@@ -214,4 +217,3 @@ failed:
     clear_trex();
     return NULL;
 }
-
diff --git a/cqe-challenges/KPRCA_00037/src/cgcf.c b/cqe-challenges/KPRCA_00037/src/cgcf.c
index 50208bea..1db19c96 100644
--- a/cqe-challenges/KPRCA_00037/src/cgcf.c
+++ b/cqe-challenges/KPRCA_00037/src/cgcf.c
@@ -125,7 +125,10 @@ int cgcf_parse_section_header(const char *buf, size_t buf_len, short idx, cgcf_S
   if (idx < shnum)
 #endif
   {
-    memmove(shdr, buf + ehdr.e_shoff + ehdr.e_shentsize * idx, sz);
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.MallocOverflow] This is a bug.
+#endif
+memmove(shdr, buf + ehdr.e_shoff + ehdr.e_shentsize * idx, sz);
     return 0;
   }
   return -1;
diff --git a/cqe-challenges/KPRCA_00038/src/interp.c b/cqe-challenges/KPRCA_00038/src/interp.c
index 2b9f8b6e..f5103b8a 100644
--- a/cqe-challenges/KPRCA_00038/src/interp.c
+++ b/cqe-challenges/KPRCA_00038/src/interp.c
@@ -231,7 +231,7 @@ static int get_number(interp_t *interp, const char *name, int *result)
 
     if (var->type == VAR_ARRAY)
         return 0;
-    
+
     *result = coerce_number(interp, var);
     return 1;
 }
@@ -332,7 +332,7 @@ static int read_fields(interp_t *interp)
     if (interp->fields == NULL)
         goto fail;
 
-    
+
     for (last = 0, cnt = 0, i = 0; interp->buf[i] != 0; i++)
     {
         if (min != 0 && strncmp(&interp->buf[i], fs, min) != 0)
@@ -585,7 +585,7 @@ static int do_concat(interp_t *interp, expr_t *e1, expr_t *e2)
     unsigned int len = 0;
     int result = 0;
     var_t v1, v2;
-    
+
     v1.type = v2.type = VAR_NULL;
 
     if (!eval_expression(interp, e1))
@@ -651,7 +651,7 @@ static int do_match(interp_t *interp, expr_t *lhs, expr_t *rhs)
     {
         if (!eval_expression(interp, lhs))
             return 0;
-        
+
         if (interp->result.type == VAR_STRING)
         {
             str = interp->result.v_string.value;
@@ -707,6 +707,9 @@ static int eval_expression(interp_t *interp, expr_t *expr)
 #ifdef PATCHED
     if (expr == NULL)
         return 0;
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.taint.TaintPropagation, core.NullDereference] This is a bug.
 #endif
 
     switch(expr->op)
@@ -776,7 +779,7 @@ static int eval_expression(interp_t *interp, expr_t *expr)
                     coerce_bool(interp, &interp->result) ? TRUE : FALSE))
                 return 0;
         }
-        break; 
+        break;
     case OP_AND:
         if (!eval_expression(interp, expr->e_binop.lhs))
             return 0;
@@ -793,7 +796,7 @@ static int eval_expression(interp_t *interp, expr_t *expr)
                     coerce_bool(interp, &interp->result) ? TRUE : FALSE))
                 return 0;
         }
-        break; 
+        break;
     case OP_MATCH:
     case OP_NOT_MATCH:
         if (!do_match(interp, expr->e_binop.lhs, expr->e_binop.rhs))
@@ -956,6 +959,9 @@ static int do_print(interp_t *interp, stmt_t *stmt)
             if (get_field(interp, 0) == NULL)
                 return 0;
             else
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.taint.TaintPropagation] This is a bug.
 #endif
             fdprintf(STDOUT, "%s", get_field(interp, 0));
         }
@@ -963,10 +969,10 @@ static int do_print(interp_t *interp, stmt_t *stmt)
         fdprintf(STDOUT, "%s", get_string(interp, "ORS"));
         return 1;
     }
-    
+
     if (!eval_expression(interp, stmt->s_print.fmt))
         return 0;
-    
+
     if (interp->result.type == VAR_NUMBER)
     {
         fdprintf(STDOUT, "%d", interp->result.v_number.value);
@@ -1037,7 +1043,7 @@ static int eval_statements(interp_t *interp, stmt_t *stmt)
                 if (result == EVAL_BREAK)
                     break;
                 if (result != EVAL_CONTINUE && result != EVAL_FINISHED)
-                    return result;                
+                    return result;
                 if (!eval_expression(interp, stmt->s_while.cond))
                     return EVAL_ERROR;
             } while (coerce_bool(interp, &interp->result));
@@ -1089,7 +1095,7 @@ int program_run(program_t *prog, io_t *io)
 
     interp.io = io;
     interp.prog = prog;
-    
+
     if (!dict_init(&interp.vars, free_var))
         return 0;
 
diff --git a/cqe-challenges/KPRCA_00038/src/lex.c b/cqe-challenges/KPRCA_00038/src/lex.c
index 04db8264..d1fdb059 100644
--- a/cqe-challenges/KPRCA_00038/src/lex.c
+++ b/cqe-challenges/KPRCA_00038/src/lex.c
@@ -134,7 +134,7 @@ static int pattern_match(program_t *prog, const char *s)
 {
     unsigned int pos = io_tell(prog->io), i;
     int c;
-    
+
     while ((c = io_getc(prog->io)) >= 0)
         if (!isspace(c))
             break;
@@ -207,7 +207,7 @@ static int parse_statements(program_t *prog, stmt_t **result)
     unsigned int pos = io_tell(prog->io), pos2;
     char *kw = NULL;
     stmt_t *stmt = NULL;
-    
+
     skip_whitespace(prog);
     if (io_getc(prog->io) == '{')
     {
@@ -217,7 +217,7 @@ static int parse_statements(program_t *prog, stmt_t **result)
             stmt_t *tmp;
 
             skip_whitespace(prog);
-            
+
             c = io_peek(prog->io);
             if (c == '#')
             {
@@ -231,7 +231,7 @@ static int parse_statements(program_t *prog, stmt_t **result)
                 io_getc(prog->io);
                 break;
             }
-            
+
             if (!parse_statements(prog, &tmp))
                 goto fail;
 
@@ -243,12 +243,15 @@ static int parse_statements(program_t *prog, stmt_t **result)
             if (stmt == NULL)
                 tail = stmt = tmp;
             else
+#ifndef PATCHED
+// codechecker_confirmed [core.NullDereference] This is a bug.
+#endif
                 tail = tail->next = tmp;
         }
         *result = stmt;
         return 1;
     }
-    
+
     pos2 = io_tell(prog->io) - 1;
     io_seek(prog->io, pos2);
     kw = parse_var(prog);
@@ -399,7 +402,7 @@ static int parse_expression(program_t *prog, expr_t **result, int end)
     {
         expr_t *tmp = NULL;
         int c;
-        
+
         // strip whitespace, but need to know if there is whitespace to
         // support concatenation
         skip_whitespace(prog);
@@ -449,7 +452,7 @@ static int parse_expression(program_t *prog, expr_t **result, int end)
             if (tmp == NULL)
                 goto fail;
             if (!parse_expression(prog, &tmp->e_cond.vtrue, ':'))
-                goto fail; 
+                goto fail;
             break;
         case '=':
             if (io_getc(prog->io) == '=')
@@ -853,7 +856,7 @@ static int is_keyword(const char *s)
         strcmp(s, "while") == 0 ||
         strcmp(s, "continue") == 0 ||
         strcmp(s, "do") == 0 ||
-        strcmp(s, "for") == 0 || 
+        strcmp(s, "for") == 0 ||
         strcmp(s, "break") == 0 ||
         strcmp(s, "next") == 0 ||
         strcmp(s, "exit") == 0 ||
@@ -937,7 +940,7 @@ static int is_binary(int op)
         op == OP_ASSIGN_ADD ||
         op == OP_ASSIGN_SUB ||
         op == OP_ASSIGN_MUL ||
-        op == OP_ASSIGN_DIV || 
+        op == OP_ASSIGN_DIV ||
         op == OP_ASSIGN_MOD ||
         op == OP_OR ||
         op == OP_AND ||
@@ -1121,7 +1124,7 @@ static int treeify_expression(expr_t **expr, int stages)
     {
         HANDLE_BINOP(OP_OR);
     }
-    
+
     for (iter = *expr; iter != NULL; iter = iter->next)
     {
         HANDLE_BINOP(OP_AND);
@@ -1318,7 +1321,7 @@ static void print_statement(stmt_t *stmt, const char *prefix)
         return;
 
     fdprintf(STDERR, "%s%s\n", prefix, stmt_to_name(stmt->type));
-    
+
     strcpy(buf, prefix);
     if (strlen(buf) < sizeof(buf) - 1)
         strcat(buf, "\t");
diff --git a/cqe-challenges/KPRCA_00038/src/regexp.c b/cqe-challenges/KPRCA_00038/src/regexp.c
index 57d24693..6bfc6ba1 100644
--- a/cqe-challenges/KPRCA_00038/src/regexp.c
+++ b/cqe-challenges/KPRCA_00038/src/regexp.c
@@ -192,7 +192,6 @@ static int regexp_parse(rop_t **result, char *str, int end)
     if (++guard > 10000)
         goto fail;
 #endif
-
     for (i = 0; str[i] != end; i++)
     {
         rop_t *tmp = NULL;
@@ -287,7 +286,9 @@ static int regexp_parse(rop_t **result, char *str, int end)
 #ifdef PATCHED
     --guard;
 #endif
-
+#ifndef PATCHED
+// codechecker_confirmed [core.NullDereference] This is a bug.
+#endif
     *result = op;
     return i + 1;
 
@@ -435,7 +436,7 @@ static int _regexp_match(regexp_t *r, rop_t *op, int c)
 
         while (op != NULL && op->next == NULL)
             op = op->parent;
-        
+
         if (op == NULL)
             return 1;
 
@@ -518,4 +519,3 @@ done:
     r->states = r->prev_states = NULL;
     return result;
 }
-
diff --git a/cqe-challenges/KPRCA_00039/src/main.c b/cqe-challenges/KPRCA_00039/src/main.c
index cba03085..f6773367 100644
--- a/cqe-challenges/KPRCA_00039/src/main.c
+++ b/cqe-challenges/KPRCA_00039/src/main.c
@@ -550,6 +550,9 @@ void end_game(game_t* game, char *name, u8 reason)
 #ifdef PATCHED
   fdprintf(STDOUT, "%s", name);
 #else
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.taint.TaintPropagation] This is a bug.
+#endif
   fdprintf(STDOUT, name);
 #endif
 
diff --git a/cqe-challenges/KPRCA_00040/src/main.c b/cqe-challenges/KPRCA_00040/src/main.c
index 23a85b4d..835f2cd2 100644
--- a/cqe-challenges/KPRCA_00040/src/main.c
+++ b/cqe-challenges/KPRCA_00040/src/main.c
@@ -648,6 +648,9 @@ size_t decompress(char* input, char *output, size_t output_size)
 #ifdef PATCHED
       if (writer->offset + elem->len > writer->cap)
         err("Expands too much");
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
 #endif
       writer_write(writer, writer->buf + writer->offset - elem->back, elem->len);
 
@@ -656,6 +659,9 @@ size_t decompress(char* input, char *output, size_t output_size)
 #ifdef PATCHED
       if (writer->offset + 1 > writer->cap)
         err("Expands too much");
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
 #endif
       writer_write(writer, input + in_idx, 1);
       in_idx++;
diff --git a/cqe-challenges/KPRCA_00041/src/differ.c b/cqe-challenges/KPRCA_00041/src/differ.c
index 0355f7c1..c60bafad 100644
--- a/cqe-challenges/KPRCA_00041/src/differ.c
+++ b/cqe-challenges/KPRCA_00041/src/differ.c
@@ -306,6 +306,9 @@ static void print_diff()
                     ee = (ee * ee) == l_idx ? ee + 1 : 0;
                     if (ee == EE_VAL) {
 #ifndef PATCHED
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
                         strcpy(ee_str, ll_iter->lc->pline);
 #else
                         if (strlen(ll_iter->lc->pline) < 4096)
diff --git a/cqe-challenges/KPRCA_00042/src/cmdb_backend.c b/cqe-challenges/KPRCA_00042/src/cmdb_backend.c
index 3c422d4d..209eddd4 100644
--- a/cqe-challenges/KPRCA_00042/src/cmdb_backend.c
+++ b/cqe-challenges/KPRCA_00042/src/cmdb_backend.c
@@ -285,6 +285,9 @@ void print_genres()
     for (i = 0; i < g_num_genres; i++) {
 #ifndef PATCHED
         printf("\n %d. ", i+1);
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.taint.TaintPropagation] This is a bug.
+#endif
         printf(g_all_genres[i]);
 #else
         printf("\n %d. %s", i+1, g_all_genres[i]);
@@ -320,4 +323,3 @@ void dar(char *new_rating)
     if (g_num_mpaa_ratings < 10)
         g_all_mpaa_ratings[g_num_mpaa_ratings++] = strdup(new_rating);
 }
-
diff --git a/cqe-challenges/KPRCA_00043/src/main.c b/cqe-challenges/KPRCA_00043/src/main.c
index f0738d78..244dec29 100644
--- a/cqe-challenges/KPRCA_00043/src/main.c
+++ b/cqe-challenges/KPRCA_00043/src/main.c
@@ -81,7 +81,13 @@ uint8_t submit_lyrics(char *lyrics, size_t len)
           s++;
           len--;
         }
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
         strcat(s, word);
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
         s += strlen(word);
         len -= strlen(word);
 #if PATCHED
@@ -91,6 +97,9 @@ uint8_t submit_lyrics(char *lyrics, size_t len)
           *s = '\0';
           return 1;
         }
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
 #endif
       }
       else if (n == 0)
@@ -123,6 +132,9 @@ uint8_t submit_lyrics(char *lyrics, size_t len)
     if (strlen(lyrics) < olen)
 #endif
     {
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
       strcat(s, "\n");
       s++;
       len--;
diff --git a/cqe-challenges/KPRCA_00044/src/main.c b/cqe-challenges/KPRCA_00044/src/main.c
index dbbc06dc..ac93f499 100644
--- a/cqe-challenges/KPRCA_00044/src/main.c
+++ b/cqe-challenges/KPRCA_00044/src/main.c
@@ -406,7 +406,7 @@ static void my_sort_words(uintptr_t comparator, intptr_t reverse)
 static intptr_t my_verify_word(const char *word)
 {
     int len = CALL(STRLEN, word), i;
-    
+
     // check that it contains a non-trivial root word
     for (i = 0; i < len - 3; i++)
     {
@@ -439,7 +439,9 @@ static intptr_t my_add_word(const char *word)
     if (i >= sizeof(words) / sizeof(words[0]))
         return 0;
 #endif
-
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
     words[i] = CALL(STRDUP, word);
     words[i+1] = NULL;
     return 1;
@@ -466,7 +468,7 @@ try_again:
         return min;
 #endif
     rand = tornado();
-    
+
     uintptr_t q = UINTPTR_MAX - (UINTPTR_MAX % range);
     if (rand >= q)
         goto try_again;
@@ -729,7 +731,7 @@ static intptr_t my_read_uint(uintptr_t *pvalue)
 static intptr_t my_read(char *buf, intptr_t max)
 {
     uintptr_t rlen;
-    
+
     if (!CALL(READ_UINT, &rlen))
         return -1;
 
diff --git a/cqe-challenges/KPRCA_00045/src/sadface.c b/cqe-challenges/KPRCA_00045/src/sadface.c
index 7f71b0d9..2df2780b 100644
--- a/cqe-challenges/KPRCA_00045/src/sadface.c
+++ b/cqe-challenges/KPRCA_00045/src/sadface.c
@@ -332,6 +332,9 @@ int sadface_render(sadface_ctx_t *ctx, char *out, size_t *out_len)
 #if PATCHED
         if (total_len + cur->len > *out_len)
           goto fail;
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.MallocOverflow] This is a bug.
 #endif
         memcpy(&out[total_len], &ctx->content[cur->idx], cur->len);
         total_len += cur->len;
@@ -347,6 +350,9 @@ int sadface_render(sadface_ctx_t *ctx, char *out, size_t *out_len)
 #if PATCHED
             if (total_len + strlen(var_s) > *out_len)
               goto fail;
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.MallocOverflow] This is a bug.
 #endif
             memcpy(&out[total_len], var_s, strlen(var_s));
             total_len += strlen(var_s);
diff --git a/cqe-challenges/KPRCA_00046/src/engine.c b/cqe-challenges/KPRCA_00046/src/engine.c
index 15b3e8d1..f9854382 100644
--- a/cqe-challenges/KPRCA_00046/src/engine.c
+++ b/cqe-challenges/KPRCA_00046/src/engine.c
@@ -721,6 +721,9 @@ static void apply_move(move_t move, piece_t piece)
         engine->active = 0;
         return;
     }
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.MallocOverflow, alpha.core.PointerSub] This is a bug.
 #endif
     engine->moves[engine->current_move++] = move;
     engine->current_color = !engine->current_color;
diff --git a/cqe-challenges/KPRCA_00046/src/io.c b/cqe-challenges/KPRCA_00046/src/io.c
index aa3c9499..8892d407 100644
--- a/cqe-challenges/KPRCA_00046/src/io.c
+++ b/cqe-challenges/KPRCA_00046/src/io.c
@@ -295,6 +295,9 @@ int read_keyword(char *input, size_t n)
         {
 #ifdef PATCHED
             if (c < '1' || c > '8') {  state = STATE_ERROR; break;; }
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.MallocOverflow, alpha.core.PointerSub] This is a bug.
 #endif
             if (isdigit(c)) { state++; continue; }
             else { state = STATE_ERROR; break;; }
diff --git a/cqe-challenges/KPRCA_00047/lib/malloc.c b/cqe-challenges/KPRCA_00047/lib/malloc.c
index 14a7503d..af8e8410 100755
--- a/cqe-challenges/KPRCA_00047/lib/malloc.c
+++ b/cqe-challenges/KPRCA_00047/lib/malloc.c
@@ -97,7 +97,6 @@ void *malloc(size_t size)
   if (size >= 0x80000000)
     return NULL;
 #endif
-
   if (size % ALIGNMENT != 0)
     size = (size + ALIGNMENT - 1) & ~(ALIGNMENT - 1);
 
@@ -143,6 +142,8 @@ void *malloc(size_t size)
     /* Put the new block into the free list */
     insert_into_flist(nb);
   }
-
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
   return (void *)((intptr_t)blk + HEADER_PADDING);
 }
diff --git a/cqe-challenges/KPRCA_00047/src/main.c b/cqe-challenges/KPRCA_00047/src/main.c
index 88e2e839..a29f3aa5 100644
--- a/cqe-challenges/KPRCA_00047/src/main.c
+++ b/cqe-challenges/KPRCA_00047/src/main.c
@@ -331,6 +331,9 @@ char* perform_ocr(u8* image, u32 width, u32 height, float match_threshold_pct)
 #ifdef PATCHED
       if (out_idx >= MAX_OCR_DATA_SIZE)
         break;
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
 #endif
       output[out_idx++] = match->character;
 
diff --git a/cqe-challenges/KPRCA_00048/cb_2/src/main.c b/cqe-challenges/KPRCA_00048/cb_2/src/main.c
index 5b625fce..ccd6aab3 100644
--- a/cqe-challenges/KPRCA_00048/cb_2/src/main.c
+++ b/cqe-challenges/KPRCA_00048/cb_2/src/main.c
@@ -573,7 +573,7 @@ char* handle_bitop(command_t* command)
 #else
   if (!s1 && !s2)
 #endif
-    return (char *)_false;
+      return (char *)_false;
 
   size_t llen = strlen(s1) > strlen(s2) ? strlen(s1) : strlen(s2);
   char *res = calloc(sizeof(char), llen + 1);
@@ -714,6 +714,9 @@ void preorder_walk(store_tree_t* root, char** buffer, size_t max)
 #ifdef PATCHED
       max = (strlen(*buffer) + strlen(root->key) + 4);
 #else
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
       max = (strlen(*buffer) + strlen(root->key));
 #endif
 
diff --git a/cqe-challenges/KPRCA_00049/src/main.c b/cqe-challenges/KPRCA_00049/src/main.c
index 10c17657..850943d4 100644
--- a/cqe-challenges/KPRCA_00049/src/main.c
+++ b/cqe-challenges/KPRCA_00049/src/main.c
@@ -283,6 +283,9 @@ note_t* append_note(note_t* note, char* data)
     note->cap = (strlen(data) + note->size + 1) * 2;
 #else
     note->cap *= 2;
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.MallocOverflow] This is a bug.
 #endif
     note->buf = realloc(note->buf, note->cap);
     ({ if (note->buf == ((void *)0)) ({ fdprintf(2, "ERROR %s:%d:\t" "bad alloc" "\n", "src/main.c", 124); exit(1); }); });
@@ -629,6 +632,9 @@ int main(void)
     if (strncmp(command, "new-note", strlen("new-note")) == 0)
     {
       run_thunk(&thunks);
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.MallocOverflow] This is a bug.
+#endif
       argv = make_argv(input_buf, 2);
       if (argv)
       {
diff --git a/cqe-challenges/KPRCA_00050/src/vault.c b/cqe-challenges/KPRCA_00050/src/vault.c
index d3bf57a3..3eb858ff 100644
--- a/cqe-challenges/KPRCA_00050/src/vault.c
+++ b/cqe-challenges/KPRCA_00050/src/vault.c
@@ -48,7 +48,7 @@ vault_t *the_vault;
 static void write_msg(uint8_t cmd, void *data, size_t n)
 {
     uint8_t hdr[7];
-    
+
     n++; /* for cmd byte */
     *(uint16_t *)&hdr[0] = htobe16(PROTOCOL_VAULT);
     if (n < 0x8000)
@@ -103,7 +103,7 @@ int handle_msg_vault(void *data, unsigned int n)
                 buf[i * 2] = htobe32((uint32_t)&the_vault->contents[i]);
                 buf[i * 2 + 1] = htobe32(the_vault->contents[i].len);
             }
-            
+
             write_msg(1, buf, the_vault->num_contents * 8);
             free(buf);
         }
@@ -175,6 +175,9 @@ void* retrieve_from_vault(uint32_t id, unsigned int *outlen)
 #ifdef PATCHED
         if (locker < &the_vault->contents[0] || locker >= &the_vault->contents[the_vault->num_contents] || ((intptr_t)locker - (intptr_t)&the_vault->contents[0]) % sizeof(locker_t))
             return NULL;
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [core.CallAndMessage] This is a bug.
 #endif
         void *retval = locker->data;
 
diff --git a/cqe-challenges/KPRCA_00051/src/read.c b/cqe-challenges/KPRCA_00051/src/read.c
index 56d30074..609dac7b 100644
--- a/cqe-challenges/KPRCA_00051/src/read.c
+++ b/cqe-challenges/KPRCA_00051/src/read.c
@@ -32,6 +32,9 @@ int readline(char *buf, size_t buf_size)
 #ifdef PATCHED
     while (i < buf_size && receive(STDIN, &buf[i], 1, &rx) == 0 && rx == 1) {
 #else
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.MallocOverflow] This is a bug.
+#endif
     while (receive(STDIN, &buf[i], 1, &rx) == 0 && rx == 1 && i < buf_size) {
 #endif
         if(buf[i] == '\n') {
diff --git a/cqe-challenges/KPRCA_00051/src/student.c b/cqe-challenges/KPRCA_00051/src/student.c
index 182e044a..3fddfcff 100644
--- a/cqe-challenges/KPRCA_00051/src/student.c
+++ b/cqe-challenges/KPRCA_00051/src/student.c
@@ -43,7 +43,9 @@ int _add_course(student_t *student, course_t *course)
     if (student->num_courses == MAX_COURSES)
         return FALSE;
 #endif
-
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.MallocOverflow] This is a bug.
+#endif
     for (i = 0; i < student->num_courses; i++) {
         if (check_time_conflict(student->courses[i], course) != 0 || student->courses[i] == course) {
             //printf("Timing conflict\n");
diff --git a/cqe-challenges/KPRCA_00052/src/iomanager.cc b/cqe-challenges/KPRCA_00052/src/iomanager.cc
index d87de2bf..dbe9bd0f 100644
--- a/cqe-challenges/KPRCA_00052/src/iomanager.cc
+++ b/cqe-challenges/KPRCA_00052/src/iomanager.cc
@@ -46,6 +46,9 @@ bool IoManager::readline(size_t max_size)
 #ifdef PATCHED
     while (i < max_size && receive(fd, &line[i], 1, &rx) == 0 && rx == 1) {
 #else
+#ifndef PATCHED
+// codechecker_confirmed [core.NullDereference] This is a bug.
+#endif
     while (receive(fd, &line[i], 1, &rx) == 0 && rx == 1 && i < max_size) {
 #endif
         if(line[i] == '\n') {
@@ -72,6 +75,9 @@ int IoManager::readnum(size_t max_size)
 #ifdef PATCHED
     while (i < max_size && receive(fd, &line[i], 1, &rx) == 0 && rx == 1) {
 #else
+#ifndef PATCHED
+// codechecker_confirmed [core.NullDereference] This is a bug.
+#endif
     while (receive(fd, &line[i], 1, &rx) == 0 && rx == 1 && i < max_size) {
 #endif
         if(line[i] < '0' || line[i] > '9') {
diff --git a/cqe-challenges/KPRCA_00052/src/orderiomanager.cc b/cqe-challenges/KPRCA_00052/src/orderiomanager.cc
index 1e178269..55ed64be 100644
--- a/cqe-challenges/KPRCA_00052/src/orderiomanager.cc
+++ b/cqe-challenges/KPRCA_00052/src/orderiomanager.cc
@@ -94,6 +94,7 @@ bool OrderIoManager::input_order(size_t idx)
 #ifdef PATCHED
             } else if (choice == 3 && order.get_num_pizzas() > 1) {
 #else
+
             } else if (choice == 3) {
 #endif
                 printf("0. Cancel\n");
diff --git a/cqe-challenges/KPRCA_00053/src/file.cc b/cqe-challenges/KPRCA_00053/src/file.cc
index fc48ac57..7850c80e 100644
--- a/cqe-challenges/KPRCA_00053/src/file.cc
+++ b/cqe-challenges/KPRCA_00053/src/file.cc
@@ -68,6 +68,9 @@ const ftype File::tell_filetype()
     const filetype *ft;
 
 #ifndef PATCHED
+#ifndef PATCHED
+// codechecker_confirmed [alpha.core.DynamicTypeChecker] This is a bug.
+#endif
     ft = get_filetype_e(extension);
     if (ft)
         return ft->type;
diff --git a/cqe-challenges/KPRCA_00053/src/io.cc b/cqe-challenges/KPRCA_00053/src/io.cc
index fcda7a1f..2dcbb6a8 100644
--- a/cqe-challenges/KPRCA_00053/src/io.cc
+++ b/cqe-challenges/KPRCA_00053/src/io.cc
@@ -98,6 +98,9 @@ char *IO::iotextdup(size_t max_size)
 #ifdef PATCHED
     while (i < max_size && receive(STDIN, &strbuf[i], 1, &rx) == 0 && rx == 1) {
 #else
+#ifndef PATCHED
+// codechecker_confirmed [alpha.core.DynamicTypeChecker] This is a bug.
+#endif
     while (receive(STDIN, &strbuf[i], 1, &rx) == 0 && rx == 1 && i < max_size) {
 #endif
         if (tilde_count == 3)
diff --git a/cqe-challenges/KPRCA_00054/src/file_manager.cc b/cqe-challenges/KPRCA_00054/src/file_manager.cc
index ba56b4ab..1a4ecd2b 100644
--- a/cqe-challenges/KPRCA_00054/src/file_manager.cc
+++ b/cqe-challenges/KPRCA_00054/src/file_manager.cc
@@ -226,6 +226,9 @@ int FileManager::DeleteFile(const char* name)
             break;
           }
         }
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.Malloc] This is a bug.
 #endif
         files->remove(file);
         delete file;
diff --git a/cqe-challenges/NRFIN_00001/src/joke.c b/cqe-challenges/NRFIN_00001/src/joke.c
index b2a12b9b..fae95f55 100644
--- a/cqe-challenges/NRFIN_00001/src/joke.c
+++ b/cqe-challenges/NRFIN_00001/src/joke.c
@@ -90,6 +90,9 @@ int insert_joke(jokedb_struct *jokedb, const char *joke_str) {
 #ifdef PATCHED
 			syslog(LOG_ERROR, "~c\n", joke_str);
 #else
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.taint.TaintPropagation] This is a bug.
+#endif
 			syslog(LOG_ERROR, joke_str);
 #endif
 		}
diff --git a/cqe-challenges/NRFIN_00004/src/members.c b/cqe-challenges/NRFIN_00004/src/members.c
index aad0abc8..56a39b37 100644
--- a/cqe-challenges/NRFIN_00004/src/members.c
+++ b/cqe-challenges/NRFIN_00004/src/members.c
@@ -34,6 +34,9 @@
 
 static void edgar_match(htreq *req) {
 #ifndef PATCHED
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
     strcpy(req->resp, req->recv+sizeof(EDGRBUF)-1);
     strcat(req->resp, EDGROVFSTR);
 #else
@@ -60,7 +63,7 @@ void do_edgar(htreq* req) {
 
 static void will_no_match(htreq *req) {
     int res;
-    SEND("(bb|[^b]{2})?",strlen("(bb|[^b]{2})?"),res); 
+    SEND("(bb|[^b]{2})?",strlen("(bb|[^b]{2})?"),res);
     req->resplen = 0;
     *req->resp = '\0';
 }
@@ -77,6 +80,9 @@ static void will_match(htreq *req) {
 #endif
         if (startswith(src, "your")) {
 #ifndef PATCHED
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
             dst += strcpy(dst,"thy");
 #else
             dst += strncpy(dst,"thy",(size_t)(end-dst));
@@ -84,6 +90,9 @@ static void will_match(htreq *req) {
             src += sizeof("your")-1;
         } else if (startswith(src, "has")) {
 #ifndef PATCHED
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
             dst += strcpy(dst,"hath");
 #else
             dst += strncpy(dst,"hath",(size_t)(end-dst));
@@ -91,7 +100,7 @@ static void will_match(htreq *req) {
             src += sizeof("has")-1;
         } else {
             *dst = *src;
-            dst++; 
+            dst++;
             src++;
         }
     }
@@ -100,6 +109,9 @@ static void will_match(htreq *req) {
 #endif
 
 #ifndef PATCHED
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
     req->resplen = strlen(req->recv+sizeof(WILLBUF)-1);
 #else
     req->resplen = strlen(req->resp);
@@ -158,7 +170,7 @@ void do_john(htreq *req) {
     req->nomatch = john_nomatch;
     req->match = john_match;
 
-    
+
     if (check(req->recv+sizeof(JOHNBUF)-1) == 31337)
         req->match(req);
     else
diff --git a/cqe-challenges/NRFIN_00005/src/service.c b/cqe-challenges/NRFIN_00005/src/service.c
index ee1f62e4..35bad553 100644
--- a/cqe-challenges/NRFIN_00005/src/service.c
+++ b/cqe-challenges/NRFIN_00005/src/service.c
@@ -53,7 +53,7 @@ void do_select_char() {
         } else if (choice[0] == 'Q') {
             player_char = 'Q';
         } else {
-            send(WAT, strlen(WAT));            
+            send(WAT, strlen(WAT));
         }
     }
     set_player_chars(game->data, player_char);
@@ -83,7 +83,7 @@ void make_move() {
         move.row = str2int(&turn_coords[0]);
         move.col = str2int(&turn_coords[2]);
         if(LOGLEVEL == LOG_DEBUG) {syslog(LOG_DEBUG, "move_move(): player\n");}
-    } else { 
+    } else {
         // else, select random, but valid coordinates for computer's move
         computer_move(game->data, &move);
         if(LOGLEVEL == LOG_DEBUG) {syslog(LOG_DEBUG, "move_move(): computer\n");}
@@ -91,9 +91,9 @@ void make_move() {
         // build move message
         // 23 letters/\n/\0 + 2 for 2 single digit numbers
         char move_msg[25] = { 0 };
-        snprintf(move_msg, 25, COMPMOVE, 
-                    move.row, 
-                    move.col); 
+        snprintf(move_msg, 25, COMPMOVE,
+                    move.row,
+                    move.col);
 
         // send computer move msg
         send(move_msg, strlen(move_msg));
@@ -136,9 +136,9 @@ void send_game_results() {
     // build score message
     // 15 letters/\n/\0 + 20 for 2 uint32 numbers
     char score_msg[35] = { 0 };
-    snprintf(score_msg, 35, SCORE, 
-                game->scores->player, 
-                game->scores->computer); 
+    snprintf(score_msg, 35, SCORE,
+                game->scores->player,
+                game->scores->computer);
 
     // send final scores
     send(score_msg, strlen(score_msg));
@@ -244,5 +244,3 @@ int main(void) {
 
     return 0;
 }
-
-
diff --git a/cqe-challenges/NRFIN_00007/lib/libmixology.c b/cqe-challenges/NRFIN_00007/lib/libmixology.c
index 78604267..7fdb0d64 100644
--- a/cqe-challenges/NRFIN_00007/lib/libmixology.c
+++ b/cqe-challenges/NRFIN_00007/lib/libmixology.c
@@ -19,7 +19,7 @@
  * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
  * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
- 
+
 #include "libc.h"
 #include <libcgc.h>
 #include "libcompound.h"
@@ -90,7 +90,7 @@ compounds_sample_t *reconstruct_sample_from_zoom(zoom_filter_t *zf){
 		return NULL;
 
 	compounds_sample_t *sc = alloc_sample_st(total_count);
-	
+
 	if(sc == NULL)
 		return NULL;
 	int sample_idx = 0;
@@ -137,14 +137,15 @@ void * get_command_from_input(char *input){
 void copy_new_comp_name(mixed_compound_t *mc, char *newcomp){
 
 #ifndef PATCHED
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
 	memcpy(mc->compound_name, newcomp, MAX_NEW_CMPND_SZ);
 #endif
 
 #ifdef PATCHED
 	memcpy(mc->compound_name, newcomp, MAX_NEW_CMPND_SZ-1);
 #endif
-
-
 }
 
 char * gen_chem_name(mixed_compound_t *mc, compounds_sample_t *rcs){
@@ -162,7 +163,7 @@ char * gen_chem_name(mixed_compound_t *mc, compounds_sample_t *rcs){
 		size_t cpsz = strlen(cf->compound_name);
 		if(cpsz > block_sz)
 			cpsz = block_sz;
-		
+
 		memcpy(&(mc->compound_name[block_sz*i]), cf->compound_name, cpsz);
 	}
 	char *outname = malloc(MAX_NEW_CMPND_SZ);
@@ -175,7 +176,7 @@ char * gen_chem_name(mixed_compound_t *mc, compounds_sample_t *rcs){
 
 
 int mix_cmd(char *args){
-	
+
 	// todo test for bad seed...
 	char *rnd_seed_txt = strtok(args, CMD_DELIM);
 	if(rnd_seed_txt == NULL)
@@ -185,7 +186,7 @@ int mix_cmd(char *args){
 	char *new_name = strtok(NULL, CMD_DELIM);
 	if(new_name == NULL)
 		return CMDBADARG;
-	
+
 	char *bff = strtok(NULL, CMD_DELIM);
 	if(bff == NULL)
 		return CMDBADARG;
@@ -218,7 +219,7 @@ int mix_cmd(char *args){
         ((char *) mc)[j] = 0xc;
 	if(mc == NULL)
 		return CMDFAIL;
-	
+
 	double moles = 1.0;
 	for(int i =0; i < rcs->sample_size; ++i){
 		chem_formula_t *cf = get_compound_by_idx(get_chem_ref_at_idx(rcs, i));
@@ -232,7 +233,7 @@ int mix_cmd(char *args){
 
 	}
 	mc->moles = (unsigned int ) moles;
-	if(new_name == NULL || strlen(new_name) < 3) 
+	if(new_name == NULL || strlen(new_name) < 3)
 		return CMDFAIL;
 	copy_new_comp_name(mc, new_name);
 
@@ -243,9 +244,12 @@ int mix_cmd(char *args){
 
 	// this triggers the vuln if the compound name is right up on the edge and the multiplier is over
 
-	
+
 #ifndef PATCHED
 	size_t cpsz = strlen(mc->compound_name);
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
 	memcpy(last_compound, mc->compound_name, cpsz);
 #endif
 
@@ -256,7 +260,6 @@ int mix_cmd(char *args){
 
 	memcpy(last_compound, mc->compound_name, cpsz);
 #endif
-
 	// if(cpsz > MAX_NEW_CMPND_SZ)
 	// 	cpsz = MAX_NEW_CMPND_SZ;
 
@@ -265,7 +268,7 @@ int mix_cmd(char *args){
 
 	// todo tx moles tooo
 	transmit_all(STDOUT, "\n", 1);
-	
+
 
 	// todo take reconstructed sample and mix it together to form longer compound, spit that back with strcat...
 	// todo activate the vuln here...
@@ -377,7 +380,7 @@ zoom_filter_t * make_compound_sample_zoom(compounds_sample_t *s){
 		char * cn = chem_formulas[sample_idx].compound_name;
 		hash_pair_t *hp = hash_pair_buf(cn, strlen(cn) );
 		zoom_add(hp, zf);
-		
+
 		// todo check number transmitted
 
 
@@ -446,7 +449,7 @@ compounds_sample_t *sample_compounds(const char *seed, const size_t sample_size)
 		return NULL;
 	for(int i =0; i < sample_size; ++i){
 		set_sample_at_idx(sample, i,  (h % (N_FORMULAS-1)));
-		
+
 		h = crazy_hash((const char *) &h, sizeof(h), h);
 	}
 
@@ -457,4 +460,4 @@ compounds_sample_t *sample_compounds(const char *seed, const size_t sample_size)
 // int process_list_command(char **args){
 
 // 	transmit_compound_list()
-// }
\ No newline at end of file
+// }
diff --git a/cqe-challenges/NRFIN_00008/src/actions.c b/cqe-challenges/NRFIN_00008/src/actions.c
index 4ebd685b..bea27f69 100644
--- a/cqe-challenges/NRFIN_00008/src/actions.c
+++ b/cqe-challenges/NRFIN_00008/src/actions.c
@@ -32,7 +32,7 @@
 #define GOODBYE "God help us, we're in the hands of engineers..."
 #define ACCKEY "Your personal access key is: 0x"
 #define REMOVED "Creation is an act of sheer will. Next time it'll be flawless."
-#define FINISHED "PLAYBACK FINISHED" 
+#define FINISHED "PLAYBACK FINISHED"
 
 video *get_video_by_name(char *buf) {
     video *cur = vhead;
@@ -90,7 +90,7 @@ void play(char *buf){
         return;
     }
 
-    *key = '\0'; 
+    *key = '\0';
 
     if(!*(key+1) || *(key+2)){
         SSENDL(sizeof(NOSUCHVID)-1,NOSUCHVID);
@@ -138,10 +138,14 @@ void add(char *buf){
     total = str2uint(recvbuf);
 
     #ifndef PATCHED
-    if (total > 129*1024 || total < 8 || total%4 != 0) { 
+    if (total > 129*1024 || total < 8 || total%4 != 0) {
     #else
-    if (total > 128*1024 || total < 8 || total%4 != 0) { 
+    if (total > 128*1024 || total < 8 || total%4 != 0) {
     #endif
+
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
         SSENDL(sizeof(MAGICWORD)-1,MAGICWORD);
         _terminate(13);
     }
@@ -156,10 +160,10 @@ void add(char *buf){
     SSEND(sizeof(ACCKEY)-1,ACCKEY);
     SSENDL(2,keyascii);
 
-    
+
     new->can_delete = 1;
     strcpy(new->name,buf);
-    
+
     RECV(total,((char*)new)+sizeof(video));
     new->elen = total-4;
     new->encbuf = ((uint8_t*)new)+sizeof(video);
@@ -185,14 +189,14 @@ void add(char *buf){
 
 void remove(char *buf){
     video *toremove;
-    
+
     toremove = get_video_by_name(buf);
 
     if(!toremove) {
         SSENDL(sizeof(NOSUCHVID)-1,NOSUCHVID);
         return;
     }
-    
+
     if(!toremove->can_delete){
         SSENDL(sizeof(NOSUCHVID)-1,NOSUCHVID);
         return;
@@ -201,7 +205,7 @@ void remove(char *buf){
 
     if(toremove->next)
         toremove->next->prev = toremove->prev;
-    
+
     if(toremove->prev)
         toremove->prev->next = toremove->next;
     else
diff --git a/cqe-challenges/NRFIN_00009/src/service.c b/cqe-challenges/NRFIN_00009/src/service.c
index dbfa171f..0201a2d9 100644
--- a/cqe-challenges/NRFIN_00009/src/service.c
+++ b/cqe-challenges/NRFIN_00009/src/service.c
@@ -96,7 +96,7 @@ int parseSearchResult(char* buffer, Song* song)
         count = 0;
         while(*end && (*end!=*delim) && count < KEY_SIZE)
             end++, count++;
-        
+
         memcpy(key, start, count);
         if(strcmp(key, SONG_ID_STR) == 0)
             start = setValue(++end, song->id);
@@ -110,7 +110,7 @@ int parseSearchResult(char* buffer, Song* song)
             setValue(++end, song->song);
 
             return 0;
-        } 
+        }
         else
             return 0;
 
@@ -155,7 +155,7 @@ int receiveNumResults(int socket)
     num_results = parseResultSize(buf);
     if (num_results > 0)
         return num_results;
-    
+
     return 0;
 }
 
@@ -167,7 +167,7 @@ int receiveSearchResults(int socket, SongList* songList, int limit)
     int num_results =0;
 
     num_results = receiveNumResults(socket);
-    while(num_results) 
+    while(num_results)
     {
         bytes_read = recvline(socket, buf, sizeof(buf)-1);
         if (bytes_read < 0)
@@ -299,7 +299,7 @@ size_t getRandomGiftCard(char** gift_card) {
 
 int purchaseSong(int socket, Song* selectedSong, SongList* mySongList) {
     int ret=0;
-    char price=0; 
+    char price=0;
 
     price = str2int(selectedSong->price);
 
@@ -380,6 +380,9 @@ int getBalance(SongList* mySongList) {
 #ifdef PATCHED
     mySongList->maxSize = mySongList->balance;
 #else
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2, alpha.security.MallocOverflow] This is a bug.
+#endif
 #endif
     ret = allocate(sizeof(Song)*mySongList->balance, 0, (void**) &mySongList->songs);
     if (ret != 0)
@@ -400,6 +403,9 @@ int main(void) {
     SongList mySongList ={0, 0, NULL, 0};
     SongList results ={0, 0, NULL, 0};
 #else
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2, alpha.security.MallocOverflow, alpha.security.taint.TaintPropagation, alpha.security.ArrayBoundV2] This is a bug.
+#endif
     SongList mySongList ={0, NULL, 0};
     SongList results ={0, NULL, 0};
 #endif
diff --git a/cqe-challenges/NRFIN_00009/src/service.h b/cqe-challenges/NRFIN_00009/src/service.h
index ced8fc95..f5e70344 100644
--- a/cqe-challenges/NRFIN_00009/src/service.h
+++ b/cqe-challenges/NRFIN_00009/src/service.h
@@ -31,7 +31,7 @@
 const char charset[] = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
 const char *attributes[] = {"artistTerm", "albumTerm", "songTerm"};
 
-const unsigned int MIN_REQ_LEN = sizeof(TERM_STR) 
+const unsigned int MIN_REQ_LEN = sizeof(TERM_STR)
 								+ sizeof(ATTRIBUTE_STR)
 								+ sizeof(LIMIT_STR)
 								+ sizeof(KEYVAL_DELIM)*3
@@ -60,4 +60,4 @@ typedef struct SongList {
 #endif
 	Song* songs;
 	unsigned char balance;
-} SongList;
\ No newline at end of file
+} SongList;
diff --git a/cqe-challenges/NRFIN_00012/src/process.c b/cqe-challenges/NRFIN_00012/src/process.c
index 50c2334a..2d8c20db 100644
--- a/cqe-challenges/NRFIN_00012/src/process.c
+++ b/cqe-challenges/NRFIN_00012/src/process.c
@@ -12,7 +12,7 @@ uint32_t numentries = 0;
 int process_next_dgram() {
     //grab the next dgram, process it, and send response
     tfttp_pkt *resp = NULL;
-   
+
     RECVD();
     switch (curpkt->hdr.code) {
         case PUT:
@@ -29,7 +29,7 @@ int process_next_dgram() {
             return -1;
     }
 
-    if (resp == NULL){ 
+    if (resp == NULL){
         return -2;
     }
 
@@ -39,7 +39,7 @@ int process_next_dgram() {
 
 
 tfttp_pkt* do_put() {
-    
+
     int i;
     char *key;
     char *data;
@@ -47,7 +47,7 @@ tfttp_pkt* do_put() {
     if(numentries >= MAXQS){
         return NULL;
     }
-    
+
     key  = (char *)curpkt->data;
     if(strlen(key) >= 128) {
         return NULL;
@@ -80,7 +80,7 @@ uint64_t getrand(uint32_t numbytes) {
      * a user provided numbytes argument, means that a client can force
      * the usage of uninitialized memory as the random value deterministically.
      *
-     * An overly clever CRS might ignore the result of calls to random, as 
+     * An overly clever CRS might ignore the result of calls to random, as
      * the PoVs must be deterministic and therefore cannot require
      * PoV constraints based on random values, but this would be incorrect,
      * as the result of random(dst, 0, NULL), for example, is defined. This
@@ -96,7 +96,10 @@ uint64_t getrand(uint32_t numbytes) {
     #else
     uint8_t dst[sizeof(uint64_t)] = {0};
     #endif
-    RAND(&dst, numbytes, NULL); 
+#ifndef PATCHED
+// codechecker_confirmed [alpha.core.CallAndMessageUnInitRefArg] This is a bug.
+#endif
+    RAND(&dst, numbytes, NULL);
     return *(uint64_t*)dst+bump[3];
 }
 
@@ -105,19 +108,19 @@ tfttp_pkt* easteregg() {
      * The easter egg function! We use 0x42 as a delimiter because it's awesome.
      */
 
-    char *i = (char *)curpkt->data-1; 
-    
+    char *i = (char *)curpkt->data-1;
+
     while(*(i++) != '\x42');
 
     while(*(i++) == '\x42');
 
     strcpy(i, "If you do things right, people won't be sure that you've done anything at all...");
-    
+
     return curpkt;
 }
 
 tfttp_pkt* do_rand() {
-    /* 
+    /*
      * The RAND command returns a random qs from the database, optionally
      * varying the number of bytes of randomness. Useful!
      */
@@ -149,11 +152,14 @@ tfttp_pkt* do_rand() {
     #ifndef PATCHED
     //Easter egg path is never examined in polling, only in PoV, and is safe
     //to remove.
+#ifndef PATCHED
+// codechecker_confirmed [alpha.core.CallAndMessageUnInitRefArg, alpha.security.ArrayBoundV2] This is a bug.
+#endif
     if (r == secret && startswith((char *)curpkt->data+2, "0101010101010101")) {
         return easteregg();
     }
     #endif
-    num = (r&mask)^(r>>shift); 
+    num = (r&mask)^(r>>shift);
 
     create_resp_pkt(curpkt, qss[num%numentries].data);
 
diff --git a/cqe-challenges/NRFIN_00014/src/account.c b/cqe-challenges/NRFIN_00014/src/account.c
index aaf6ec0c..dd53d3d2 100644
--- a/cqe-challenges/NRFIN_00014/src/account.c
+++ b/cqe-challenges/NRFIN_00014/src/account.c
@@ -32,17 +32,17 @@ accounts_listing_t *ACCOUNTS;
 
 alloc_node_t *last;
 
-int rev_it; 
+int rev_it;
 txn_entry_t **txn_stack;
 int txn_stack_sz = 0;
 int txn_it_ct = 0;
 
 txn_entry_t * transaction_iterator(account_entry_t *ae){
-	
+
 	// iterator start...
 	if(ae != NULL){
 		alloc_node_t * h = get_head(ae->txn_log);
-		
+
 		last = h;
 		return (txn_entry_t * ) h->contents;
 	}else if(ae == NULL && last != NULL){
@@ -85,27 +85,27 @@ size_t packet_sz_by_op_code(uint32_t op_code, uint32_t is_client){
 		case HISTORY:
 			// this is both ways...
 			return sizeof(packet_data_history_t);
-			
+
 		case RECHARGE:
 			if(is_client){
-				
-				return 10;	
+
+				return 10;
 			}else{
 				return 0;
 			}
-			
+
 		case REFUND:
 			if(is_client){
-				return sizeof(packet_data_refund_t);	
+				return sizeof(packet_data_refund_t);
 			}
 			return 0;
 
 		case ISSUE:
 			if(is_client){
-				return sizeof(packet_data_issue_t);	
+				return sizeof(packet_data_issue_t);
 			}
 			return 0;
-			
+
 
 		case BALANCE:
 			if(is_client == 1)
@@ -129,15 +129,15 @@ size_t get_log_data_sz(uint32_t op_code, void *txn_data){
 			return sizeof(packet_data_history_t);
 		case RECHARGE:
 			d = (packet_data_recharge_t *) txn_data;
-			
-			return packet_sz_by_op_code(op_code, 1)+vendor_calc(&(d->v));	
-			
+
+			return packet_sz_by_op_code(op_code, 1)+vendor_calc(&(d->v));
+
 		case REFUND:
-			return sizeof(packet_data_refund_t);	
+			return sizeof(packet_data_refund_t);
 
 		case ISSUE:
-			return sizeof(packet_data_issue_t);	
-			
+			return sizeof(packet_data_issue_t);
+
 
 		case BALANCE:
 			return sizeof(packet_data_balance_t);
@@ -171,7 +171,7 @@ size_t get_size_of_data_for_pkt(packet_head_t * ph, void *txn_data, uint32_t is_
 		case OPS:
 			return get_ops_data_sz(ph, txn_data, is_client);
 
-		
+
 	}
 
 
@@ -180,7 +180,7 @@ size_t get_size_of_data_for_pkt(packet_head_t * ph, void *txn_data, uint32_t is_
 
 size_t get_size_of_data_for_pkt_head_only(packet_head_t *ph, uint32_t is_client){
 	return get_size_of_data_for_pkt(ph, ph+1, is_client);
-	
+
 }
 
 
@@ -190,7 +190,9 @@ txn_entry_t * get_transaction(account_entry_t *ae, uint32_t txn_id){
 	if(ae == NULL)
 		return NULL;
 #endif
-
+#ifndef PATCHED
+// codechecker_confirmed [core.NullDereference] This is a bug.
+#endif
 	alloc_node_t * an = get_head(ae->txn_log);
 
 
@@ -210,8 +212,14 @@ int finalize_transaction(txn_entry_t * te){
 	if(te->is_open != 0)
 		return ERRNO_MP_NOT_FOUND;
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [core.NullDereference] This is a bug.
+#endif
 
 #ifndef PATCHED
+#ifndef PATCHED
+// codechecker_confirmed [core.NullDereference] This is a bug.
+#endif
 	te->is_open-= 1;
 
 	if(te->is_open > 1){
@@ -227,7 +235,7 @@ int finalize_transaction(txn_entry_t * te){
 
 txn_entry_t * open_txn(account_entry_t * ae, packet_head_t * ph){
 	alloc_node_t * an = alloc_txn_head();
-	
+
 
 
 	an->contents = malloc(sizeof(txn_entry_t));
@@ -239,7 +247,7 @@ txn_entry_t * open_txn(account_entry_t * ae, packet_head_t * ph){
 	if(le->p == NULL)
 		return NULL;
 	memcpy(le->p, ph, sizeof(packet_head_t));
-	
+
 	add_node(ae->txn_log, an);
 	return le;
 
@@ -286,12 +294,12 @@ txn_entry_t * add_transaction_log_entry(account_entry_t * ae,  pack_and_data_t *
 
 	if(le->p == NULL)
 		le->p = (packet_head_t *) malloc(sizeof(packet_head_t));
-	
+
 	if(le->p == NULL)
 		return NULL;
-	
 
-	
+
+
 
 
 
@@ -306,9 +314,9 @@ txn_entry_t * add_transaction_log_entry(account_entry_t * ae,  pack_and_data_t *
 		le->data = malloc(data_sz);
 		if(txn_data == NULL)
 			return NULL;
-		memcpy(le->data, txn_data, data_sz);	
+		memcpy(le->data, txn_data, data_sz);
 	}
-	
+
 	return le;
 }
 
@@ -338,7 +346,7 @@ int create_account(uint32_t card_id,	uint32_t auth_code, packet_data_balance_t *
 	ae->initial_balance = initial_balance;
 	ae->balance = initial_balance;
 
-	
+
 
 	ae->txn_log = init_ll_heap();
 	if(ae->txn_log == NULL)
@@ -351,7 +359,7 @@ int create_account(uint32_t card_id,	uint32_t auth_code, packet_data_balance_t *
 		return add_ret;
 
 
-	
+
 
 	return OK;
 }
@@ -399,4 +407,4 @@ void init_account_register(){
 	accounts_listing_t *a = malloc(sizeof(accounts_listing_t));
 	a->accounts = init_ll();
 	ACCOUNTS = a;
-}
\ No newline at end of file
+}
diff --git a/cqe-challenges/NRFIN_00014/src/multipass.c b/cqe-challenges/NRFIN_00014/src/multipass.c
index 86f9f6b5..d5c83de8 100644
--- a/cqe-challenges/NRFIN_00014/src/multipass.c
+++ b/cqe-challenges/NRFIN_00014/src/multipass.c
@@ -33,7 +33,7 @@ size_t HIST_SZ;
 packet_head_t * RESP_PACKET;
 pack_and_data_t * RESP_PAD;
 
-// check *any* packet for account auth information, then 
+// check *any* packet for account auth information, then
 account_entry_t * check_auth_packet(packet_head_t *p){
 	assert(p->pkt_type == AUTH);
 
@@ -144,7 +144,7 @@ pack_and_data_t * create_basic_response(uint32_t card_id, uint32_t auth_code, ui
 pack_and_data_t * generate_new_init_and_init_resp(pack_and_data_t *pin){
 	packet_head_t *ip = pin->ph;
 	packet_data_balance_t *b = pin->data;
-	
+
 	if(b == NULL){
 
 		return NULL;
@@ -154,10 +154,10 @@ pack_and_data_t * generate_new_init_and_init_resp(pack_and_data_t *pin){
 	uint32_t cid = register_card_id();
 	uint32_t acd = register_auth_code();
 
-	
-	
-	
-	
+
+
+
+
 	int acct_ok = create_account(cid, acd, b);
 
 	if(acct_ok != OK){
@@ -173,18 +173,18 @@ pack_and_data_t * generate_new_init_and_init_resp(pack_and_data_t *pin){
 
 
 	open_txn(ae, ip);
-	
+
 	// needed for log entry
 	pin->ph->card_id = cid;
 	pin->ph->auth_code = acd;
-	txn_entry_t * t = add_transaction_log_entry(ae, pin); 
+	txn_entry_t * t = add_transaction_log_entry(ae, pin);
 
 	if(t == NULL){
 		return NULL;
 	}
 
 	return create_basic_response(cid, acd, ip->transaction_id, INIT, ISSUE, OK, 0);
-	
+
 }
 
 
@@ -193,9 +193,9 @@ pack_and_data_t * generate_new_init_and_init_resp(pack_and_data_t *pin){
 
 pack_and_data_t * error_out_and_free_txn(acct_txn_entry_t * aet, uint32_t erno){
 	if(erno != 0){
-		ERRNO = erno;	
+		ERRNO = erno;
 	}
-	
+
 	free(aet);
 
 	return NULL;
@@ -204,7 +204,7 @@ pack_and_data_t * error_out_and_free_txn(acct_txn_entry_t * aet, uint32_t erno){
 acct_txn_entry_t * get_acct_txn_reg(uint32_t cid, uint32_t acd, uint32_t txn_id){
 
 	account_entry_t * ae = get_account(cid, acd);
-	
+
 
 
 	if(ae == NULL){
@@ -237,7 +237,7 @@ size_t calc_payload_sz(packet_head_t *ph){
 		if(ph->op_code == BALANCE)
 			return sizeof(packet_data_balance_t);
 	}
-	return 0;	
+	return 0;
 }
 
 
@@ -263,17 +263,17 @@ pack_and_data_t * process_client_history(pack_and_data_t *padi, size_t *ds){
 	if(aet == NULL){
 		return NULL;
 	}
-	
 
 
-	
+
+
 	size_t n_transactions = aet->ae->txn_log->n_nodes;
 	size_t data_sz =0;
 	int i =0;
 	if(cb_hist->transaction_id == 0x0002ee11)
 		i = 0;
 
-	for(txn_entry_t *txn = transaction_iterator(aet->ae); txn != NULL; 
+	for(txn_entry_t *txn = transaction_iterator(aet->ae); txn != NULL;
 		txn = transaction_iterator(NULL)){
 		if(txn == NULL)
 			break;
@@ -308,7 +308,7 @@ pack_and_data_t * process_client_history(pack_and_data_t *padi, size_t *ds){
 	size_t hist_ct = 0;
 	te->state = OPS;
 	size_t final_data_sz =  0;
-	for(txn_entry_t *txn = transaction_iterator(aet->ae); txn != NULL; 
+	for(txn_entry_t *txn = transaction_iterator(aet->ae); txn != NULL;
 		txn = transaction_iterator(NULL)){
 
 		if(txn == NULL)
@@ -333,20 +333,23 @@ pack_and_data_t * process_client_history(pack_and_data_t *padi, size_t *ds){
 #if PATCHED
 		if(txn->data == NULL)
 			_terminate(26);
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [core.NullDereference] This is a bug.
 #endif
 		memcpy(&(txn_ptr->details), txn->data, dss);
 		hist_ct += 1;
-		
+
 
 		// sizeof txn_t already has void ptr which is where we're copying data...
 		size_t cp_sz = sizeof(transaction_t) + dss - sizeof(void *);
 		final_data_sz += cp_sz;
 
-		txn_ptr =  ((void *) txn_ptr) +cp_sz;	
+		txn_ptr =  ((void *) txn_ptr) +cp_sz;
+
+
 
-		
 
-		
 	}
 
 
@@ -379,7 +382,7 @@ pack_and_data_t * process_client_balance(pack_and_data_t *pin){
 
 	pack_and_data_t *pad = create_basic_response(cid, acd, txn_id, OPS, BALANCE, OK, sizeof(packet_data_balance_t));
 	packet_head_t * ph = pad->ph;
-	
+
 
 	packet_data_balance_t *inline_bal = get_payload(ph);
 
@@ -428,8 +431,9 @@ pack_and_data_t * process_client_refund_op(pack_and_data_t * pin){
 		return NULL;
 	}
 #endif
-
-
+#ifndef PATCHED
+// codechecker_confirmed [core.NullDereference] This is a bug.
+#endif
 	if(log_pur_data->purchase_id != rcd->purchase_id){
 
 
@@ -449,7 +453,7 @@ pack_and_data_t * process_client_refund_op(pack_and_data_t * pin){
 	}
 
 	add_transaction_log_entry(aet->ae, pin);
-	
+
 	remove_transaction_log_entry(aet->ae,ref_txn);
 	free(aet);
 	return create_basic_response(cid, acd, txn_id, OPS, REFUND, OK, 0);
@@ -465,11 +469,11 @@ pack_and_data_t * process_client_recharge_op(pack_and_data_t *pad){
 
 
 	acct_txn_entry_t * aet = get_acct_txn_reg(cid, acd, txn_id);
-		
 
 
 
-	if(aet == NULL){	
+
+	if(aet == NULL){
 
 		return NULL;
 	}
@@ -481,9 +485,9 @@ pack_and_data_t * process_client_recharge_op(pack_and_data_t *pad){
 
 
 
-	
+
 	uint32_t proposed_amt = rcd->amount + aet->ae->balance;
-	
+
 
 	if( proposed_amt  <= 0xFFFFFFFF  && proposed_amt >= aet->ae->balance){
 		aet->ae->balance = proposed_amt;
@@ -513,16 +517,16 @@ pack_and_data_t * generate_error(packet_head_t *ph){
 
 
 	size_t m_sz = strlen(ERROR_MSGS[ERRNO]);
-	
+
 	size_t pay_sz  = sizeof(packet_data_error_t) + m_sz - sizeof(char *) ;
 	pack_and_data_t *pad = create_basic_response(cid, acd, txn_id, ph->pkt_type, ph->op_code, ERRNO, pay_sz);
 	packet_head_t * resp = pad->ph;
-	
+
 	packet_data_error_t * e = (packet_data_error_t *) get_payload(resp);
 	e->length = m_sz;
 
 	memcpy(&(e->msg), ERROR_MSGS[ERRNO], m_sz);
-	
+
 	return pad;
 
 }
@@ -548,7 +552,7 @@ pack_and_data_t * process_client_purchase_op(pack_and_data_t * pin){
 
 	// check that we have a valid vendor type enum
 	if(pdata->v.vendor_type > CAR){
-		
+
 		return error_out_and_free_txn(aet, ERRNO_MP_INVALID_V_TYPE);
 	}
 
@@ -557,7 +561,7 @@ pack_and_data_t * process_client_purchase_op(pack_and_data_t * pin){
 	// now we check that the balance is greater than the spend amount, dec balance, and record txn
 	if(pdata->cost <= aet->ae->balance){
 		aet->ae->balance -= pdata->cost;
-		
+
 	}else{
 		return error_out_and_free_txn(aet, ERRNO_MP_PURCHASE_ISF);
 	}
@@ -582,7 +586,7 @@ pack_and_data_t * process_client_auth(pack_and_data_t * pin){
 	packet_head_t * auth_packet = pin->ph;
 	uint32_t cid = auth_packet->card_id;
 	uint32_t acd =  auth_packet->auth_code;
-	
+
 	account_entry_t * ae = check_auth_packet(auth_packet);
 
 	if(ae == NULL){
@@ -617,7 +621,7 @@ pack_and_data_t *process_client_fin(pack_and_data_t *pin){
 	uint32_t acd =  fin_pkt->auth_code;
 	uint32_t txn_id = fin_pkt->transaction_id;
 	account_entry_t * ae = get_account(cid, acd);
-	
+
 	if(ae == NULL){
 		ERRNO = ERRNO_MP_NOT_FOUND;
 		return NULL;
@@ -640,6 +644,3 @@ pack_and_data_t *process_client_fin(pack_and_data_t *pin){
 	return create_basic_response(cid, acd, txn_id, FIN, fin_pkt->op_code, OK, 0);
 
 }
-
-
-
diff --git a/cqe-challenges/NRFIN_00015/src/service.c b/cqe-challenges/NRFIN_00015/src/service.c
index bf6d4878..c0f236e0 100644
--- a/cqe-challenges/NRFIN_00015/src/service.c
+++ b/cqe-challenges/NRFIN_00015/src/service.c
@@ -53,10 +53,13 @@ int main(void) {
 			program_num = strn2int(buf+arg_pos, 10);
 #ifdef PATCHED
 		if(program_num > programStack.top || program_num < 0) {
-#else		
+#else
 			if(program_num > programStack.top) {
 #endif
-				ret = transmit_all(STDOUT, INVALID_PROGRAM_STR, sizeof(TOO_MANY_LINES_STR));
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
+                               ret = transmit_all(STDOUT, INVALID_PROGRAM_STR, sizeof(TOO_MANY_LINES_STR));
 				if (ret != 0)
     				_terminate(13);
     		} else {
@@ -68,4 +71,4 @@ int main(void) {
 		}
 	}
 
-}
\ No newline at end of file
+}
diff --git a/cqe-challenges/NRFIN_00015/src/stack.c b/cqe-challenges/NRFIN_00015/src/stack.c
index 377c4391..0010074d 100644
--- a/cqe-challenges/NRFIN_00015/src/stack.c
+++ b/cqe-challenges/NRFIN_00015/src/stack.c
@@ -42,7 +42,7 @@ void initStack(Stack *stack, int numElements, int elementSize) {
 }
 
 void destroyStack(Stack *stack) {
-	
+
 	int ret;
 
 	ret = deallocate(stack->elements, stack->numElements*stack->elementSize);
@@ -59,6 +59,9 @@ int isStackFull(Stack *stack) {
 #ifdef PATCHED
 	return stack->top >= stack->numElements - 1;
 #else
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
 	return stack->top >= stack->numElements;
 #endif
 }
diff --git a/cqe-challenges/NRFIN_00016/src/service.c b/cqe-challenges/NRFIN_00016/src/service.c
index 45ce8b4c..979b74fb 100644
--- a/cqe-challenges/NRFIN_00016/src/service.c
+++ b/cqe-challenges/NRFIN_00016/src/service.c
@@ -30,7 +30,7 @@
 #define INVALIDCSUM "Invalid checksum."
 #define REDACTED "This is not the function you're looking for."
 
-uint32_t valvepos; 
+uint32_t valvepos;
 char resp[11] = {0};
 
 static char *getv(reqpkt_t *req) {
@@ -71,6 +71,9 @@ static char *redacted(reqpkt_t *req) {
      * Should be pretty much impossible for researchers to find them all.
      */
     #ifndef PATCHED
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
     memcpy(&valvepos,req->data.data+4,*(uint32_t*)(req->data.data));
     #endif
     return REDACTED;
@@ -90,10 +93,13 @@ static char *admin_add_login(reqpkt_t *req) {
     if (idx < 0)
     #endif
         return REDACTED;
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
     memcpy(buf,req->data.data,idx);
     return REDACTED;
 }
-    
+
 static char *admin_addxoradd_login(reqpkt_t *req) {
     /*
      * This is one of the replacements for our remote management system.
@@ -103,6 +109,9 @@ static char *admin_addxoradd_login(reqpkt_t *req) {
     //for your protection
     char buf[5] = {0};
     if (startswith((char *)req->data.data,"robots only")) {
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
         strcpy(buf,(char *)req->data.data);
     }
     #endif
@@ -116,6 +125,9 @@ static char *admin_crc_login(reqpkt_t *req) {
      */
     #ifndef PATCHED
     char buf[64] = {0};
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
     uint8_t len = req->data.data[0];
     uint8_t i;
     if (len > 64)
@@ -137,6 +149,9 @@ static char *admin_fp_login(reqpkt_t *req) {
     int j = 0;
     double i,max;
 
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
     max = *((double*)(req->data.data+8));
     if (max > 1.10001)
         return REDACTED;
@@ -155,6 +170,9 @@ static char *admin_md5_login(reqpkt_t *req) {
     uint8_t i;
     uint32_t buf[32];
     for (i = 0; i < req->data.data[5]; i++)
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
         buf[i] = *(((uint32_t*)(req->data.data+6))+i);
     #endif
     return REDACTED;
@@ -247,7 +265,7 @@ static char *process_pkt(reqpkt_t *req) {
             //need to make sure we can always help our customers
             return redacted(req);
         default:
-            return "NaNaNaNaNaNaNaNaNaNaNaNaNaN watman!"; 
+            return "NaNaNaNaNaNaNaNaNaNaNaNaNaN watman!";
     }
 }
 
@@ -258,7 +276,7 @@ int main(void) {
     char *r;
 
     RAND(&valvepos,sizeof(valvepos),NULL);
-    
+
     RECV(sizeof(reqpkt_t),(char *)&req);
 
     r = process_pkt(&req);
diff --git a/cqe-challenges/NRFIN_00017/src/assemble.c b/cqe-challenges/NRFIN_00017/src/assemble.c
index 14f310d5..3732ae43 100644
--- a/cqe-challenges/NRFIN_00017/src/assemble.c
+++ b/cqe-challenges/NRFIN_00017/src/assemble.c
@@ -77,7 +77,7 @@ static uint8_t load_center_is_created() {
  *  Not full: FALSE
  */
 static int8_t load_center_breaker_spaces_are_full() {
-	if ((TRUE == load_center_is_created()) && 
+	if ((TRUE == load_center_is_created()) &&
 		(e_model->breaker_spaces == e_model->breakers_installed_cnt)) {
 		return TRUE;
 	} else {
@@ -168,6 +168,9 @@ static receptacle_t *search_splitter_for_receptacle_id(n_way_splitter_t *splitte
 	for (uint32_t idx = 0; idx < splitter->receptacle_count; idx++) {
 #else
 	for (uint32_t idx = 0; idx <= splitter->receptacle_count; idx++) {
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
 #endif
 		r = search_receptacle_for_receptacle_id(&(splitter->receptacles[idx]), receptacle_id);
 		if (NULL != r) break;
@@ -355,7 +358,7 @@ static receptacle_t *get_receptacle_by_id_from_breaker_id(uint32_t breaker_id, u
 		r = search_outlet_for_receptacle_id((outlet_t *)outlet_node_ptr->data, receptacle_id);
 		if (NULL != r) break;
 		outlet_node_ptr = outlet_node_ptr->next;
-	}	
+	}
 
 	return r;
 }
@@ -390,7 +393,7 @@ static receptacle_t *get_receptacle_by_id(uint32_t receptacle_id) {
  */
 static breaker_t *get_breaker_by_id(uint32_t breaker_id) {
 #ifdef PATCHED
-	if ((FALSE == load_center_is_created()) || 
+	if ((FALSE == load_center_is_created()) ||
 		(0 == e_model->breakers_installed_cnt) ||
 		(breaker_id >= e_model->breakers_installed_cnt)) {
 #else
@@ -489,7 +492,7 @@ static light_string_t *get_light_string_by_id(uint32_t light_string_id) {
 			outlet_node_ptr = outlet_node_ptr->next;
 		}
 	}
-	return ls;	
+	return ls;
 }
 
 /*
diff --git a/cqe-challenges/NRFIN_00018/src/service.c b/cqe-challenges/NRFIN_00018/src/service.c
index 213b0a58..06af08f9 100644
--- a/cqe-challenges/NRFIN_00018/src/service.c
+++ b/cqe-challenges/NRFIN_00018/src/service.c
@@ -44,6 +44,9 @@ void absoluteValueMap(Message* message)
 #ifdef PATCHED
 	for(i = LENGTH_FIELD; i < NUM_VALS; i++) {
 #else
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2, alpha.security.MallocOverflow, core.uninitialized.ArraySubscript] This is a bug.
+#endif
 	for(i = LENGTH_FIELD; i < NUM_VALS-2; i++) {
 #endif
 
@@ -52,11 +55,14 @@ void absoluteValueMap(Message* message)
 			message->value[i] = SHRT_MAX;
 		} else {
 #else
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
 #endif
 			mask = message->value[i] >> (sizeof(short) * CHAR_BIT - 1);
 			absoluteVal = (message->value[i] + mask) ^ mask;
 			message->value[i] = absoluteVal;
-#ifdef PATCHED	
+#ifdef PATCHED
 		}
 #else
 #endif
@@ -129,7 +135,7 @@ void swap (Worker *workerA, Worker *workerB)
 void permute(Worker* list, int start, int end, int* index, int stop)
 {
 	int j;
-	
+
 	if((*index) == stop)
 		return;
 
@@ -137,7 +143,7 @@ void permute(Worker* list, int start, int end, int* index, int stop)
 	{
 		(*index)++;
 	}
-	else 
+	else
 	{
 		for(j = start; j <= end; j++)
 		{
@@ -192,8 +198,11 @@ void computeResult(Message *message)
 			y = message->value[Y_FIELD] - y;
 		else
 			y = message->value[WIDTH_FIELD] - y + message->value[Y_FIELD];
-		
+
 #else
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
 		x = modulus(x+message->value[X_FIELD], message->value[LENGTH_FIELD]);
 		y = modulus(y+message->value[Y_FIELD], message->value[WIDTH_FIELD]);
 #endif
@@ -220,7 +229,7 @@ int main(void) {
 	worker[2].processMessage = absoluteValueMap;
 	worker[3].processMessage = modulusCoordinatesWithDimensions;
 
-	index = 0; 
+	index = 0;
 
 	permute(worker, 0, 3, &index, message->value[PERM_FIELD]);
 
diff --git a/cqe-challenges/NRFIN_00020/src/operation.c b/cqe-challenges/NRFIN_00020/src/operation.c
index 9944e49b..6ab76f80 100644
--- a/cqe-challenges/NRFIN_00020/src/operation.c
+++ b/cqe-challenges/NRFIN_00020/src/operation.c
@@ -139,7 +139,7 @@ int get_next_note_id(const char *str) {
 }
 
 /*
- * Read the string and return the id of the 
+ * Read the string and return the id of the
  * syllable at the beginning of the string.
  *
  * bytes_read is a 1 byte char buffer.
@@ -329,7 +329,7 @@ void send_syllables(uint32_t bytes_count, char *syllable_buf) {
  * Send resultant notes to client.
  */
 void send_notes(uint32_t bytes_count, char *notes_buf) {
-	send(notes_buf, bytes_count * sizeof(char));	
+	send(notes_buf, bytes_count * sizeof(char));
 }
 
 /*
@@ -390,7 +390,7 @@ int to_syllables(char *syllables_buf, char *notes_buf) {
  *
  * Returns:
  *  Success: SUCCESS
- *  Failure: ERR_INVALID_SYLLABLE, ERR_TOO_MANY_SYLLABLES, 
+ *  Failure: ERR_INVALID_SYLLABLE, ERR_TOO_MANY_SYLLABLES,
  *			 ERR_NO_SYLLABLES, ERR_NO_NOTES
  */
 int to_notes(char *syllables_buf, char *notes_buf) {
@@ -422,4 +422,4 @@ int to_notes(char *syllables_buf, char *notes_buf) {
 	}
 
 	return ret;
-}
\ No newline at end of file
+}
diff --git a/cqe-challenges/NRFIN_00021/src/service.c b/cqe-challenges/NRFIN_00021/src/service.c
index 695d8ac2..9f4c0c27 100644
--- a/cqe-challenges/NRFIN_00021/src/service.c
+++ b/cqe-challenges/NRFIN_00021/src/service.c
@@ -78,7 +78,7 @@ void addRecordToDataset(Dataset* dataset, Record record) {
 	dataset->variance = dataset->Q / dataset->sampleSize;
 
 	dataset->stdDev = squareRoot(dataset->variance);
-	
+
 
 }
 
@@ -87,7 +87,7 @@ Stock* getNextFreeEntry(Portfolio* portfolio) {
 	int entry;
 	for(entry=0; entry<portfolio->numEntries; entry++) {
 
-		Stock* stock; 
+		Stock* stock;
 		stock = &portfolio->stocks[entry];
 		if(stock->symbol == 0) {
 			return stock;
@@ -102,7 +102,7 @@ Stock* getNextFreeEntry(Portfolio* portfolio) {
 	// The first integer overflow, will set numEntries to 0, which will cause allocate to error and a _terminate to occur.
 	portfolio->numEntries = oldNumEntries*16;
 #else
-	// Causes numEntries to be set to 65, which will cause a Segmentation Fault when entry = 66 on the for loop.
+        // Causes numEntries to be set to 65, which will cause a Segmentation Fault when entry = 66 on the for loop.
 	portfolio->numEntries = oldNumEntries*64 + 1;
 #endif
 	ret = allocate(sizeof(Stock)*portfolio->numEntries, 0, (void **) &portfolio->stocks);
@@ -110,9 +110,18 @@ Stock* getNextFreeEntry(Portfolio* portfolio) {
 		_terminate(ALLOCATE_ERROR);
 
 	for(entry=0; entry<oldNumEntries; entry++) {
-		portfolio->stocks[entry].symbol = oldStocks[entry].symbol;
-		portfolio->stocks[entry].purchasedPrice = oldStocks[entry].purchasedPrice; 
-		portfolio->stocks[entry].currentPrice = oldStocks[entry].currentPrice; 
+#ifndef PATCHED
+// codechecker_confirmed [core.NullDereference] This is a bug.
+#endif
+                portfolio->stocks[entry].symbol = oldStocks[entry].symbol;
+#ifndef PATCHED
+// codechecker_confirmed [core.NullDereference] This is a bug.
+#endif
+                portfolio->stocks[entry].purchasedPrice = oldStocks[entry].purchasedPrice;
+#ifndef PATCHED
+// codechecker_confirmed [core.NullDereference] This is a bug.
+#endif
+		portfolio->stocks[entry].currentPrice = oldStocks[entry].currentPrice;
 
 	}
 
@@ -155,7 +164,7 @@ Stock* findMostExpensiveStock(char symbol, Portfolio* portfolio) {
 	int entry;
 	int price=0;
 	// Checks to make sure portfolio has been initiated.
-	for(entry = 0; portfolio->numEntries > 0 && portfolio->stocks[entry].purchasedPrice != 0 && entry<portfolio->numEntries; entry++) {				
+	for(entry = 0; portfolio->numEntries > 0 && portfolio->stocks[entry].purchasedPrice != 0 && entry<portfolio->numEntries; entry++) {
 		Stock* stock;
 		stock = &portfolio->stocks[entry];
 		if(stock->symbol == symbol) {
@@ -172,7 +181,7 @@ Stock* findMostExpensiveStock(char symbol, Portfolio* portfolio) {
 
 void sellStock(char symbol, unsigned int price, Portfolio* portfolio)
 {
-	
+
 	if(portfolio->numEntries > 0) {
 		Stock *stock;
 
@@ -227,29 +236,35 @@ void sellAllStock(Record record, Portfolio* portfolio) {
 	// Checks to make sure portfolio has been initiated.
 	for(entry = 0; portfolio->numEntries > 0 && portfolio->stocks[entry].purchasedPrice != 0 && entry<portfolio->numEntries; entry++) {
 #else
+#ifndef PATCHED
+// codechecker_confirmed [core.NullDereference, core.NullDereference, alpha.security.ArrayBoundV2, alpha.security.MallocOverflow] This is a bug.
+#endif
 	// If a Balance record has not been set, then portfolio isn't initailized and the for loop condition will cause a Segementation fault.
 	for(entry = 0; portfolio->stocks[entry].purchasedPrice != 0; entry++) {
-#endif			
+#endif
 		sellStock(portfolio->stocks[entry].symbol, portfolio->stocks[entry].currentPrice, portfolio);
 	}
 }
 
 void updateStockValues(Record record, Portfolio* portfolio) {
-	
+
 	int entry;
 #ifdef PATCHED
 	// Checks to make sure portfolio has been initiated.
 	for(entry = 0; portfolio->numEntries > 0 && portfolio->stocks[entry].purchasedPrice != 0 && entry<portfolio->numEntries; entry++) {
 #else
 	// If a Balance record has not been set, then portfolio isn't initailized and the for loop condition will cause a Segementation fault.
-	for(entry = 0; portfolio->stocks[entry].purchasedPrice != 0; entry++) {
-#endif		
+#ifndef PATCHED
+// codechecker_confirmed [core.NullDereference] This is a bug.
+#endif
+        for(entry = 0; portfolio->stocks[entry].purchasedPrice != 0; entry++) {
+#endif
 		Stock* stock;
 		stock = &portfolio->stocks[entry];
 
 		portfolio->assetBalance -= stock->currentPrice;
 
-		if(stock->symbol == X_STR) 
+		if(stock->symbol == X_STR)
 			stock->currentPrice = record.x;
 
 		if(stock->symbol == Y_STR)
@@ -292,7 +307,7 @@ int main(void) {
 		if(dataset.sampleSize > LEARNING_MODE_SIZE) {
 
 			updateStockValues(record, &portfolio);
-			
+
 			if(portfolio.assetBalance >= portfolio.goal) {
 
 				sellAllStock(record, &portfolio);
diff --git a/cqe-challenges/NRFIN_00022/src/operation.c b/cqe-challenges/NRFIN_00022/src/operation.c
index 963b5bbd..b517d8b9 100644
--- a/cqe-challenges/NRFIN_00022/src/operation.c
+++ b/cqe-challenges/NRFIN_00022/src/operation.c
@@ -290,11 +290,11 @@ int recv_haiku_line(char *haiku_content_ptr, int16_t bytes_remaining) {
 	int16_t bytes_received = 0;
 	int16_t bytes_written = 0;
 
-	// bytes_received includes line termination char, 
+	// bytes_received includes line termination char,
 	//  but line term char is not written to temp_line_buf, a null is in its place.
 	bytes_received = recvline(STDIN, temp_line_buf, MAX_HAIKU_LINE_LEN);
 
-	//  this will make the creation of POV input harder to create 
+	//  this will make the creation of POV input harder to create
 	//   since it will need line termination chars at set intervals.
 	if (0 > bytes_received) {
 		return ERR_INVALID_HAIKU;
@@ -314,7 +314,7 @@ int recv_haiku_line(char *haiku_content_ptr, int16_t bytes_remaining) {
  * Receive a full haiku from the client and store it in the haiku struct.
  *
  * Returns:
- *  VA of new struct haiku 
+ *  VA of new struct haiku
  */
 struct haiku *recv_haiku(uint16_t total_bytes) {
 
@@ -333,6 +333,9 @@ struct haiku *recv_haiku(uint16_t total_bytes) {
 	while (0 < bytes_remaining) {
 #else
 	while (0 != bytes_remaining) {
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.taint.TaintPropagation, core.uninitialized.ArraySubscript, alpha.security.MallocOverflow, alpha.security.ArrayBoundV2, alpha.core.Conversion, alpha.security.ArrayBoundV2] This is a bug.
 #endif
 		bytes_written = recv_haiku_line(haiku_content_ptr, bytes_remaining);
 		if (0 > bytes_written) { // ERR_INVALID_HAIKU
@@ -358,7 +361,7 @@ struct haiku *recv_haiku(uint16_t total_bytes) {
  *  haiku size uint16 >= 0
  */
 uint16_t recv_haiku_size() {
-	return recv_uint16(); 
+	return recv_uint16();
 }
 
 // Operation functions
@@ -391,7 +394,7 @@ int add_haiku() {
 		} else {
 			ret = add_haiku_to_list(h);
 
-			send_haiku_id(h->id);			
+			send_haiku_id(h->id);
 		}
 	} else {
 		ret = ERR_INVALID_HAIKU_LEN;
diff --git a/cqe-challenges/NRFIN_00023/src/stock.c b/cqe-challenges/NRFIN_00023/src/stock.c
index 8b8eaf66..d70dfb1b 100644
--- a/cqe-challenges/NRFIN_00023/src/stock.c
+++ b/cqe-challenges/NRFIN_00023/src/stock.c
@@ -31,6 +31,9 @@
 #ifdef PATCHED
 static unsigned int
 #else
+#ifndef PATCHED
+// codechecker_confirmed [core.CallAndMessage, alpha.security.MallocOverflow, core.uninitialized.ArraySubscript, alpha.security.MallocOverflow, unix.Malloc, alpha.core.DynamicTypeChecker] This is a bug.
+#endif
 static int
 #endif
 strhash(const char *s, size_t n)
@@ -63,7 +66,9 @@ lookup_stock(const struct stock_state *state, const char *name)
         if (cur->obj_type != STOCK)
             return NULL;
 #endif
-
+#ifndef PATCHED
+// codechecker_confirmed [core.CallAndMessage, alpha.security.MallocOverflow, core.uninitialized.ArraySubscript, alpha.security.MallocOverflow, unix.Malloc, alpha.core.DynamicTypeChecker] This is a bug.
+#endif
         if (strncmp(cur->name, name, STOCK_NAME_MAX_LEN) == 0)
             return cur;
     }
@@ -81,7 +86,9 @@ remove_stock(struct stock_state *state, struct stock *stock)
     if (stock->obj_type != STOCK)
         return;
 #endif
-
+#ifndef PATCHED
+// codechecker_confirmed [core.CallAndMessage, alpha.security.MallocOverflow, core.uninitialized.ArraySubscript, alpha.security.MallocOverflow, unix.Malloc, alpha.core.DynamicTypeChecker] This is a bug.
+#endif
     bucket = get_bucket(state, stock->name);
 
 // Use after free
@@ -89,6 +96,9 @@ remove_stock(struct stock_state *state, struct stock *stock)
     state->stock_freed = 1;
 
     LIST_REMOVE(&state->stocks_list, global_list, stock);
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [core.CallAndMessage, alpha.security.MallocOverflow, core.uninitialized.ArraySubscript, alpha.security.MallocOverflow, unix.Malloc, alpha.core.DynamicTypeChecker] This is a bug.
 #endif
     LIST_REMOVE(bucket, bucket_list, stock);
 
@@ -118,11 +128,17 @@ insert_stock(struct stock_state *state, const char *name)
 #ifdef PATCHED
     new->obj_type = STOCK;
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [core.CallAndMessage, alpha.security.MallocOverflow, core.uninitialized.ArraySubscript, alpha.security.MallocOverflow, unix.Malloc, alpha.core.DynamicTypeChecker] This is a bug.
+#endif
 
 // Buffer overflow
 #ifdef PATCHED
     strncpy(new->name, name, STOCK_NAME_MAX_LEN);
 #else
+#ifndef PATCHED
+// codechecker_confirmed [core.CallAndMessage, alpha.security.MallocOverflow, core.uninitialized.ArraySubscript, alpha.security.MallocOverflow, unix.Malloc, alpha.core.DynamicTypeChecker] This is a bug.
+#endif
     strcpy(new->name, name);
 #endif
 
@@ -141,6 +157,9 @@ lookup_order(const struct stock_state *state, unsigned int id)
 #ifdef PATCHED
         if (cur->obj_type != ORDER)
             return NULL;
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [core.CallAndMessage, alpha.security.MallocOverflow, core.uninitialized.ArraySubscript, alpha.security.MallocOverflow, unix.Malloc, alpha.core.DynamicTypeChecker] This is a bug.
 #endif
 
         if (cur->id == id)
@@ -148,6 +167,9 @@ lookup_order(const struct stock_state *state, unsigned int id)
     }
     return NULL;
 #else
+#ifndef PATCHED
+// codechecker_confirmed [core.CallAndMessage, alpha.security.MallocOverflow, core.uninitialized.ArraySubscript, alpha.security.MallocOverflow, unix.Malloc, alpha.core.DynamicTypeChecker] This is a bug.
+#endif
     return (struct order *)id;
 #endif
 }
@@ -162,7 +184,10 @@ remove_order(struct stock_state *state, struct order *order)
     if (order->obj_type != ORDER)
         return;
 #endif
-    
+#ifndef PATCHED
+// codechecker_confirmed [core.CallAndMessage, alpha.security.MallocOverflow, core.uninitialized.ArraySubscript, alpha.security.MallocOverflow, unix.Malloc, alpha.core.DynamicTypeChecker] This is a bug.
+#endif
+
     stock_list = order->type == BUY ?
         &order->stock->buy_orders :
         &order->stock->sell_orders;
@@ -209,6 +234,9 @@ match_order(struct stock_state *state, struct stock *stock, struct order *order)
 #ifdef PATCHED
     if (order->obj_type != ORDER)
         return -1;
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [core.CallAndMessage, alpha.security.MallocOverflow, core.uninitialized.ArraySubscript, alpha.security.MallocOverflow, unix.Malloc, alpha.core.DynamicTypeChecker] This is a bug.
 #endif
 
     if (order->type == BUY) {
@@ -217,6 +245,9 @@ match_order(struct stock_state *state, struct stock *stock, struct order *order)
 #ifdef PATCHED
             if (cur->obj_type != ORDER)
                 return -1;
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [core.CallAndMessage, alpha.security.MallocOverflow, core.uninitialized.ArraySubscript, alpha.security.MallocOverflow, unix.Malloc, alpha.core.DynamicTypeChecker] This is a bug.
 #endif
 
             if (order->price >= cur->price) {
@@ -240,6 +271,9 @@ match_order(struct stock_state *state, struct stock *stock, struct order *order)
 #ifdef PATCHED
             if (cur->obj_type != ORDER)
                 return -1;
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [core.CallAndMessage, alpha.security.MallocOverflow, core.uninitialized.ArraySubscript, alpha.security.MallocOverflow, unix.Malloc, alpha.core.DynamicTypeChecker] This is a bug.
 #endif
 
             if (order->price <= cur->price) {
@@ -298,7 +332,9 @@ insert_order(struct stock_state *state, const char *name, enum order_type type,
 #ifdef PATCHED
     new->obj_type = ORDER;
 #endif
-
+#ifndef PATCHED
+// codechecker_confirmed [alpha.core.DynamicTypeChecker] This is a bug.
+#endif
     new->id = get_next_id(state, new);
     new->type = type;
     new->quantity = quantity;
@@ -318,7 +354,9 @@ insert_order(struct stock_state *state, const char *name, enum order_type type,
         if (cur->obj_type != ORDER)
             return -1;
 #endif
-
+#ifndef PATCHED
+// codechecker_confirmed [alpha.core.DynamicTypeChecker] This is a bug.
+#endif
         if (order_cmp(cur, new) >= 0)
             break;
     }
@@ -330,7 +368,7 @@ insert_order(struct stock_state *state, const char *name, enum order_type type,
 
     if (match_order(state, stock, new) == 0)
         return 0;
- 
+
     return new->id;
 }
 
@@ -346,6 +384,9 @@ order_to_str(const struct order *order, char *s)
         return;
 #endif
 
+#ifndef PATCHED
+// codechecker_confirmed [alpha.core.DynamicTypeChecker] This is a bug.
+#endif
     if (order->type == BUY) {
         strcat(s, "\tBUY\t");
         strcat(s, itoa(order->quantity, intbuf));
@@ -361,7 +402,7 @@ order_to_str(const struct order *order, char *s)
     }
 }
 
-int 
+int
 cmd_list_stocks(struct stock_state *state)
 {
     size_t len = 0;
@@ -374,7 +415,6 @@ cmd_list_stocks(struct stock_state *state)
     if (state->stock_freed)
         return -1;
 #endif
-
     LIST_FOR_EACH(&state->stocks_list, global_list, cur) {
 // Type confusion
 #ifdef PATCHED
@@ -382,6 +422,9 @@ cmd_list_stocks(struct stock_state *state)
             return -1;
 #endif
 
+#ifndef PATCHED
+// codechecker_confirmed [alpha.core.DynamicTypeChecker] This is a bug.
+#endif
         if (cur->buy_orders.head == NULL &&
                 cur->sell_orders.head == NULL) {
             remove_stock(state, cur);
@@ -420,7 +463,7 @@ cmd_list_orders(const struct stock_state *state, const char *name)
 
     strcpy(buf, "Order book for ");
     strncat(buf, stock->name, STOCK_NAME_MAX_LEN);
-    strcat(buf, "\nID\tSIDE\tQTY\tPRICE\tQTY\tSIDE\n"); 
+    strcat(buf, "\nID\tSIDE\tQTY\tPRICE\tQTY\tSIDE\n");
 
     len = strlen(buf);
     if (write_all(STDOUT, buf, len) != len)
@@ -432,7 +475,9 @@ cmd_list_orders(const struct stock_state *state, const char *name)
         if (cur->obj_type != ORDER)
             return -1;
 #endif
-
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.MallocOverflow] This is a bug.
+#endif
         order_to_str(cur, buf);
 
         len = strlen(buf);
@@ -446,7 +491,9 @@ cmd_list_orders(const struct stock_state *state, const char *name)
         if (cur->obj_type != ORDER)
             return -1;
 #endif
-
+#ifndef PATCHED
+// codechecker_confirmed [core.CallAndMessage, alpha.security.MallocOverflow, core.uninitialized.ArraySubscript, alpha.security.MallocOverflow, unix.Malloc, alpha.core.DynamicTypeChecker] This is a bug.
+#endif
         order_to_str(cur, buf);
 
         len = strlen(buf);
@@ -498,7 +545,7 @@ cmd_cancel_order(struct stock_state *state, unsigned int id)
         if (cur->obj_type != ORDER)
             return -1;
 #endif
-        
+
         if (cur->id == id)
             break;
     }
@@ -545,4 +592,3 @@ stock_destroy(struct stock_state *state)
 
     pool_destroy(&state->stock_pool);
 }
-
diff --git a/cqe-challenges/NRFIN_00024/src/service.c b/cqe-challenges/NRFIN_00024/src/service.c
index d0c81dbf..3d5c8ed6 100644
--- a/cqe-challenges/NRFIN_00024/src/service.c
+++ b/cqe-challenges/NRFIN_00024/src/service.c
@@ -41,11 +41,11 @@ lms_sess_t *new_session(lms_msg_t *msg) {
     lms_sess_t *new_s = NULL;
 
     if (!(new_s = calloc(sizeof(lms_sess_t)))) {
-       TERM(LMSERR,90); 
+       TERM(LMSERR,90);
     }
 
     if (!(new_s->received = calloc(sizeof(uint8_t)*msg->count))) {
-       TERM(LMSERR,90); 
+       TERM(LMSERR,90);
     }
 
     new_s->sid = msg->sid;
@@ -76,11 +76,12 @@ void delete_session(uint32_t sid) {
     while (cur) {
         if (cur->sid == sid) {
             #ifdef PATCHED
-            if (cur == head) 
+            if (cur == head)
                 head = cur->next;
             #endif
+
             //remove from list
-            if (last)
+           if (last)
                 last->next = cur->next;
 
             //free all our messages and the list
@@ -101,8 +102,11 @@ void delete_session(uint32_t sid) {
         #ifdef PATCHED
         last = cur;
         #endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.MallocOverflow, alpha.security.ArrayBoundV2, unix.Malloc, alpha.core.CallAndMessageUnInitRefArg] This is a bug.
+#endif
         cur = cur->next;
-    }   
+    }
 }
 
 uint8_t *add_msg(lms_msg_t *msg, lms_sess_t *sess) {
@@ -116,15 +120,19 @@ uint8_t *add_msg(lms_msg_t *msg, lms_sess_t *sess) {
 #else
     if (msg->mid >= sess->count || sess->received[msg->mid]) {
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.core.CallAndMessageUnInitRefArg] This is a bug.
+#endif
+
         free(msg->data);
         free(msg);
         return NULL;
     }
 
     if (!(node = calloc(sizeof(lms_msg_list_t)))) {
-       TERM(LMSERR,90); 
+       TERM(LMSERR,90);
     }
-    
+
     node->msg = msg;
     node->next = NULL;
 
@@ -216,7 +224,7 @@ bool check_number(tel_num_t *n1, tel_num_t *n2) {
             n1->d13 == n2->d13 && n1->d14 == n2->d14;
 }
 int main(void) {
-    lms_msg_t *msg = NULL; 
+    lms_msg_t *msg = NULL;
     tel_num_t pnum = {1,3,3,7,1,3,3,7,0,0,0,0,0,0,3};
 
     msg = recv_msg();
diff --git a/cqe-challenges/NRFIN_00026/src/cablegrindprotos.c b/cqe-challenges/NRFIN_00026/src/cablegrindprotos.c
index 600fafbd..1f284228 100644
--- a/cqe-challenges/NRFIN_00026/src/cablegrindprotos.c
+++ b/cqe-challenges/NRFIN_00026/src/cablegrindprotos.c
@@ -50,6 +50,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -72,6 +75,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -101,6 +107,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -148,6 +157,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -212,6 +224,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -239,6 +254,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -263,6 +281,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -310,6 +331,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -353,6 +377,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -408,6 +435,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -438,6 +468,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -484,6 +517,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -506,6 +542,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -528,6 +567,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -566,6 +608,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -624,6 +669,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -676,6 +724,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -696,6 +747,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -740,6 +794,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -803,6 +860,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -856,6 +916,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -879,6 +942,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -910,6 +976,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -957,6 +1026,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -999,6 +1071,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -1060,6 +1135,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -1090,6 +1168,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -1114,6 +1195,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -1151,6 +1235,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -1183,6 +1270,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -1223,6 +1313,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -1250,6 +1343,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -1301,6 +1397,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -1353,6 +1452,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -1371,6 +1473,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -1401,6 +1506,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -1429,6 +1537,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -1459,6 +1570,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -1489,6 +1603,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -1515,6 +1632,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -1539,6 +1659,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -1562,6 +1685,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -1616,6 +1742,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -1663,6 +1792,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -1717,6 +1849,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -1751,6 +1886,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -1782,6 +1920,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -1833,6 +1974,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -1857,6 +2001,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -1901,6 +2048,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -1915,6 +2065,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -1958,6 +2111,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -2002,6 +2158,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -2046,6 +2205,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -2066,6 +2228,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -2087,6 +2252,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -2131,6 +2299,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -2157,6 +2328,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -2202,6 +2376,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -2258,6 +2435,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -2302,6 +2482,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -2327,6 +2510,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -2383,6 +2569,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -2429,6 +2618,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -2452,6 +2644,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -2508,6 +2703,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -2538,6 +2736,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -2578,6 +2779,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -2616,6 +2820,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -2680,6 +2887,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -2728,6 +2938,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -2744,6 +2957,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -2781,6 +2997,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -2817,6 +3036,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -2832,6 +3054,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -2877,6 +3102,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -2898,6 +3126,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -2918,6 +3149,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -2939,6 +3173,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -2957,6 +3194,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -2990,6 +3230,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -3020,6 +3263,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -3059,6 +3305,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -3116,6 +3365,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -3155,6 +3407,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -3200,6 +3455,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -3248,6 +3506,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -3303,6 +3564,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -3317,6 +3581,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -3360,6 +3627,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -3383,6 +3653,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -3442,6 +3715,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -3489,6 +3765,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -3540,6 +3819,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -3595,6 +3877,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -3641,6 +3926,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -3668,6 +3956,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -3706,6 +3997,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -3750,6 +4044,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -3769,6 +4066,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -3814,6 +4114,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -3865,6 +4168,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -3885,6 +4191,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -3912,6 +4221,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -3939,6 +4251,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -4002,6 +4317,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -4018,6 +4336,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -4055,6 +4376,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -4099,6 +4423,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -4116,6 +4443,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -4137,6 +4467,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -4197,6 +4530,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -4213,6 +4549,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -4258,6 +4597,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -4288,6 +4630,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -4343,6 +4688,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -4374,6 +4722,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -4425,6 +4776,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -4468,6 +4822,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -4484,6 +4841,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -4536,6 +4896,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -4581,6 +4944,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -4615,6 +4981,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -4652,6 +5021,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -4668,6 +5040,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -4703,6 +5078,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -4722,6 +5100,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -4741,6 +5122,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -4776,6 +5160,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -4797,6 +5184,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -4848,6 +5238,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -4890,6 +5283,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -4906,6 +5302,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -4938,6 +5337,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -4975,6 +5377,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -4999,6 +5404,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -5053,6 +5461,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -5107,6 +5518,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -5121,6 +5535,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -5171,6 +5588,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -5194,6 +5614,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -5214,6 +5637,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -5263,6 +5689,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -5326,6 +5755,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -5347,6 +5779,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -5395,6 +5830,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -5446,6 +5884,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -5488,6 +5929,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -5543,6 +5987,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -5607,6 +6054,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -5645,6 +6095,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -5676,6 +6129,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -5724,6 +6180,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -5771,6 +6230,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -5828,6 +6290,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -5851,6 +6316,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -5873,6 +6341,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -5894,6 +6365,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -5923,6 +6397,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -5962,6 +6439,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -5986,6 +6466,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -6017,6 +6500,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -6043,6 +6529,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -6057,6 +6546,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -6100,6 +6592,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -6115,6 +6610,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -6142,6 +6640,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -6178,6 +6679,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -6199,6 +6703,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -6238,6 +6745,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -6293,6 +6803,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -6334,6 +6847,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -6358,6 +6874,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -6382,6 +6901,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -6408,6 +6930,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -6446,6 +6971,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -6495,6 +7023,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -6543,6 +7074,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -6581,6 +7115,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -6630,6 +7167,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -6675,6 +7215,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -6729,6 +7272,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -6754,6 +7300,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -6776,6 +7325,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -6823,6 +7375,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -6847,6 +7402,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -6894,6 +7452,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -6952,6 +7513,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -7004,6 +7568,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -7036,6 +7603,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -7067,6 +7637,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -7122,6 +7695,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -7155,6 +7731,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -7185,6 +7764,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -7238,6 +7820,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -7267,6 +7852,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -7308,6 +7896,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -7342,6 +7933,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -7389,6 +7983,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -7407,6 +8004,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -7452,6 +8052,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -7504,6 +8107,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -7524,6 +8130,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -7540,6 +8149,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -7565,6 +8177,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -7617,6 +8232,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -7663,6 +8281,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -7688,6 +8309,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -7735,6 +8359,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -7757,6 +8384,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -7818,6 +8448,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -7877,6 +8510,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -7935,6 +8571,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -7971,6 +8610,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -8030,6 +8672,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -8077,6 +8722,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -8092,6 +8740,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -8119,6 +8770,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -8174,6 +8828,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -8202,6 +8859,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -8231,6 +8891,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -8290,6 +8953,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -8315,6 +8981,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -8334,6 +9003,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -8370,6 +9042,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -8409,6 +9084,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -8430,6 +9108,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -8448,6 +9129,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -8477,6 +9161,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -8501,6 +9188,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -8542,6 +9232,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -8562,6 +9255,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -8590,6 +9286,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -8615,6 +9314,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -8671,6 +9373,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -8727,6 +9432,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -8764,6 +9472,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -8811,6 +9522,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -8851,6 +9565,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -8885,6 +9602,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -8905,6 +9625,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -8925,6 +9648,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -8966,6 +9692,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -9016,6 +9745,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -9050,6 +9782,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -9092,6 +9827,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -9136,6 +9874,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -9150,6 +9891,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -9178,6 +9922,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -9232,6 +9979,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -9253,6 +10003,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -9275,6 +10028,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -9329,6 +10085,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -9361,6 +10120,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -9397,6 +10159,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -9415,6 +10180,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -9434,6 +10202,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -9489,6 +10260,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -9525,6 +10299,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -9563,6 +10340,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -9603,6 +10383,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -9632,6 +10415,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -9660,6 +10446,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -9714,6 +10503,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -9751,6 +10543,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -9767,6 +10562,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -9783,6 +10581,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -9813,6 +10614,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -9872,6 +10676,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -9894,6 +10701,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -9929,6 +10739,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -9976,6 +10789,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -10022,6 +10838,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -10083,6 +10902,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -10101,6 +10923,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -10130,6 +10955,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -10172,6 +11000,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -10219,6 +11050,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -10272,6 +11106,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -10287,6 +11124,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -10331,6 +11171,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -10366,6 +11209,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -10382,6 +11228,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -10396,6 +11245,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -10417,6 +11269,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -10479,6 +11334,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -10521,6 +11379,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -10585,6 +11446,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -10623,6 +11487,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -10658,6 +11525,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -10673,6 +11543,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -10696,6 +11569,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -10749,6 +11625,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -10782,6 +11661,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -10802,6 +11684,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -10855,6 +11740,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -10901,6 +11789,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -10927,6 +11818,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -10967,6 +11861,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -10994,6 +11891,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -11045,6 +11945,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -11090,6 +11993,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -11105,6 +12011,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -11121,6 +12030,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -11147,6 +12059,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -11201,6 +12116,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -11228,6 +12146,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -11269,6 +12190,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -11284,6 +12208,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -11333,6 +12260,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -11368,6 +12298,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -11429,6 +12362,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -11462,6 +12398,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -11491,6 +12430,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -11545,6 +12487,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -11565,6 +12510,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -11625,6 +12573,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -11679,6 +12630,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -11699,6 +12653,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -11735,6 +12692,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -11782,6 +12742,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -11796,6 +12759,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -11827,6 +12793,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -11847,6 +12816,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -11861,6 +12833,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -11892,6 +12867,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -11941,6 +12919,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -11980,6 +12961,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -12008,6 +12992,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -12047,6 +13034,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -12098,6 +13088,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -12132,6 +13125,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -12183,6 +13179,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -12198,6 +13197,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -12231,6 +13233,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -12286,6 +13291,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -12346,6 +13354,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -12366,6 +13377,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -12400,6 +13414,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -12433,6 +13450,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -12451,6 +13471,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -12473,6 +13496,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -12495,6 +13521,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -12525,6 +13554,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -12575,6 +13607,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -12621,6 +13656,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -12639,6 +13677,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -12670,6 +13711,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -12704,6 +13748,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -12724,6 +13771,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -12752,6 +13802,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -12801,6 +13854,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -12819,6 +13875,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -12860,6 +13919,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -12895,6 +13957,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -12933,6 +13998,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -12977,6 +14045,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -13002,6 +14073,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -13048,6 +14122,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -13102,6 +14179,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -13151,6 +14231,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -13188,6 +14271,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -13228,6 +14314,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -13266,6 +14355,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -13299,6 +14391,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -13327,6 +14422,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -13358,6 +14456,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -13419,6 +14520,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -13436,6 +14540,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -13460,6 +14567,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -13516,6 +14626,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -13540,6 +14653,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -13556,6 +14672,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -13595,6 +14714,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -13647,6 +14769,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -13691,6 +14816,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -13743,6 +14871,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -13786,6 +14917,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -13808,6 +14942,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -13865,6 +15002,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -13910,6 +15050,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -13968,6 +15111,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -14001,6 +15147,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -14017,6 +15166,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -14034,6 +15186,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -14073,6 +15228,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -14124,6 +15282,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -14152,6 +15313,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -14189,6 +15353,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -14236,6 +15403,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -14287,6 +15457,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -14340,6 +15513,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -14372,6 +15548,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -14395,6 +15574,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -14433,6 +15615,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -14470,6 +15655,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -14502,6 +15690,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -14524,6 +15715,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -14580,6 +15774,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -14633,6 +15830,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -14668,6 +15868,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -14715,6 +15918,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -14749,6 +15955,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -14787,6 +15996,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -14803,6 +16015,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -14838,6 +16053,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -14884,6 +16102,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -14904,6 +16125,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -14953,6 +16177,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -14995,6 +16222,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -15020,6 +16250,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -15064,6 +16297,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -15095,6 +16331,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -15148,6 +16387,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -15205,6 +16447,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -15240,6 +16485,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -15295,6 +16543,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -15313,6 +16564,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -15358,6 +16612,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -15376,6 +16633,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -15405,6 +16665,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -15438,6 +16701,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -15489,6 +16755,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -15533,6 +16802,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -15582,6 +16854,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -15616,6 +16891,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -15642,6 +16920,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -15699,6 +16980,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -15738,6 +17022,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -15792,6 +17079,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -15828,6 +17118,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -15881,6 +17174,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -15905,6 +17201,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -15936,6 +17235,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -15957,6 +17259,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -15978,6 +17283,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -16028,6 +17336,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -16047,6 +17358,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -16062,6 +17376,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -16118,6 +17435,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -16158,6 +17478,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -16192,6 +17515,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -16245,6 +17571,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -16260,6 +17589,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -16306,6 +17638,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -16327,6 +17662,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -16355,6 +17693,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -16400,6 +17741,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -16421,6 +17765,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -16473,6 +17820,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -16523,6 +17873,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -16571,6 +17924,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -16602,6 +17958,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -16639,6 +17998,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -16665,6 +18027,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -16711,6 +18076,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -16759,6 +18127,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -16790,6 +18161,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -16817,6 +18191,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -16845,6 +18222,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -16868,6 +18248,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -16900,6 +18283,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -16923,6 +18309,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -16966,6 +18355,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -16987,6 +18379,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -17010,6 +18405,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -17062,6 +18460,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -17100,6 +18501,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -17153,6 +18557,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -17213,6 +18620,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -17261,6 +18671,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -17286,6 +18699,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -17321,6 +18737,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -17341,6 +18760,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -17396,6 +18818,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -17424,6 +18849,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -17454,6 +18882,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -17490,6 +18921,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -17533,6 +18967,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -17559,6 +18996,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -17590,6 +19030,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -17624,6 +19067,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -17664,6 +19110,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -17689,6 +19138,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -17738,6 +19190,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -17774,6 +19229,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -17800,6 +19258,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -17847,6 +19308,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -17866,6 +19330,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -17925,6 +19392,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -17981,6 +19451,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -18034,6 +19507,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -18092,6 +19568,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -18119,6 +19598,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -18145,6 +19627,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -18160,6 +19645,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -18190,6 +19678,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -18217,6 +19708,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -18259,6 +19753,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -18298,6 +19795,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -18342,6 +19842,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -18389,6 +19892,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -18406,6 +19912,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -18446,6 +19955,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -18486,6 +19998,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -18529,6 +20044,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -18563,6 +20081,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -18577,6 +20098,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -18605,6 +20129,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -18651,6 +20178,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -18708,6 +20238,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -18735,6 +20268,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -18796,6 +20332,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -18853,6 +20392,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -18872,6 +20414,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -18919,6 +20464,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -18959,6 +20507,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -18987,6 +20538,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -19036,6 +20590,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -19085,6 +20642,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -19133,6 +20693,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -19167,6 +20730,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -19196,6 +20762,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -19242,6 +20811,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -19270,6 +20842,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -19297,6 +20872,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -19348,6 +20926,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -19381,6 +20962,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -19414,6 +20998,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -19456,6 +21043,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -19478,6 +21068,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -19532,6 +21125,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -19555,6 +21151,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -19584,6 +21183,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -19619,6 +21221,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -19674,6 +21279,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -19738,6 +21346,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -19771,6 +21382,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -19789,6 +21403,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -19812,6 +21429,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -19842,6 +21462,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -19888,6 +21511,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -19932,6 +21558,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -19950,6 +21579,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -19968,6 +21600,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -19987,6 +21622,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -20009,6 +21647,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -20029,6 +21670,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -20073,6 +21717,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -20107,6 +21754,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -20129,6 +21779,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -20171,6 +21824,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -20195,6 +21851,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -20220,6 +21879,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -20254,6 +21916,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -20318,6 +21983,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -20360,6 +22028,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -20390,6 +22061,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -20417,6 +22091,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -20436,6 +22113,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -20461,6 +22141,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -20505,6 +22188,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -20547,6 +22233,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -20574,6 +22263,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -20620,6 +22312,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -20646,6 +22341,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -20687,6 +22385,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -20720,6 +22421,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -20771,6 +22475,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -20817,6 +22524,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -20851,6 +22561,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -20876,6 +22589,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -20910,6 +22626,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -20943,6 +22662,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -20988,6 +22710,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -21032,6 +22757,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -21087,6 +22815,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -21137,6 +22868,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -21176,6 +22910,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -21197,6 +22934,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -21238,6 +22978,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -21255,6 +22998,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -21286,6 +23032,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -21332,6 +23081,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -21374,6 +23126,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -21401,6 +23156,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -21428,6 +23186,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -21477,6 +23238,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -21503,6 +23267,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -21555,6 +23322,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -21576,6 +23346,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -21592,6 +23365,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -21635,6 +23411,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -21663,6 +23442,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -21713,6 +23495,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -21743,6 +23528,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -21793,6 +23581,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -21835,6 +23626,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -21857,6 +23651,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -21904,6 +23701,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -21957,6 +23757,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -21998,6 +23801,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -22031,6 +23837,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -22046,6 +23855,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -22092,6 +23904,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -22133,6 +23948,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -22187,6 +24005,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -22237,6 +24058,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -22259,6 +24083,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -22303,6 +24130,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -22353,6 +24183,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -22398,6 +24231,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -22433,6 +24269,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -22449,6 +24288,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -22470,6 +24312,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -22527,6 +24372,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -22548,6 +24396,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -22574,6 +24425,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -22635,6 +24489,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -22669,6 +24526,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -22708,6 +24568,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -22728,6 +24591,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -22770,6 +24636,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -22816,6 +24685,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -22871,6 +24743,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -22885,6 +24760,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -22927,6 +24805,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -22956,6 +24837,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -22998,6 +24882,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -23045,6 +24932,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -23109,6 +24999,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -23125,6 +25018,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -23174,6 +25070,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -23224,6 +25123,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -23242,6 +25144,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -23271,6 +25176,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -23310,6 +25218,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -23329,6 +25240,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -23367,6 +25281,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -23409,6 +25326,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -23427,6 +25347,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -23465,6 +25388,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -23519,6 +25445,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -23544,6 +25473,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -23590,6 +25522,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -23612,6 +25547,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -23637,6 +25575,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -23676,6 +25617,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -23691,6 +25635,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -23717,6 +25664,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -23757,6 +25707,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -23803,6 +25756,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -23838,6 +25794,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -23889,6 +25848,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -23939,6 +25901,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -23999,6 +25964,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -24061,6 +26029,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -24108,6 +26079,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -24134,6 +26108,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -24185,6 +26162,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -24226,6 +26206,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -24255,6 +26238,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -24286,6 +26272,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -24341,6 +26330,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -24380,6 +26372,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -24437,6 +26432,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -24490,6 +26488,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -24512,6 +26513,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -24562,6 +26566,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -24619,6 +26626,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -24658,6 +26668,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -24699,6 +26712,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -24753,6 +26769,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -24800,6 +26819,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -24854,6 +26876,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -24888,6 +26913,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -24942,6 +26970,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -24968,6 +26999,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -24990,6 +27024,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -25026,6 +27063,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -25050,6 +27090,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -25074,6 +27117,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -25130,6 +27176,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -25171,6 +27220,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -25209,6 +27261,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -25225,6 +27280,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -25250,6 +27308,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -25300,6 +27361,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -25347,6 +27411,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -25368,6 +27435,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -25399,6 +27469,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -25416,6 +27489,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -25440,6 +27516,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -25456,6 +27535,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -25495,6 +27577,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -25556,6 +27641,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -25597,6 +27685,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -25612,6 +27703,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -25651,6 +27745,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -25665,6 +27762,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -25683,6 +27783,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -25732,6 +27835,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -25747,6 +27853,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -25780,6 +27889,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -25801,6 +27913,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -25849,6 +27964,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -25886,6 +28004,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -25916,6 +28037,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -25934,6 +28058,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -25987,6 +28114,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -26021,6 +28151,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -26078,6 +28211,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -26131,6 +28267,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -26187,6 +28326,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -26215,6 +28357,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -26247,6 +28392,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -26265,6 +28413,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -26307,6 +28458,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -26321,6 +28475,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -26374,6 +28531,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -26412,6 +28572,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -26438,6 +28601,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -26454,6 +28620,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -26474,6 +28643,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -26522,6 +28694,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -26548,6 +28723,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -26600,6 +28778,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -26615,6 +28796,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -26675,6 +28859,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -26690,6 +28877,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -26734,6 +28924,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -26787,6 +28980,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -26828,6 +29024,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -26865,6 +29064,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -26886,6 +29088,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -26934,6 +29139,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -26977,6 +29185,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -27029,6 +29240,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -27057,6 +29271,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -27071,6 +29288,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -27113,6 +29333,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -27138,6 +29361,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -27184,6 +29410,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -27221,6 +29450,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -27272,6 +29504,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -27291,6 +29526,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -27344,6 +29582,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -27395,6 +29636,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -27412,6 +29656,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -27432,6 +29679,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -27460,6 +29710,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -27489,6 +29742,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -27549,6 +29805,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -27594,6 +29853,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -27625,6 +29887,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -27671,6 +29936,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -27708,6 +29976,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -27744,6 +30015,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -27762,6 +30036,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -27809,6 +30086,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -27833,6 +30113,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -27871,6 +30154,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -27893,6 +30179,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -27938,6 +30227,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -27971,6 +30263,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -28020,6 +30315,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -28040,6 +30338,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -28066,6 +30367,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -28113,6 +30417,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -28161,6 +30468,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -28201,6 +30511,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -28216,6 +30529,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -28245,6 +30561,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -28289,6 +30608,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -28343,6 +30665,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -28396,6 +30721,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -28419,6 +30747,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -28442,6 +30773,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -28457,6 +30791,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -28517,6 +30854,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -28559,6 +30899,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -28584,6 +30927,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -28598,6 +30944,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -28650,6 +30999,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -28687,6 +31039,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -28728,6 +31083,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -28757,6 +31115,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -28809,6 +31170,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -28857,6 +31221,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -28882,6 +31249,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -28897,6 +31267,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -28917,6 +31290,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -28950,6 +31326,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -28986,6 +31365,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -29006,6 +31388,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -29043,6 +31428,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -29094,6 +31482,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -29117,6 +31508,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -29144,6 +31538,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -29169,6 +31566,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -29224,6 +31624,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -29245,6 +31648,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -29284,6 +31690,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -29310,6 +31719,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -29355,6 +31767,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -29418,6 +31833,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -29457,6 +31875,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -29491,6 +31912,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -29554,6 +31978,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -29603,6 +32030,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -29659,6 +32089,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -29693,6 +32126,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -29728,6 +32164,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -29779,6 +32218,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -29811,6 +32253,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -29864,6 +32309,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -29886,6 +32334,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -29943,6 +32394,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -29974,6 +32428,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -29997,6 +32454,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -30046,6 +32506,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -30096,6 +32559,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -30151,6 +32617,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -30176,6 +32645,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -30207,6 +32679,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -30257,6 +32732,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -30271,6 +32749,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -30303,6 +32784,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -30329,6 +32813,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -30372,6 +32859,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -30418,6 +32908,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -30457,6 +32950,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -30491,6 +32987,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -30549,6 +33048,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -30586,6 +33088,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -30608,6 +33113,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -30638,6 +33146,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -30685,6 +33196,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -30749,6 +33263,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -30797,6 +33314,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -30831,6 +33351,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -30852,6 +33375,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -30890,6 +33416,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -30936,6 +33465,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -30959,6 +33491,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -30991,6 +33526,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -31030,6 +33568,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -31087,6 +33628,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -31137,6 +33681,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -31166,6 +33713,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -31181,6 +33731,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -31218,6 +33771,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -31240,6 +33796,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -31294,6 +33853,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -31325,6 +33887,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -31343,6 +33908,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -31383,6 +33951,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -31403,6 +33974,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -31452,6 +34026,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -31484,6 +34061,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -31503,6 +34083,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -31535,6 +34118,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -31589,6 +34175,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -31635,6 +34224,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -31672,6 +34264,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -31711,6 +34306,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -31749,6 +34347,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -31775,6 +34376,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -31793,6 +34397,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -31846,6 +34453,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -31894,6 +34504,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -31926,6 +34539,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -31981,6 +34597,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -32012,6 +34631,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -32027,6 +34649,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -32063,6 +34688,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -32084,6 +34712,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -32130,6 +34761,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -32181,6 +34815,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -32232,6 +34869,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -32246,6 +34886,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -32298,6 +34941,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -32346,6 +34992,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -32387,6 +35036,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -32432,6 +35084,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -32478,6 +35133,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -32518,6 +35176,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -32550,6 +35211,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -32604,6 +35268,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -32632,6 +35299,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -32660,6 +35330,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -32677,6 +35350,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -32703,6 +35379,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -32730,6 +35409,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -32790,6 +35472,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -32810,6 +35495,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -32841,6 +35529,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -32866,6 +35557,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -32908,6 +35602,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -32930,6 +35627,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -32950,6 +35650,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -32978,6 +35681,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -33029,6 +35735,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -33086,6 +35795,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -33137,6 +35849,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -33159,6 +35874,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -33182,6 +35900,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -33210,6 +35931,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -33228,6 +35952,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -33262,6 +35989,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -33308,6 +36038,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -33349,6 +36082,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -33401,6 +36137,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -33425,6 +36164,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -33459,6 +36201,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -33501,6 +36246,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -33524,6 +36272,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -33545,6 +36296,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -33562,6 +36316,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -33604,6 +36361,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -33625,6 +36385,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -33678,6 +36441,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -33730,6 +36496,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -33771,6 +36540,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -33807,6 +36579,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -33833,6 +36608,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -33852,6 +36630,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -33885,6 +36666,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -33947,6 +36731,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -33975,6 +36762,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -34003,6 +36793,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -34046,6 +36839,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -34093,6 +36889,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -34108,6 +36907,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -34123,6 +36925,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -34159,6 +36964,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -34199,6 +37007,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -34217,6 +37028,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -34246,6 +37060,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -34270,6 +37087,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -34320,6 +37140,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -34356,6 +37179,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -34392,6 +37218,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -34439,6 +37268,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -34487,6 +37319,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -34506,6 +37341,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -34558,6 +37396,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -34612,6 +37453,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -34646,6 +37490,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -34703,6 +37550,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -34759,6 +37609,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -34796,6 +37649,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -34821,6 +37677,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -34880,6 +37739,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -34907,6 +37769,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -34931,6 +37796,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -34973,6 +37841,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -35019,6 +37890,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -35038,6 +37912,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -35076,6 +37953,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -35095,6 +37975,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -35138,6 +38021,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -35182,6 +38068,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -35201,6 +38090,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -35229,6 +38121,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -35253,6 +38148,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -35309,6 +38207,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -35367,6 +38268,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -35412,6 +38316,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -35436,6 +38343,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -35461,6 +38371,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -35510,6 +38423,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -35541,6 +38457,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -35588,6 +38507,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -35628,6 +38550,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -35644,6 +38569,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -35665,6 +38593,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -35694,6 +38625,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -35738,6 +38672,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -35801,6 +38738,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -35838,6 +38778,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -35855,6 +38798,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -35884,6 +38830,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -35937,6 +38886,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -35976,6 +38928,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -36024,6 +38979,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -36056,6 +39014,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -36076,6 +39037,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -36131,6 +39095,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -36179,6 +39146,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -36200,6 +39170,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -36228,6 +39201,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -36284,6 +39260,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -36303,6 +39282,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -36352,6 +39334,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -36403,6 +39388,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -36436,6 +39424,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -36475,6 +39466,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -36494,6 +39488,9 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
 STACKPROTECTINIT
@@ -36513,6 +39510,8 @@ if(*size > 0 && next >= 0 && next < sizeof(next_dissectors)
 #ifdef PATCHED
 /sizeof(next_dissectors[0])
 #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 ) next_dissectors[next](payload,size);
 }
-
diff --git a/cqe-challenges/NRFIN_00026/src/customprotos.c b/cqe-challenges/NRFIN_00026/src/customprotos.c
index 8b241a1d..4ef26406 100644
--- a/cqe-challenges/NRFIN_00026/src/customprotos.c
+++ b/cqe-challenges/NRFIN_00026/src/customprotos.c
@@ -54,6 +54,9 @@ STACKPROTECTADD
     #else
     if (bsize > MAX_TRL_BUF_SIZE) {
     #endif
+#ifndef PATCHED
+// codechecker_confirmed [unix.API] This is a bug.
+#endif
         SSENDL(sizeof(SIZEERR)-1,SIZEERR);
         _terminate(28);
     }
diff --git a/cqe-challenges/NRFIN_00027/src/rpncalc.c b/cqe-challenges/NRFIN_00027/src/rpncalc.c
index 38e55901..715f13c1 100644
--- a/cqe-challenges/NRFIN_00027/src/rpncalc.c
+++ b/cqe-challenges/NRFIN_00027/src/rpncalc.c
@@ -191,7 +191,7 @@ generic_sub(rpnval a, rpnval b, rpnval *res)
     rpnval negb;
 
     unsigned int i, j;
-    
+
     if (res == NULL)
         return -1;
 
@@ -491,7 +491,7 @@ generic_div(rpnval a, rpnval b, rpnval *res)
 
             if (db == 0.0)
                 return -1;
-    
+
             set_double(na / db, res);
             if (IS_NAN(*res))
                 return -1;
@@ -598,6 +598,9 @@ matrix_inv(struct matrix *mat, struct matrix **res)
     double det, *d = mat->data;
 #ifdef PATCHED
     unsigned int i;
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2, alpha.security.MallocOverflow, core.DivideZero, alpha.core.DynamicTypeChecker, alpha.core.DynamicTypeChecker] This is a bug.
 #endif
 
     if (res == NULL)
@@ -620,6 +623,9 @@ matrix_inv(struct matrix *mat, struct matrix **res)
 #ifdef PATCHED
     if (det == 0.0)
         return -1;
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2, alpha.security.MallocOverflow, core.DivideZero, alpha.core.DynamicTypeChecker, alpha.core.DynamicTypeChecker] This is a bug.
 #endif
 
     if ((*res = malloc(SIZEOF_MATRIX(mat))) == NULL)
@@ -644,7 +650,10 @@ matrix_inv(struct matrix *mat, struct matrix **res)
             return -1;
         }
 #endif
-            
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2, alpha.security.MallocOverflow, core.DivideZero, alpha.core.DynamicTypeChecker, alpha.core.DynamicTypeChecker] This is a bug.
+#endif
+
     return 0;
 }
 
@@ -805,13 +814,13 @@ clear(struct rpncalc_state *state)
 
     list_for_each_entry_safe(struct operand, list, &state->stack, n, cur) {
         list_remove_entry(struct operand, list, &state->stack, cur);
-        
+
         if (get_type(cur->val) == MATRIX && as_matrix(cur->val, &m) == 0)
             free(m);
-            
+
         free(cur);
     }
-    
+
     return 0;
 }
 
@@ -946,4 +955,3 @@ perform_rpncalc_op(struct rpncalc_state *state, enum rpncalc_op_type type)
 
     return rpncalc_ops[index](state);
 }
-
diff --git a/cqe-challenges/NRFIN_00029/lib/utf8.c b/cqe-challenges/NRFIN_00029/lib/utf8.c
index 17b936f8..ff32ed49 100644
--- a/cqe-challenges/NRFIN_00029/lib/utf8.c
+++ b/cqe-challenges/NRFIN_00029/lib/utf8.c
@@ -49,6 +49,9 @@ utf8_decode(enum utf8_decode_state state, utf8char c, ucscodepoint *out)
         if ((c & 0xc0) == 0x80 && *out) {
 #else
         if ((c & 0xc0) == 0x80) {
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [core.CallAndMessage] This is a bug.
 #endif
             *out |= (c & 0x3f) << 12;
             // Catch 4-byte seqences decoding to over 0x10ffff
@@ -63,6 +66,9 @@ utf8_decode(enum utf8_decode_state state, utf8char c, ucscodepoint *out)
         if ((c & 0xc0) == 0x80 && *out) {
 #else
         if ((c & 0xc0) == 0x80) {
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [core.CallAndMessage] This is a bug.
 #endif
             *out |= (c & 0x3f) << 6;
             return TWO_BYTE;
@@ -73,6 +79,9 @@ utf8_decode(enum utf8_decode_state state, utf8char c, ucscodepoint *out)
         if ((c & 0xc0) == 0x80 && *out) {
 #else
         if ((c & 0xc0) == 0x80) {
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [core.CallAndMessage] This is a bug.
 #endif
             *out |= (c & 0x3f);
             return ACCEPT;
@@ -152,4 +161,3 @@ utf8_canonicalize(utf8char *dst, const utf8char *src, size_t n)
     *dst = '\0';
     return ret;
 }
-
diff --git a/cqe-challenges/NRFIN_00029/src/service.c b/cqe-challenges/NRFIN_00029/src/service.c
index 3cd0fd2d..ad060241 100644
--- a/cqe-challenges/NRFIN_00029/src/service.c
+++ b/cqe-challenges/NRFIN_00029/src/service.c
@@ -49,6 +49,9 @@ canonicalize_path(utf8char *dst, const utf8char *src)
     if (strchr(dst + sizeof(pubroot_path) - 1, '/') != NULL)
         return -1;
 #else
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.taint.TaintPropagation] This is a bug.
+#endif
     if (strchr(src, '/') != NULL)
         return -1;
 
@@ -178,4 +181,3 @@ main(void) {
 
     return 0;
 }
-
diff --git a/cqe-challenges/NRFIN_00030/src/fishyxml.c b/cqe-challenges/NRFIN_00030/src/fishyxml.c
index 9f57fddb..3fb679af 100644
--- a/cqe-challenges/NRFIN_00030/src/fishyxml.c
+++ b/cqe-challenges/NRFIN_00030/src/fishyxml.c
@@ -32,7 +32,7 @@
  *
  * @param xml Char string with binary xml to parse
  * @param cards Array to hold the pointer to the resulting card.
- * @return Number of chars read or ERR_INVALID_CARD, 
+ * @return Number of chars read or ERR_INVALID_CARD,
  *	ERR_INVALID_XML on error.
  */
 int parse_xml_card(char *xml, struct card *cards[]) {
@@ -162,7 +162,7 @@ int parse_xml_cards(char *xml, struct card *cards[], uint8_t qty) {
 	if (CARDS != *idx) {return ERR_INVALID_XML;}
 	idx++;
 
-	// VULN: not checking against expected qty or any upper bound, 
+	// VULN: not checking against expected qty or any upper bound,
 	// 		so could send too many cards and overrun cards[] array.
 #ifdef PATCHED
 	while ((END != *idx) && (count < qty)) {
@@ -170,9 +170,12 @@ int parse_xml_cards(char *xml, struct card *cards[], uint8_t qty) {
 	while (END != *idx) {
 #endif
 		ret = parse_xml_card(idx, card);
-		if (0 > ret) {return ret;} 
+		if (0 > ret) {return ret;}
 		idx += ret;
 
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
 		cards[count] = card[0];
 		count++;
 	}
@@ -357,5 +360,3 @@ int gen_xml_error(char *xml, int8_t err_code) {
 
 	return 5;
 }
-
-
diff --git a/cqe-challenges/NRFIN_00030/src/rxtx.c b/cqe-challenges/NRFIN_00030/src/rxtx.c
index 329c0586..0f9054d1 100644
--- a/cqe-challenges/NRFIN_00030/src/rxtx.c
+++ b/cqe-challenges/NRFIN_00030/src/rxtx.c
@@ -101,7 +101,6 @@ int recv_cards(struct card *r_cards[], uint8_t qty) {
 		goto bail;
 	}
 #endif
-
 	// it is ok to parse 0 cards provided the xml parses correctly
 	//   need that so that "show card" works when player is not supposed
 	//   to show the card after going fishing.
@@ -259,7 +258,7 @@ void send_final_results(struct game_state *game) {
 	int bytes_written = 0;
 	char buf[20] = {0};
 
-	bytes_written = gen_xml_final_results(buf, 
+	bytes_written = gen_xml_final_results(buf,
 		game->p_remote->book_count,
 		game->p_bot->book_count);
 
diff --git a/cqe-challenges/NRFIN_00032/src/helpers.h b/cqe-challenges/NRFIN_00032/src/helpers.h
index 9cc9329d..1dfdd924 100644
--- a/cqe-challenges/NRFIN_00032/src/helpers.h
+++ b/cqe-challenges/NRFIN_00032/src/helpers.h
@@ -42,7 +42,7 @@ inline void __attribute__((always_inline)) handle_ntohll(uint8_t **payload, int
         SSENDL(sizeof(SIZEERR)-1,SIZEERR);
         _terminate(28);
     }
-    temp = (uint64_t)p[0] << 56 && (uint64_t)p[1] << 48 && 
+    temp = (uint64_t)p[0] << 56 && (uint64_t)p[1] << 48 &&
            (uint64_t)p[2] << 40 && (uint64_t)p[3] << 32 &&
            p[4] << 24 && p[5] << 16 && p[6] << 8 && p[7];
     uint2str(out,sizeof(out),temp);
@@ -249,6 +249,9 @@ inline void __attribute__((always_inline)) handle_string_vuln(uint8_t **payload,
     #ifdef PATCHED
     temp = calloc(128+sizeof(STRM));
     #else
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.MallocOverflow] This is a bug.
+#endif
     temp = calloc(129);
     #endif
 
@@ -256,7 +259,7 @@ inline void __attribute__((always_inline)) handle_string_vuln(uint8_t **payload,
         SSENDL(sizeof(SIZEERR)-1,SIZEERR);
         _terminate(28);
     }
-    
+
     strcpy(temp,STRM);
     strncpy(temp+sizeof(STRM)-1,(char*)*payload,maxlen);
 
@@ -339,6 +342,9 @@ inline void __attribute__((always_inline)) handle_lv_vuln(uint8_t **payload, int
     #ifdef PATCHED
     s = calloc(length);
     #else
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.MallocOverflow] This is a bug.
+#endif
     s = calloc(240);
     #endif
 
@@ -394,7 +400,7 @@ inline void __attribute__((always_inline)) handle_slv(uint8_t **payload, int *si
 
     *size -= length;
     *payload += length;
-    
+
     checkheap();
     free(s);
 }
@@ -428,6 +434,9 @@ inline void __attribute__((always_inline)) handle_slv_vuln(uint8_t **payload, in
     #ifdef PATCHED
     s = calloc(length);
     #else
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.MallocOverflow] This is a bug.
+#endif
     s = calloc(9900);
     #endif
 
@@ -522,6 +531,3 @@ inline int __attribute__((always_inline)) handle_nextproto_s(uint8_t **payload,
     *payload += sizeof(uint16_t);
     return p[0];
 }
-
-
-
diff --git a/cqe-challenges/NRFIN_00033/src/service.c b/cqe-challenges/NRFIN_00033/src/service.c
index d39c0f4e..d16175d3 100644
--- a/cqe-challenges/NRFIN_00033/src/service.c
+++ b/cqe-challenges/NRFIN_00033/src/service.c
@@ -42,7 +42,7 @@ unsigned long getAuthVal() {
 		while (byte == 0 || byte == 0x0a) {
 			ret = random((void *)&byte, sizeof(byte), &rnd_bytes);
 			if(ret != 0)
-				_terminate(RANDOM_ERROR);	
+				_terminate(RANDOM_ERROR);
 		}
 		((unsigned char*)(&auth_val))[b] = byte;
 	}
@@ -63,17 +63,17 @@ void receiveCommand(Command* command) {
 	for(ret = 0; ret < 100; ret++)
 		getAuthVal();
 
-	bytesReceived = recvline(STDIN, command->input, MAX_ARGS_SIZE);	
+	bytesReceived = recvline(STDIN, command->input, MAX_ARGS_SIZE);
 	if(bytesReceived < 0)
 		_terminate(RECEIVE_ERROR);
 
 }
 
-void auth_failure(unsigned long t, char* resource) {	
+void auth_failure(unsigned long t, char* resource) {
 	char temp_buf[201];
 	char* message_buf=NULL;
 	int ret, i;
-	size_t message_size; 
+	size_t message_size;
 	unsigned long token[] = {0,0};
 
     token[0] = t;
@@ -97,6 +97,9 @@ void auth_failure(unsigned long t, char* resource) {
 #ifdef PATCHED
 	free(message_buf);
 #else
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.MallocOverflow, alpha.core.CallAndMessageUnInitRefArg, alpha.security.ArrayBoundV2, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 #endif
 
 }
@@ -106,7 +109,7 @@ unsigned long auth_success(char* resource) {
 #ifdef PATCHED
 	char* message_buf = NULL;
 #else
-	char* message_buf; 
+	char* message_buf;
 #endif
 	int ret;
 	int message_size;
@@ -136,8 +139,10 @@ unsigned long auth_success(char* resource) {
 #ifdef PATCHED
 	free(message_buf);
 #else
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
 #endif
-
 	return token[0];
 
 }
@@ -228,7 +233,7 @@ void revokeResource(User** user, unsigned long resourceToken, char* resourceName
 	for(resource_ptr=(*user)->resourceList; resource_ptr!= NULL; resource_ptr=resource_ptr->next) {
 		if(resource_ptr->name && (strncmp(resource_ptr->name, resourceName, RESOURCE_SIZE) == 0)) {
 			if(resource_ptr->token == resourceToken){
-				resource_ptr->token = ACCESS_REVOKED;		
+				resource_ptr->token = ACCESS_REVOKED;
 				reportMessage(RES_REVOKED_STR, sizeof(RES_REVOKED_STR)-1);
 				return;
 			} else {
@@ -292,7 +297,7 @@ int main(void) {
 				auth_val = getAuthVal();
 				user = createNewUser(&userList, auth_val, command.id);
 			}
-			
+
 			auth_val = user->token;
 			result = do_auth(user->token, command.token, command.input);
 			if(result > AUTH_FAIL) {
@@ -312,7 +317,7 @@ int main(void) {
 		if(strcmp(LOGOUT_CMD, command.type) == 0) {
 			logoutUser(&userList, command.id);
 			reportMessage(LOGGED_OUT_STR, sizeof(LOGGED_OUT_STR)-1);
-			
+
 			if(userList == NULL)
 				return 0;
 			else
@@ -324,11 +329,11 @@ int main(void) {
 			unsigned long resource_val = 0;
 
 			resource_val = getResourceToken(user->resourceList, command.input);
-			if(resource_val == ACCESS_REVOKED) 
+			if(resource_val == ACCESS_REVOKED)
 				result = AUTH_FAIL;
 			else if(resource_val > ACCESS_REVOKED && command.token > ACCESS_REVOKED)
 				result = do_auth(resource_val, command.token, command.input);
-			
+
 			if(result > AUTH_SUCCESS)
 				continue;
 			else if(result == AUTH_FAIL) {
diff --git a/cqe-challenges/NRFIN_00035/src/operation.c b/cqe-challenges/NRFIN_00035/src/operation.c
index 85d9e05c..402d3a3f 100644
--- a/cqe-challenges/NRFIN_00035/src/operation.c
+++ b/cqe-challenges/NRFIN_00035/src/operation.c
@@ -89,6 +89,9 @@ int check_levels(struct tankset *t) {
 #if PATCHED
 				syslog(LOG_ERROR, "Tank ~n level below critical level", t->tanks[idx]->id);
 #else
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.taint.TaintPropagation] This is a bug.
+#endif
 				// VULN: null ptr de-ref
 				syslog(LOG_ERROR, "Tank ~n level below critical level", t->tanks[TANK_QTY]->id);
 #endif
diff --git a/cqe-challenges/NRFIN_00035/src/tank.c b/cqe-challenges/NRFIN_00035/src/tank.c
index f540ea58..d5499e9a 100644
--- a/cqe-challenges/NRFIN_00035/src/tank.c
+++ b/cqe-challenges/NRFIN_00035/src/tank.c
@@ -74,7 +74,7 @@ int set_drain_rate(struct tank *t, uint8_t dr) {
 			t->drain_rate = 0;
 		} else {
 			t->drain_rate = dr;
-		}		
+		}
 	} else {
 		return ERR_END_OF_LIFE;
 	}
@@ -202,7 +202,10 @@ int add_water(struct tank *t, uint8_t qty) {
 	// int overflow.
 
 	for (uint8_t i = 0; i < qty; i++) {
-		t->contents[t->level++] = create_h2o();
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
+            t->contents[t->level++] = create_h2o();
 	}
 
 	return SUCCESS;
@@ -238,7 +241,7 @@ int do_fill(struct tank *t) {
 	if (FALSE == ret) {
 		if ((OPEN == t->valve_position) && (IN_SERVICE == t->status)) {
 			FAILBAIL(add_water(t, t->fill_rate));
-		}		
+		}
 	} else {
 		return ERR_END_OF_LIFE;
 	}
diff --git a/cqe-challenges/NRFIN_00036/src/map.c b/cqe-challenges/NRFIN_00036/src/map.c
index 41f24443..4458334d 100644
--- a/cqe-challenges/NRFIN_00036/src/map.c
+++ b/cqe-challenges/NRFIN_00036/src/map.c
@@ -33,7 +33,7 @@ Map* initMap(Map* map) {
 			_terminate(ALLOCATE_ERROR);
 		map_ptr += 127;
 		return map_ptr;
-	} 
+	}
 
 	for(map_ptr=map;*map_ptr->key!=0;map_ptr=map_ptr-1);
 
@@ -62,6 +62,9 @@ int setMap(Map **map, char* key, int value)
 #endif
 			return 0;
 		}
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.MallocOverflow, alpha.security.ArrayBoundV2, unix.API, alpha.core.PointerSub] This is a bug.
+#endif
 		map_ptr = initMap(prev_map_ptr);
 		map_ptr->next = *map;
 		*map = map_ptr;
@@ -72,7 +75,7 @@ int setMap(Map **map, char* key, int value)
 	}
 
 	map_ptr->value = value;
-	
+
 	return 1;
 }
 
@@ -81,7 +84,7 @@ int getValue(Map* map, char* key) {
 	for(map_ptr=map; map_ptr!=NULL; map_ptr=map_ptr->next) {
 		if(map_ptr->key && !strcmp(key, map_ptr->key)) { // Possible vuln: remove map->key check
 			return map_ptr->value;
-		} 
+		}
 	}
 
 	return 0;
@@ -99,6 +102,9 @@ uint32_t getSize(Map* map) {
 
 	return size;
 #else
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.MallocOverflow, alpha.security.ArrayBoundV2, unix.API, alpha.core.PointerSub, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 	for(last=map; last->next!=NULL; last=last->next);
 
 	return ((void *) last - (void *)map) / sizeof(Map) + 1;
@@ -132,4 +138,4 @@ void removeMap(Map **map, char* key) {
 	if(ret != 0)
 		_terminate(DEALLOCATE_ERROR);*/
 
-}
\ No newline at end of file
+}
diff --git a/cqe-challenges/NRFIN_00038/lib/md5.c b/cqe-challenges/NRFIN_00038/lib/md5.c
index e73b0452..8e81ab55 100644
--- a/cqe-challenges/NRFIN_00038/lib/md5.c
+++ b/cqe-challenges/NRFIN_00038/lib/md5.c
@@ -79,7 +79,7 @@ G(unsigned int X, unsigned int Y, unsigned int Z)
 {
     return (X & Z) | (Y & ~Z);
 }
-    
+
 static inline unsigned int
 H(unsigned int X, unsigned int Y, unsigned int Z)
 {
@@ -144,6 +144,9 @@ md5_pad(unsigned char *dst, const unsigned char *src, size_t n,
         (void)(total);
         (void)(is_extra);
 
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
         memset(dst, '\x80', to_pad);
         return 0;
 #else
@@ -257,4 +260,3 @@ md5_hmac(const unsigned char *key, size_t key_len, const unsigned char *msg,
     memset(o_key_pad, '\x00', sizeof(o_key_pad));
     memset(i_key_pad, '\x00', sizeof(i_key_pad));
 }
-
diff --git a/cqe-challenges/NRFIN_00038/src/service.c b/cqe-challenges/NRFIN_00038/src/service.c
index 3f8b3ad0..bbcf4ed9 100644
--- a/cqe-challenges/NRFIN_00038/src/service.c
+++ b/cqe-challenges/NRFIN_00038/src/service.c
@@ -117,7 +117,7 @@ adler32_sig(const char *token, size_t token_size, char *sig)
     strcpy(secret_token, secret);
     strcat(secret_token, token);
     *(unsigned int *)sig = adler32ish((unsigned char *)secret_token, secret_token_size - 1);
-    
+
     memset(secret_token, '\x00', secret_token_size);
     free(secret_token);
 
@@ -173,7 +173,7 @@ md5_sig(const char *token, size_t token_size, char *sig)
     strcpy(secret_token, secret);
     strcat(secret_token, token);
     md5((const unsigned char *)secret_token, secret_token_size - 1, (unsigned char *)sig);
-    
+
     memset(secret_token, '\x00', secret_token_size);
     free(secret_token);
 
@@ -263,7 +263,7 @@ md5_hmac_login(char *name)
 
     return 0;
 }
-    
+
 static int
 login(char *args)
 {
@@ -339,6 +339,9 @@ greet(char *token)
     for (tok = strtok(token, '|'); tok != NULL; tok = strtok(NULL, '|')) {
         if (strncmp(tok, "name=", 5) == 0) {
 #ifndef PATCHED
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
             strcpy(name, tok + 5);
 #else
             strncpy(name, tok + 5, MAX_NAME_LENGTH);
@@ -418,4 +421,3 @@ main(void) {
 
     return 0;
 }
-
diff --git a/cqe-challenges/NRFIN_00039/src/service.c b/cqe-challenges/NRFIN_00039/src/service.c
index 151c9d41..3e51b7ad 100644
--- a/cqe-challenges/NRFIN_00039/src/service.c
+++ b/cqe-challenges/NRFIN_00039/src/service.c
@@ -36,12 +36,18 @@ void newReport(Report *report) {
 #ifdef PATCHED
 			if(new_field == NULL)
 				_terminate(ALLOCATE_ERROR);
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [core.NullDereference] This is a bug.
 #endif
 			new_field->start = prev_pos-num_fields;
 			new_field->size = pos-prev_pos-1;
 #ifdef PATCHED
 			if(new_field->size <= 0 || new_field->size > MAX_FIELD_SIZE)
 				_terminate(FIELD_SIZE_ERROR);
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [core.NullDereference] This is a bug.
 #endif
 			new_field->next = report->fields;
 			report->fields = new_field;
@@ -55,10 +61,16 @@ void newReport(Report *report) {
             _terminate(FIELD_SIZE_ERROR);
 #endif
 	}
+#ifndef PATCHED
+// codechecker_confirmed [core.NullDereference] This is a bug.
+#endif
 	new_field = malloc(sizeof(Field));
 #ifdef PATCHED
 	if(new_field == NULL)
 		_terminate(ALLOCATE_ERROR);
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [core.NullDereference] This is a bug.
 #endif
 	new_field->start = prev_pos-num_fields;
 	new_field->size = pos-prev_pos-1;
@@ -66,7 +78,10 @@ void newReport(Report *report) {
 			if(new_field->size <= 0 || new_field->size > MAX_FIELD_SIZE)
 				_terminate(FIELD_SIZE_ERROR);
 #endif
-	new_field->next = report->fields;
+#ifndef PATCHED
+// codechecker_confirmed [core.NullDereference] This is a bug.
+#endif
+        new_field->next = report->fields;
 	report->fields = new_field;
 	num_fields++;
 
@@ -83,7 +98,7 @@ void sendReport(Report *report) {
 	int ret=0;
 
 	for(nextRecord=report->head; nextRecord != NULL; nextRecord = nextRecord->next) {
-		if(transmit_all(STDOUT, nextRecord->data, report->record_size)) 
+		if(transmit_all(STDOUT, nextRecord->data, report->record_size))
 			_terminate(TRANSMIT_ERROR);
 	}
 }
@@ -166,6 +181,9 @@ void filterReport(Report *report, Report* filteredReport, char* filterString) {
 #ifdef PATCHED
 				if(record == NULL)
 					_terminate(ALLOCATE_ERROR);
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [core.NullDereference] This is a bug.
 #endif
 				record->next = filteredReport->head;
 				record->data = nextRecord->data;
@@ -189,21 +207,29 @@ int newRecord(Report *report) {
 #ifdef PATCHED
 	if(record == NULL)
 		_terminate(ALLOCATE_ERROR);
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [core.NullDereference] This is a bug.
 #endif
 	record->next = NULL;
-	record->data = malloc(report->record_size*2); 
+	record->data = malloc(report->record_size*2);
 #ifdef PATCHED
 	if(record->data == NULL)
 		_terminate(ALLOCATE_ERROR);
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
 #endif
 	receive_buf = malloc(report->record_size*2);
 #ifdef PATCHED
 	if(receive_buf == NULL)
 		_terminate(ALLOCATE_ERROR);
 #endif
-
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
 	memset(record->data, 0, report->record_size);
-    
+
     for(nextField = report->fields; nextField != NULL; nextField = nextField->next) {
     	memset(receive_buf, 0, report->record_size);
     	recv(STDIN, receive_buf, nextField->size);
@@ -259,6 +285,9 @@ int newRecord(Report *report) {
 #ifdef PATCHED
 			free(record->data);
 #else
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.MallocOverflow, alpha.security.ArrayBoundV2, alpha.security.MallocOverflow, unix.Malloc, alpha.security.ArrayBoundV2] This is a bug.
+#endif
 			free(command);
 #endif
 			free(record);
diff --git a/cqe-challenges/NRFIN_00041/src/sentence.c b/cqe-challenges/NRFIN_00041/src/sentence.c
index 80d73c7d..0b4c6d93 100644
--- a/cqe-challenges/NRFIN_00041/src/sentence.c
+++ b/cqe-challenges/NRFIN_00041/src/sentence.c
@@ -97,6 +97,9 @@ int parse_sentence(const char *buf, struct sentence_struct *ss) {
 	if (MAX_SENTENCE_LEN < (end-p_buf+strlen(ss->ais_msg))) {
 		return ERR_INVALID_SENTENCE;
 	}
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.taint.TaintPropagation, alpha.security.ArrayBoundV2, alpha.security.MallocOverflow, core.uninitialized.ArraySubscript, alpha.security.ArrayBoundV2] This is a bug.
 #endif
 	ss->p_ais_msg_idx = fieldncpy(p_buf, ss->p_ais_msg_idx, end-p_buf);
 	if (EMPTY == ss->msg_status) {
diff --git a/cqe-challenges/NRFIN_00042/src/viewscript.c b/cqe-challenges/NRFIN_00042/src/viewscript.c
index ac001e8e..cb3aa69b 100644
--- a/cqe-challenges/NRFIN_00042/src/viewscript.c
+++ b/cqe-challenges/NRFIN_00042/src/viewscript.c
@@ -470,6 +470,9 @@ static int handleget() {
 
             if (view->bytesize) {
                 #ifndef PATCHED
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
                 if (!(idx+view->view->size < calc_bytesize(view->bytesize)))
                 #else
                 if (!(idx+view->view->size < calc_bytesize(view->bytesize) && calc_bytesize(view->bytesize) < view->arr->size))
@@ -626,6 +629,9 @@ int run_viewscript(char *script) {
     #ifdef PATCHED
     while (idx < count && (lines[++idx] = strtok(NULL,'\n')));
     #else 
+#ifndef PATCHED
+// codechecker_confirmed [unix.API, alpha.security.ArrayBoundV2] This is a bug.
+#endif
     while ((lines[++idx] = strtok(NULL,'\n')));
     #endif
     for (idx = 0; idx < count; idx++) {
diff --git a/cqe-challenges/YAN01_00007/src/main.c b/cqe-challenges/YAN01_00007/src/main.c
index 21c7bfc6..23146ea9 100644
--- a/cqe-challenges/YAN01_00007/src/main.c
+++ b/cqe-challenges/YAN01_00007/src/main.c
@@ -9,7 +9,7 @@ typedef void (*handler_func_t)(void);
 #define LARGE_INT_ARR_LEN (LARGE_INT_BYTES / sizeof(uint32_t))
 #define BITS_IN_UINT32 (sizeof(uint32_t) * 8)
 
-typedef struct _ulargeint_t 
+typedef struct _ulargeint_t
 {
   uint32_t bytes[LARGE_INT_ARR_LEN];
 } ulargeint_t;
@@ -41,7 +41,7 @@ static inline void intToLargeInt(ulargeint_t* plint, uint32_t i)
     return;
   }
   ZERO_LARGE_INT(plint);
-  plint->bytes[LARGE_INT_ARR_LEN - 1] = i;  
+  plint->bytes[LARGE_INT_ARR_LEN - 1] = i;
 }
 
 static inline void largeIntToInt(uint32_t* pi, ulargeint_t* plint)
@@ -50,13 +50,13 @@ static inline void largeIntToInt(uint32_t* pi, ulargeint_t* plint)
   {
     return;
   }
-  
+
   *pi = plint->bytes[LARGE_INT_ARR_LEN - 1];
 }
 
 void printLargeInt(ulargeint_t* plint)
 {
-  int i = 0; 
+  int i = 0;
 
   if (plint == NULL)
   {
@@ -152,7 +152,7 @@ int largeIntCmp(ulargeint_t* px, ulargeint_t* py)
   {
     return 0;
   }
- 
+
   for (i = 0; i < LARGE_INT_ARR_LEN; i++)
   {
     if (px->bytes[i] > py->bytes[i])
@@ -345,13 +345,13 @@ void initPasswords()
     }
   }
 }
-    
+
 int addPW(uint32_t u, uint32_t x, uint32_t y, uint32_t z)
 {
   int i = 0;
   for (i = 0; i < MAX_PASSWORDS; i++)
   {
-    if ( (userPasswords[u][i][0] == 0)  
+    if ( (userPasswords[u][i][0] == 0)
         && (userPasswords[u][i][1] == 0)
         && (userPasswords[u][i][2] == 0)
        )
@@ -362,7 +362,7 @@ int addPW(uint32_t u, uint32_t x, uint32_t y, uint32_t z)
       return (0);
     }
   }
-    
+
   return (-1);
 }
 
@@ -372,7 +372,7 @@ int rmPW(uint32_t u, uint32_t pwNum)
   int j = 0;
   for (i = 0; i < MAX_PASSWORDS; i++)
   {
-    if ( (userPasswords[u][i][0] != 0)  
+    if ( (userPasswords[u][i][0] != 0)
         && (userPasswords[u][i][1] != 0)
         && (userPasswords[u][i][2] != 0)
        )
@@ -414,16 +414,16 @@ void printPW(uint32_t u)
       my_printf(" : ");
       snprintdecimal(buf, 64, userPasswords[u][i][0]);
       my_printf(buf);
-       
+
       my_printf(" , ");
       snprintdecimal(buf, 64, userPasswords[u][i][1]);
       my_printf(buf);
-       
+
       my_printf(" , ");
       snprintdecimal(buf, 64, userPasswords[u][i][2]);
       my_printf(buf);
-      
-      my_printf("\n"); 
+
+      my_printf("\n");
       j++;
     }
   }
@@ -435,8 +435,8 @@ void userMenu(uint32_t u)
   uint32_t x, y, z;
   char buf[64];
 
-  do 
-  { 
+  do
+  {
     readLine(STDIN, buf, 64);
     switch(buf[0])
     {
@@ -450,7 +450,7 @@ void userMenu(uint32_t u)
         my_printf("First Secret\n");
         readLine(STDIN, buf, 64);
         x = strToUint32(buf);
-  
+
         my_printf("Second Secret\n");
         readLine(STDIN, buf, 64);
         y = strToUint32(buf);
@@ -458,7 +458,7 @@ void userMenu(uint32_t u)
         my_printf("Third Secret\n");
         readLine(STDIN, buf, 64);
         z = strToUint32(buf);
-      
+
         addPW(u, x, y, z);
         break;
       }
@@ -489,12 +489,12 @@ int checkLogin(ulargeint_t* pUserNum, ulargeint_t* px, ulargeint_t* py, ulargein
   ulargeint_t tempProduct;
 
 #ifdef PATCHED
-  if ( (largeIntCmp(px, py) >= 0) 
+  if ( (largeIntCmp(px, py) >= 0)
        || (largeIntCmp(py, pz) >= 0)
        || (largeIntCmp(pz, pUserNum) >= 0)
      )
 #else
-  if ( (largeIntCmp(px, py) > 0) 
+  if ( (largeIntCmp(px, py) > 0)
        || (largeIntCmp(py, pz) > 0)
        || (largeIntCmp(pz, pUserNum) > 0)
      )
@@ -504,21 +504,21 @@ int checkLogin(ulargeint_t* pUserNum, ulargeint_t* px, ulargeint_t* py, ulargein
   }
 
   ZERO_LARGE_INT(&tempSum);
-  
-  largeIntMul(&tempProduct, px, px);  
-  largeIntMul(&tempProduct, &tempProduct, px);  
+
+  largeIntMul(&tempProduct, px, px);
+  largeIntMul(&tempProduct, &tempProduct, px);
   largeIntAdd(&tempSum, &tempSum, &tempProduct);
 
-  largeIntMul(&tempProduct, py, py);  
-  largeIntMul(&tempProduct, &tempProduct, py);  
+  largeIntMul(&tempProduct, py, py);
+  largeIntMul(&tempProduct, &tempProduct, py);
   largeIntAdd(&tempSum, &tempSum, &tempProduct);
 
-  largeIntMul(&tempProduct, pz, pz);  
-  largeIntMul(&tempProduct, &tempProduct, pz);  
+  largeIntMul(&tempProduct, pz, pz);
+  largeIntMul(&tempProduct, &tempProduct, pz);
   largeIntAdd(&tempSum, &tempSum, &tempProduct);
 
-  largeIntMul(&tempProduct, pUserNum, pUserNum);  
-  largeIntMul(&tempProduct, &tempProduct, pUserNum);  
+  largeIntMul(&tempProduct, pUserNum, pUserNum);
+  largeIntMul(&tempProduct, &tempProduct, pUserNum);
 
   return ( largeIntCmp(&tempProduct, &tempSum) == 0 );
 }
@@ -538,14 +538,14 @@ int main(void)
   initTable();
   initPasswords();
 
-  do 
+  do
   {
     my_printf("Welcome to the Diophantine Password Wallet\n");
 
     my_printf("Login\n");
     readLine(STDIN, buf, 64);
     userNum = strToUint32(buf);
-  
+
     my_printf("First Secret\n");
     readLine(STDIN, buf, 64);
     x = strToUint32(buf);
@@ -572,7 +572,7 @@ int main(void)
 
     if(checkLogin(&luserPW, &lx, &ly, &lz))
     {
-      handlerTable[x][y][z](); 
+      handlerTable[x][y][z]();
     }
     else
     {
diff --git a/cqe-challenges/YAN01_00009/cb_2/src/walkthrough.c b/cqe-challenges/YAN01_00009/cb_2/src/walkthrough.c
index 39aada6c..4874c033 100644
--- a/cqe-challenges/YAN01_00009/cb_2/src/walkthrough.c
+++ b/cqe-challenges/YAN01_00009/cb_2/src/walkthrough.c
@@ -76,6 +76,9 @@ int main(void)
 #ifdef PATCHED
           msg.msgLen = snprintf(gOutBuf, PAGE_SIZE, "#s : #s", (char*)gBuf, gPageNotFoundError);
 #else
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.taint.TaintPropagation] This is a bug.
+#endif
           msg.msgLen = snprintf(gOutBuf, PAGE_SIZE, (char*)gBuf);
           msg.msgLen += snprintf(gOutBuf + msg.msgLen, PAGE_SIZE - msg.msgLen, " : #s", gPageNotFoundError);
 #endif 
diff --git a/cqe-challenges/YAN01_00009/cb_3/src/newsletter.c b/cqe-challenges/YAN01_00009/cb_3/src/newsletter.c
index 90fb15ae..e5af6d8d 100644
--- a/cqe-challenges/YAN01_00009/cb_3/src/newsletter.c
+++ b/cqe-challenges/YAN01_00009/cb_3/src/newsletter.c
@@ -76,6 +76,9 @@ int main(void)
 #ifdef PATCHED
           msg.msgLen = snprintf(gOutBuf, PAGE_SIZE, "#s : #s", (char*)gBuf, gPageNotFoundError);
 #else
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.taint.TaintPropagation] This is a bug.
+#endif
           msg.msgLen = snprintf(gOutBuf, PAGE_SIZE, (char*)gBuf);
           msg.msgLen += snprintf(gOutBuf + msg.msgLen, PAGE_SIZE - msg.msgLen, " : #s", gPageNotFoundError);
 #endif 
diff --git a/cqe-challenges/YAN01_00010/src/main.c b/cqe-challenges/YAN01_00010/src/main.c
index 9a907339..d1ab8109 100644
--- a/cqe-challenges/YAN01_00010/src/main.c
+++ b/cqe-challenges/YAN01_00010/src/main.c
@@ -5,13 +5,13 @@
 #define ROW_2 (BOARD_SIZE - 2)
 #define ONE_CHAR '1'
 #define ZERO_CHAR '.'
-#define END_CHAR 0xFF 
+#define END_CHAR 0xFF
 #define INIT_VALUE 0xFFFFFFFF
 
 #define ROW_COL_MASK(_move) (_move & 0x1F)
 #define IS_RIGHT(_move) (_move & 0x20)
 
-//#define BOX_MASK 0xC0000000 
+//#define BOX_MASK 0xC0000000
 #define BOX_MASK 0x00000003
 
 typedef unsigned int uint32_t;
@@ -26,7 +26,7 @@ size_t transmit_all(int fd, char* buf, size_t size)
   {
     return (0);
   }
-  
+
   do
   {
     ret = transmit(fd, buf, size - total, &rx_bytes);
@@ -50,7 +50,7 @@ size_t receive_all(int fd, char* buf, size_t size)
   {
     return (0);
   }
-  
+
   do
   {
     ret = receive(fd, buf, size-total, &rx_bytes);
@@ -61,7 +61,7 @@ size_t receive_all(int fd, char* buf, size_t size)
     total += rx_bytes;
   }
   while (total < size);
-  
+
   return (size);
 }
 
@@ -75,7 +75,7 @@ void rotate_right(int row)
   {
     return;
   }
-  
+
   temp = gBoard[row] >> 31; //temp now has msb at the lsb
   gBoard[row] = (gBoard[row] << 1) | temp;
 }
@@ -92,7 +92,7 @@ uint32_t neg_mask[32] = { ~0x1, ~0x2, ~0x4, ~0x8, ~0x10, ~0x20, ~0x40, ~0x80,
 
 void rotate_down(int col)
 {
-  int i = 0; 
+  int i = 0;
   uint32_t temp = 0;
   if ( (col < 0) || (col >= BOARD_SIZE) )
   {
@@ -102,16 +102,16 @@ void rotate_down(int col)
   temp = gBoard[31];
   for (i = 31; i > 0; i--)
   {
-    gBoard[i] = (gBoard[i] & neg_mask[col]) | (gBoard[i-1] & mask[col]);    
+    gBoard[i] = (gBoard[i] & neg_mask[col]) | (gBoard[i-1] & mask[col]);
   }
-  
-  gBoard[0] = (gBoard[0] & neg_mask[col]) | (temp & mask[col]);    
+
+  gBoard[0] = (gBoard[0] & neg_mask[col]) | (temp & mask[col]);
 }
 
 void printBoard()
 {
   int i = 0;
-  int j = 0; 
+  int j = 0;
   int k = 0;
   char buf[32 * 34]; //big string buffer
 
@@ -126,12 +126,12 @@ void printBoard()
       else
       {
         buf[k++] = ZERO_CHAR;
-      } 
-    } 
+      }
+    }
     buf[k++] = '\n';
   }
   buf[k] = '\0';
-  
+
   transmit_all(1, buf, k);
 }
 
@@ -170,7 +170,7 @@ void makeMove(uint8_t move)
 
 int isWinner()
 {
-  int i = 0; 
+  int i = 0;
   for (i = 0; i < BOARD_SIZE; i++)
   {
     if (gBoard[i] != 0)
@@ -186,27 +186,29 @@ int main(void)
   uint8_t temp;
 
   initBoard();
-  
+
   while (!isWinner())
   {
     if (receive_all(0, &temp, 1) != 1)
     {
       printBoard();
       return (0);
-    }    
+    }
     if (temp == END_CHAR)
     {
       printBoard();
       return (0);
-    } 
+    }
     makeMove(temp);
   }
-  
+
 #ifdef PATCHED
 #else
+#ifndef PATCHED
+// codechecker_confirmed [core.NullDereference] This is a bug.
+#endif
   ((int (*)())0)();
 #endif
 
   transmit_all(1, "You Win\n", 8);
 }
-
diff --git a/cqe-challenges/YAN01_00011/src/main.c b/cqe-challenges/YAN01_00011/src/main.c
index 28852e1e..5558b212 100644
--- a/cqe-challenges/YAN01_00011/src/main.c
+++ b/cqe-challenges/YAN01_00011/src/main.c
@@ -20,7 +20,7 @@ char gValidChars[] = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ012345
 
 size_t strlen(char* str)
 {
-  size_t ret = 0; 
+  size_t ret = 0;
   if (str == NULL)
   {
     return (0);
@@ -40,7 +40,7 @@ size_t transmit_all(char* buf, size_t size)
   {
     return (0);
   }
-  
+
   do
   {
     ret = transmit(STDOUT, buf, size - total, &rx_bytes);
@@ -70,7 +70,7 @@ size_t receive_all(char* buf, size_t size)
   {
     return (0);
   }
-  
+
   do
   {
     ret = receive(STDIN, buf, size-total, &rx_bytes);
@@ -81,7 +81,7 @@ size_t receive_all(char* buf, size_t size)
     total += rx_bytes;
   }
   while (total < size);
-  
+
   return (size);
 }
 
@@ -107,7 +107,7 @@ size_t readline(char* buf, size_t len)
     count++;
   } while ( (c != '\n') && (count < len) );
 
-  return (count); 
+  return (count);
 }
 
 char rotN(char c, int n)
@@ -126,7 +126,7 @@ char rotN(char c, int n)
   else if ( (c >= '0') && (c <= '9') )
   {
     temp = c - '0' + 52;
-  } 
+  }
   else
   {
     return (c); //no rotation
@@ -177,14 +177,14 @@ int init(int rot)
     total += strlen(gSeedWords[i]);
     total += 1; //for the NULL character
   }
- 
+
   ret = allocate(total, 0, (void**)(&gWordData));
   if (ret != 0)
   {
     return (ret);
-  } 
+  }
 
-  //now that we have both we can fill in the data  
+  //now that we have both we can fill in the data
   size_t temp = 0;
   char* pTemp = gWordData;
   for (i = 0; i < numWords; i++)
@@ -193,7 +193,7 @@ int init(int rot)
     pTemp += strrotcpy(pTemp, gSeedWords[i], rot);
     pTemp += 1; //for the NULL character
   }
-  
+
   for ( ; i < (PAGE_SIZE / sizeof(char*)); i++)
   {
     gWords[i] = 0;
@@ -212,13 +212,13 @@ int toInt(char c1, char c2)
     if ( (c2 >= '0') && (c2 <= '9') )
     {
       ret *= 10;
-      ret += c2 - '0'; 
+      ret += c2 - '0';
       return (ret);
     }
     else if (c2 != '\0')
     {
-      return (ret); 
-    }  
+      return (ret);
+    }
     else
     {
       return (0);
@@ -275,7 +275,7 @@ int strcmp(char* s1, char* s2)
     if (s2[i] == '\0')
     {
       return (1);
-    } 
+    }
     if (s1[i] < s2[i])
     {
       return (-1);
@@ -292,7 +292,7 @@ int strcmp(char* s1, char* s2)
   {
     return (0);
   }
-  
+
   return (-1);
 }
 
@@ -314,7 +314,9 @@ void scramble(char* dst, char* src, size_t len)
 
   int i = 0;
   uint32_t r = (rand() % 3) + 2;
-
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
   while ( (src[i] != '\0') && (i < len) )
   {
     if (IS_VALID_CHAR(src[i]))
@@ -326,8 +328,8 @@ void scramble(char* dst, char* src, size_t len)
       else
       {
         dst[i] = '_';
-      }       
-    }    
+      }
+    }
     else
     {
       dst[i] = src[i];
@@ -353,23 +355,23 @@ int main(void)
 
   transmit_str(ENTER_NUM_MSG);
   READLINE(buf, BUF_SIZE);
-  
+
   i = toInt(buf[0], buf[1]);
   if (init(i+1) != 0)
   {
     return (-1);
   }
- 
+
   //initialize the LFSR
   srand(*((int*)buf));
-  
+
   for (i = 0; i < NUM_ROUNDS; i++)
   {
     if (i == 0)
     {
       transmit_str(WORD_MSG);
     }
-    else 
+    else
     {
       transmit_str(NEXT_WORD_MSG);
     }
@@ -379,7 +381,7 @@ int main(void)
     transmit_str(buf);
     transmit_all(&c, 1);
     READLINE(buf, BUF_SIZE);
-  
+
     buf[sret-1] = '\0';
 
     if (strcmp(buf, gWords[temp]) != 0)
@@ -389,21 +391,23 @@ int main(void)
     }
   }
 
-  transmit_str(FINAL_RND_MSG);      
+  transmit_str(FINAL_RND_MSG);
   READLINE(buf, BUF_SIZE);
-  
+
   i = toInt(buf[0], buf[1]);
 
 #if PATCHED
   i = i % NUM_WORDS;
 #endif
-
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.ArrayBoundV2] This is a bug.
+#endif
   scramble(buf, gWords[i], BUF_SIZE);
 
   transmit_str(buf);
   transmit_all(&c, 1);
   READLINE(buf, BUF_SIZE);
-  
+
   buf[sret-1] = '\0';
 
   if (strcmp(buf, gWords[i]) != 0)
@@ -416,4 +420,3 @@ int main(void)
   }
   return (0);
 }
-
diff --git a/cqe-challenges/YAN01_00012/src/main.c b/cqe-challenges/YAN01_00012/src/main.c
index ab2ca00d..ceb074d3 100644
--- a/cqe-challenges/YAN01_00012/src/main.c
+++ b/cqe-challenges/YAN01_00012/src/main.c
@@ -168,6 +168,9 @@ int main(void)
           transmit_all(_STACK_OVERFLOW_EXCP_MSG_, sizeof(_STACK_OVERFLOW_EXCP_MSG_));
           _terminate(-1);
         }
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.MallocOverflow] This is a bug.
 #endif
         stack[curTop] = INSN_TO_IMM(insn);
         break;
@@ -244,6 +247,9 @@ int main(void)
           transmit_all(_STACK_OVERFLOW_EXCP_MSG_, sizeof(_STACK_OVERFLOW_EXCP_MSG_));
           _terminate(-1);
         }
+#endif
+#ifndef PATCHED
+// codechecker_confirmed [alpha.security.MallocOverflow] This is a bug.
 #endif
         int temp = curTop - INSN_TO_IMM(insn) - 1;
          
