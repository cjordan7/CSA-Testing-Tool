diff --git a/crypto/asn1/a_d2i_fp.c b/crypto/asn1/a_d2i_fp.c
index e8602053f9..be0bb30893 100644
--- a/crypto/asn1/a_d2i_fp.c
+++ b/crypto/asn1/a_d2i_fp.c
@@ -188,9 +188,13 @@ int asn1_d2i_read_bio(BIO *in, BUF_MEM **pb)
             /* suck in slen bytes of data */
             want = slen;
             if (want > (len - off)) {
-                size_t chunk_max = ASN1_CHUNK_INITIAL_SIZE;
 
                 want -= (len - off);
+#ifdef MAGMA_ENABLE_FIXES//SSL003.patch
+                size_t chunk_max = ASN1_CHUNK_INITIAL_SIZE;
+#else
+                size_t chunk_max = want;
+#endif//SSL003.patch
                 if (want > INT_MAX /* BIO_read takes an int length */  ||
                     len + want < len) {
                     ERR_raise(ERR_LIB_ASN1, ASN1_R_TOO_LONG);
diff --git a/crypto/asn1/a_int.c b/crypto/asn1/a_int.c
index 19e41ec73e..f32195cc55 100644
--- a/crypto/asn1/a_int.c
+++ b/crypto/asn1/a_int.c
@@ -139,7 +139,50 @@ static size_t i2c_ibuf(const unsigned char *b, size_t blen, int neg,
     *p = pb;
     p += pad;       /* yes, p[0] can be written twice, but it's little
                      * price to pay for eliminated branches */
-    twos_complement(p, b, blen, pb);
+#ifdef MAGMA_ENABLE_FIXES//SSL001.patch
+     twos_complement(p, b, blen, pb);
+#else//SSL001.patch
+    if (blen == 0)
+        *(p++) = 0;
+    else if (!neg)
+        memcpy(p, b, (unsigned int)blen);
+    else {
+        /* Begin at the end of the encoding */
+        const unsigned char *n = b + blen - 1;
+        p += blen - 1;
+        i = blen;
+
+        /**
+         * The representation of a negative zero is just all zeros. This routine
+         * tries to optimize 2's complement by skipping all trailing zeros,
+         * since trailing zeros are convserved by 2's complement. However, a
+         * negative zero number is all trailing zeros. Thus, the routine will
+         * underflow trying to skip them.
+         */
+
+        /* Copy zeros to destination as long as source is zero */
+        while (!*n) {
+            *(p--) = 0;
+            n--;
+            i--;
+#ifdef MAGMA_ENABLE_CANARIES//SSL001.patch
+            /**
+             * The value of `i` determines how many more iterations this loop
+             * can perform before underflowing. Once `i` reaches zero, the next
+             * iteration will result in dereferencing `n` outside the bounds of
+             * `b`.
+             */
+            MAGMA_LOG("%MAGMA_BUG%", i == 0);
+#endif//SSL001.patch
+        }
+        /* Complement and increment next octet */
+        *(p--) = ((*(n--)) ^ 0xff) + 1;
+        i--;
+        /* Complement any octets left */
+        for (; i > 0; i--)
+            *(p--) = *(n--) ^ 0xff;
+    }
+#endif//SSL001.patch
 
     *pp += ret;
     return ret;
@@ -640,4 +683,3 @@ int ossl_i2c_uint64_int(unsigned char *p, uint64_t r, int neg)
     off = asn1_put_uint64(buf, r);
     return i2c_ibuf(buf + off, sizeof(buf) - off, neg, &p);
 }
-
diff --git a/crypto/asn1/a_type.c b/crypto/asn1/a_type.c
index 6b638bd80c..c1e5c4f6c7 100644
--- a/crypto/asn1/a_type.c
+++ b/crypto/asn1/a_type.c
@@ -71,12 +71,18 @@ int ASN1_TYPE_cmp(const ASN1_TYPE *a, const ASN1_TYPE *b)
     case V_ASN1_OBJECT:
         result = OBJ_cmp(a->value.object, b->value.object);
         break;
+#ifdef MAGMA_ENABLE_FIXES//SSL014.patch
     case V_ASN1_BOOLEAN:
         result = a->value.boolean - b->value.boolean;
         break;
+#endif//SSL014.patch
     case V_ASN1_NULL:
         result = 0;             /* They do not have content. */
         break;
+#ifndef MAGMA_ENABLE_FIXES//SSL001.patch
+    case V_ASN1_NEG_INTEGER:
+    case V_ASN1_NEG_ENUMERATED:
+#endif//SSL001.patch
     case V_ASN1_INTEGER:
     case V_ASN1_ENUMERATED:
     case V_ASN1_BIT_STRING:
@@ -98,6 +104,9 @@ int ASN1_TYPE_cmp(const ASN1_TYPE *a, const ASN1_TYPE *b)
     case V_ASN1_UTF8STRING:
     case V_ASN1_OTHER:
     default:
+#ifdef MAGMA_ENABLE_CANARIES//SSL014.patch
+    MAGMA_LOG("%MAGMA_BUG%", a->type == V_ASN1_BOOLEAN);
+#endif//SSL014.patch
         result = ASN1_STRING_cmp((ASN1_STRING *)a->value.ptr,
                                  (ASN1_STRING *)b->value.ptr);
         break;
diff --git a/crypto/asn1/tasn_dec.c b/crypto/asn1/tasn_dec.c
index eff67d87fc..adb92745c4 100644
--- a/crypto/asn1/tasn_dec.c
+++ b/crypto/asn1/tasn_dec.c
@@ -886,6 +886,10 @@ static int asn1_ex_c2i(ASN1_VALUE **pval, const unsigned char *cont, int len,
             goto err;
         break;
 
+#ifndef MAGMA_ENABLE_FIXES// 001.patch
+    case V_ASN1_NEG_INTEGER:
+    case V_ASN1_NEG_ENUMERATED:
+#endif// 001.patch
     case V_ASN1_INTEGER:
     case V_ASN1_ENUMERATED:
         tint = (ASN1_INTEGER **)pval;
diff --git a/crypto/asn1/tasn_enc.c b/crypto/asn1/tasn_enc.c
index 2d24320af9..3e05eab64f 100644
--- a/crypto/asn1/tasn_enc.c
+++ b/crypto/asn1/tasn_enc.c
@@ -585,7 +585,10 @@ static int asn1_ex_i2c(const ASN1_VALUE **pval, unsigned char *cout, int *putype
     case V_ASN1_BIT_STRING:
         return ossl_i2c_ASN1_BIT_STRING((ASN1_BIT_STRING *)*pval,
                                         cout ? &cout : NULL);
-
+#ifndef MAGMA_ENABLE_FIXES//SSL001.patch
+    case V_ASN1_NEG_INTEGER:
+    case V_ASN1_NEG_ENUMERATED:
+#endif//SSL001.patch
     case V_ASN1_INTEGER:
     case V_ASN1_ENUMERATED:
         /*
diff --git a/crypto/bn/bn_gf2m.c b/crypto/bn/bn_gf2m.c
index 304c2ea08d..28584868de 100644
--- a/crypto/bn/bn_gf2m.c
+++ b/crypto/bn/bn_gf2m.c
@@ -670,12 +670,21 @@ static int BN_GF2m_mod_inv_vartime(BIGNUM *r, const BIGNUM *a,
                 ubits--;
             }
 
+#ifdef MAGMA_ENABLE_FIXES//SSL016.patch
             if (ubits <= BN_BITS2) {
                 if (udp[0] == 0) /* poly was reducible */
                     goto err;
                 if (udp[0] == 1)
                     break;
             }
+#else//SSL016.patch
+#ifdef MAGMA_ENABLE_CANARIES//SSL016.patch
+            MAGMA_LOG("%MAGMA_BUG%", udp[0] == 0);
+#endif//SSL016.patch
+            if (ubits <= BN_BITS2 && udp[0] == 1)
+                    break;
+
+#endif
 
             if (ubits < vbits) {
                 i = ubits;
diff --git a/crypto/bn/bn_local.h b/crypto/bn/bn_local.h
index 3c8534e1f7..987295017c 100644
--- a/crypto/bn/bn_local.h
+++ b/crypto/bn/bn_local.h
@@ -663,6 +663,7 @@ BIGNUM *int_bn_mod_inverse(BIGNUM *in,
 
 static ossl_inline BIGNUM *bn_expand(BIGNUM *a, int bits)
 {
+#ifdef MAGMA_ENABLE_FIXES//SSL010.patch
     if (bits > (INT_MAX - BN_BITS2 + 1))
         return NULL;
 
@@ -670,6 +671,9 @@ static ossl_inline BIGNUM *bn_expand(BIGNUM *a, int bits)
         return a;
 
     return bn_expand2((a),(bits+BN_BITS2-1)/BN_BITS2);
+#else
+    return ((((((bits+BN_BITS2-1))/BN_BITS2)) <= (a)->dmax)?(a):bn_expand2((a),(bits+BN_BITS2-1)/BN_BITS2));
+#endif//SSL010.patch
 }
 
 int ossl_bn_check_prime(const BIGNUM *w, int checks, BN_CTX *ctx,
diff --git a/crypto/evp/encode.c b/crypto/evp/encode.c
index 2c047fa039..3a25a3c5df 100644
--- a/crypto/evp/encode.c
+++ b/crypto/evp/encode.c
@@ -169,7 +169,18 @@ int EVP_EncodeUpdate(EVP_ENCODE_CTX *ctx, unsigned char *out, int *outl,
     if (inl <= 0)
         return 0;
     OPENSSL_assert(ctx->length <= (int)sizeof(ctx->enc_data));
+#ifdef MAGMA_ENABLE_FIXES//SSL006.patch
     if (ctx->length - ctx->num > inl) {
+#else
+#ifdef MAGMA_ENABLE_CANARIES//SSL006.patch
+    /**
+    * Potential integer overflow if we supply a large amount
+    * of input data
+    */
+    MAGMA_LOG("%MAGMA_BUG%", INT_MAX - inl < ctx->num);
+#endif//SSL006.patch
+    if ((ctx->num + inl) < ctx->length) {
+#endif//SSL006.patch
         memcpy(&(ctx->enc_data[ctx->num]), in, inl);
         ctx->num += inl;
         return 1;
diff --git a/crypto/mdc2/mdc2dgst.c b/crypto/mdc2/mdc2dgst.c
index 607f9fc73a..0bc19b6a69 100644
--- a/crypto/mdc2/mdc2dgst.c
+++ b/crypto/mdc2/mdc2dgst.c
@@ -12,7 +12,7 @@
  * internal use.
  */
 #include "internal/deprecated.h"
-
+#include <limits.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
@@ -48,7 +48,14 @@ int MDC2_Update(MDC2_CTX *c, const unsigned char *in, size_t len)
 
     i = c->num;
     if (i != 0) {
+#ifdef MAGMA_ENABLE_FIXES//SSL007.patch
         if (len < MDC2_BLOCK - i) {
+#else
+#ifdef MAGMA_ENABLE_CANARIES
+        MAGMA_LOG("%MAGMA_BUG%", SIZE_MAX - len < i);
+#endif//SSL007.patch
+        if (i + len < MDC2_BLOCK) {
+#endif
             /* partial block */
             memcpy(&(c->data[i]), in, len);
             c->num += (int)len;
diff --git a/crypto/pkcs7/pk7_doit.c b/crypto/pkcs7/pk7_doit.c
index 441bf78bba..ee713b4dd3 100644
--- a/crypto/pkcs7/pk7_doit.c
+++ b/crypto/pkcs7/pk7_doit.c
@@ -216,7 +216,7 @@ BIO *PKCS7_dataInit(PKCS7 *p7, BIO *bio)
     const PKCS7_CTX *p7_ctx;
     OSSL_LIB_CTX *libctx;
     const char *propq;
-
+#ifdef MAGMA_ENABLE_FIXES//SSL015.patch
     if (p7 == NULL) {
         ERR_raise(ERR_LIB_PKCS7, PKCS7_R_INVALID_NULL_POINTER);
         return NULL;
@@ -239,6 +239,11 @@ BIO *PKCS7_dataInit(PKCS7 *p7, BIO *bio)
         ERR_raise(ERR_LIB_PKCS7, PKCS7_R_NO_CONTENT);
         return NULL;
     }
+#else//SSL015.patch
+#ifdef MAGMA_ENABLE_CANARIES
+    MAGMA_LOG("%MAGMA_BUG%", MAGMA_OR(p7 == NULL, p7->d.ptr));
+#endif
+#endif//SSL015.patch
 
     i = OBJ_obj2nid(p7->type);
     p7->state = PKCS7_S_HEADER;
@@ -409,7 +414,7 @@ BIO *PKCS7_dataDecode(PKCS7 *p7, EVP_PKEY *pkey, BIO *in_bio, X509 *pcert)
     const PKCS7_CTX *p7_ctx;
     OSSL_LIB_CTX *libctx;
     const char *propq;
-
+#ifdef MAGMA_ENABLE_FIXES//SSL015.patch
     if (p7 == NULL) {
         ERR_raise(ERR_LIB_PKCS7, PKCS7_R_INVALID_NULL_POINTER);
         return NULL;
@@ -424,6 +429,11 @@ BIO *PKCS7_dataDecode(PKCS7 *p7, EVP_PKEY *pkey, BIO *in_bio, X509 *pcert)
         return NULL;
     }
 
+#else///SSL015.patch
+#ifdef MAGMA_ENABLE_CANARIES
+    MAGMA_LOG("%MAGMA_BUG%", MAGMA_OR(p7 == NULL, p7->d.ptr == NULL));
+#endif
+#endif///SSL015.patch
     i = OBJ_obj2nid(p7->type);
     p7->state = PKCS7_S_HEADER;
 
@@ -492,10 +502,15 @@ BIO *PKCS7_dataDecode(PKCS7 *p7, EVP_PKEY *pkey, BIO *in_bio, X509 *pcert)
     }
 
     /* Detached content must be supplied via in_bio instead. */
+#ifdef MAGMA_ENABLE_FIXES//SSL011.patch
     if (data_body == NULL && in_bio == NULL) {
         ERR_raise(ERR_LIB_PKCS7, PKCS7_R_NO_CONTENT);
         goto err;
     }
+#endif
+#ifdef MAGMA_ENABLE_CANARIES
+        MAGMA_LOG("%MAGMA_BUG%", MAGMA_AND(data_body == NULL, in_bio == NULL));
+#endif//SSL011.patch
 
     /* We will be checking the signature */
     if (md_sk != NULL) {
@@ -636,7 +651,11 @@ BIO *PKCS7_dataDecode(PKCS7 *p7, EVP_PKEY *pkey, BIO *in_bio, X509 *pcert)
             BIO_push(out, etmp);
         etmp = NULL;
     }
+#ifdef MAGMA_ENABLE_FIXES//SSL011.patch
     if (in_bio != NULL) {
+#else
+    if (PKCS7_is_detached(p7) || (in_bio != NULL)) {
+#endif//SSL011.patch
         bio = in_bio;
     } else {
         if (data_body->length > 0)
@@ -727,7 +746,7 @@ int PKCS7_dataFinal(PKCS7 *p7, BIO *bio)
     STACK_OF(PKCS7_SIGNER_INFO) *si_sk = NULL;
     ASN1_OCTET_STRING *os = NULL;
     const PKCS7_CTX *p7_ctx;
-
+#ifdef MAGMA_ENABLE_FIXES//SSL015.patch
     if (p7 == NULL) {
         ERR_raise(ERR_LIB_PKCS7, PKCS7_R_INVALID_NULL_POINTER);
         return 0;
@@ -739,7 +758,11 @@ int PKCS7_dataFinal(PKCS7 *p7, BIO *bio)
         ERR_raise(ERR_LIB_PKCS7, PKCS7_R_NO_CONTENT);
         return 0;
     }
-
+#else//SSL015.patch
+#ifdef MAGMA_ENABLE_CANARIES//SSL015.patch
+    MAGMA_LOG("%MAGMA_BUG%", MAGMA_OR(p7 == NULL, p7->d.ptr == NULL));
+#endif//SSL015.patch
+#endif//SSL015.patch
     ctx_tmp = EVP_MD_CTX_new();
     if (ctx_tmp == NULL) {
         ERR_raise(ERR_LIB_PKCS7, ERR_R_MALLOC_FAILURE);
@@ -957,6 +980,7 @@ int PKCS7_dataVerify(X509_STORE *cert_store, X509_STORE_CTX *ctx, BIO *bio,
     STACK_OF(X509) *cert;
     X509 *x509;
 
+#ifdef MAGMA_ENABLE_FIXES//SSL015.patch
     if (p7 == NULL) {
         ERR_raise(ERR_LIB_PKCS7, PKCS7_R_INVALID_NULL_POINTER);
         return 0;
@@ -966,6 +990,11 @@ int PKCS7_dataVerify(X509_STORE *cert_store, X509_STORE_CTX *ctx, BIO *bio,
         ERR_raise(ERR_LIB_PKCS7, PKCS7_R_NO_CONTENT);
         return 0;
     }
+#else//SSL015.patch
+#ifdef MAGMA_ENABLE_CANARIES
+    MAGMA_LOG("%MAGMA_BUG%", MAGMA_OR(p7 == NULL, p7->d.ptr));
+#endif
+#endif//SSL015.patch
 
     if (PKCS7_type_is_signed(p7)) {
         cert = p7->d.sign->cert;
diff --git a/crypto/rsa/rsa_ameth.c b/crypto/rsa/rsa_ameth.c
index b1580ca48c..5a3123efb1 100644
--- a/crypto/rsa/rsa_ameth.c
+++ b/crypto/rsa/rsa_ameth.c
@@ -617,7 +617,15 @@ static int rsa_item_verify(EVP_MD_CTX *ctx, const ASN1_ITEM *it,
         ERR_raise(ERR_LIB_RSA, RSA_R_UNSUPPORTED_SIGNATURE_TYPE);
         return -1;
     }
+#ifdef MAGMA_ENABLE_FIXES    //SSL013.patch
     if (ossl_rsa_pss_to_ctx(ctx, NULL, sigalg, pkey) > 0) {
+#else//SSL013.patch
+    int magma_int = ossl_rsa_pss_to_ctx(ctx, NULL, sigalg, pkey);
+#ifdef MAGMA_ENABLE_CANARIES//SSL013.patch
+    MAGMA_LOG("%MAGMA_BUG%", magma_int < 0);
+#endif//SSL013.patch
+    if (magma_int) {
+#endif//SSL013.patch
         /* Carry on */
         return 2;
     }
diff --git a/crypto/x509/v3_addr.c b/crypto/x509/v3_addr.c
index 8bb35bd8a3..655dec9a72 100644
--- a/crypto/x509/v3_addr.c
+++ b/crypto/x509/v3_addr.c
@@ -85,12 +85,31 @@ static int length_from_afi(const unsigned afi)
  */
 unsigned int X509v3_addr_get_afi(const IPAddressFamily *f)
 {
+#ifdef MAGMA_ENABLE_FIXES//SSL009.patch
     if (f == NULL
             || f->addressFamily == NULL
             || f->addressFamily->data == NULL
             || f->addressFamily->length < 2)
         return 0;
     return (f->addressFamily->data[0] << 8) | f->addressFamily->data[1];
+#else
+#ifdef MAGMA_ENABLE_CANARIES//SSL009.patch
+    /**
+    *This bug will do a 1 byte overread when the length is too short
+    */
+    MAGMA_LOG("%MAGMA_BUG%", MAGMA_AND(f != NULL, \
+            MAGMA_AND(f->addressFamily != NULL, \
+            MAGMA_AND(f->addressFamily->data != NULL, \
+            f->addressFamily->length < 2)))
+    );
+
+#endif//SSL009.patch
+    return ((f != NULL &&
+            f->addressFamily != NULL && f->addressFamily->data != NULL)
+            ? ((f->addressFamily->data[0] << 8) | (f->addressFamily->data[1]))
+            : 0);
+
+#endif//SSL009.patch
 }
 
 /*
diff --git a/crypto/x509/x509_obj.c b/crypto/x509/x509_obj.c
index 12c6d6f78b..77c6432d44 100644
--- a/crypto/x509/x509_obj.c
+++ b/crypto/x509/x509_obj.c
@@ -83,9 +83,22 @@ char *X509_NAME_oneline(const X509_NAME *a, char *buf, int len)
             type == V_ASN1_PRINTABLESTRING ||
             type == V_ASN1_TELETEXSTRING ||
             type == V_ASN1_IA5STRING) {
+#ifdef MAGMA_ENABLE_FIXES//SSL004.patch
             if (num > (int)sizeof(ebcdic_buf))
                 num = sizeof(ebcdic_buf);
             ascii2ebcdic(ebcdic_buf, q, num);
+#else//SSL004.patch
+            ascii2ebcdic(ebcdic_buf, q, (num > (int)sizeof(ebcdic_buf))
+                         ? (int)sizeof(ebcdic_buf) : num);
+#ifdef MAGMA_ENABLE_CANARIES//SSL004.patch
+            /**
+             * When `num` is greater than sizeof(ebcdic_buf), the code below
+             * will overread the `q` buffer, since it points to a fixed-size
+             * buffer whose size is less than `num`.
+             */
+            MAGMA_LOG("%MAGMA_BUG%", num > (int)sizeof(ebcdic_buf));
+#endif
+#endif
             q = ebcdic_buf;
         }
 #endif
diff --git a/crypto/x509/x509_req.c b/crypto/x509/x509_req.c
index e3f5c2add1..879b30e772 100644
--- a/crypto/x509/x509_req.c
+++ b/crypto/x509/x509_req.c
@@ -44,8 +44,13 @@ X509_REQ *X509_to_X509_REQ(X509 *x, EVP_PKEY *pkey, const EVP_MD *md)
         goto err;
 
     pktmp = X509_get0_pubkey(x);
+#ifdef MAGMA_ENABLE_FIXES//SSL012.patch
     if (pktmp == NULL)
         goto err;
+#endif
+#ifdef MAGMA_ENABLE_CANARIES
+    MAGMA_LOG("%MAGMA_BUG%",pktmp == NULL);
+#endif//SSL012.patch
     i = X509_REQ_set_pubkey(ret, pktmp);
     if (!i)
         goto err;
diff --git a/crypto/x509/x509_vfy.c b/crypto/x509/x509_vfy.c
index 18c6172c98..c83ea9b0e5 100644
--- a/crypto/x509/x509_vfy.c
+++ b/crypto/x509/x509_vfy.c
@@ -1069,10 +1069,21 @@ static int get_crl_sk(X509_STORE_CTX *ctx, X509_CRL **pcrl, X509_CRL **pdcrl,
         crl = sk_X509_CRL_value(crls, i);
         reasons = *preasons;
         crl_score = get_crl_score(ctx, &crl_issuer, &reasons, crl, x);
+#ifdef MAGMA_ENABLE_FIXES//SSL017.patch
         if (crl_score < best_score || crl_score == 0)
+#else//SSL017.patch
+        if (crl_score < best_score)
+#endif//SSL017.patch
             continue;
         /* If current CRL is equivalent use it if it is newer */
+#ifdef MAGMA_ENABLE_FIXES//SSL017.patch
         if (crl_score == best_score && best_crl != NULL) {
+#else//SSL017.patch
+        if (crl_score == best_score) {
+#ifdef MAGMA_ENABLE_CANARIES//SSL017.patch
+            MAGMA_LOG("%MAGMA_BUG%", best_crl == NULL);
+#endif//SSL017.patch
+#endif//SSL017.patch
             int day, sec;
 
             if (ASN1_TIME_diff(&day, &sec, X509_CRL_get0_lastUpdate(best_crl),
diff --git a/ssl/record/rec_layer_s3.c b/ssl/record/rec_layer_s3.c
index 28e02e642c..0d1378db71 100644
--- a/ssl/record/rec_layer_s3.c
+++ b/ssl/record/rec_layer_s3.c
@@ -1454,11 +1454,20 @@ int ssl3_read_bytes(SSL *s, int type, int *recvd_type, unsigned char *buf,
 
             memcpy(buf, &(rr->data[rr->off]), n);
             buf += n;
+#ifdef MAGMA_ENABLE_FIXES//SSL019.patch
             if (peek) {
                 /* Mark any zero length record as consumed CVE-2016-6305 */
                 if (SSL3_RECORD_get_length(rr) == 0)
                     SSL3_RECORD_set_read(rr);
             } else {
+#else//SSL019.patch
+#ifdef MAGMA_ENABLE_CANARIES//SSL019.patch
+            MAGMA_LOG("%MAGMA_BUG%", MAGMA_AND(peek, \
+                                MAGMA_AND(SSL3_RECORD_get_length(rr) == 0, \
+                                          !SSL3_RECORD_is_read(rr))));
+#endif//SSL019.patch
+            if (!peek) {
+#endif//SSL019.patch
                 if (s->options & SSL_OP_CLEANSE_PLAINTEXT)
                     OPENSSL_cleanse(&(rr->data[rr->off]), n);
                 SSL3_RECORD_sub_length(rr, n);
diff --git a/ssl/statem/extensions_srvr.c b/ssl/statem/extensions_srvr.c
index e8e57cd5d9..c1e87805ca 100644
--- a/ssl/statem/extensions_srvr.c
+++ b/ssl/statem/extensions_srvr.c
@@ -329,6 +329,7 @@ int tls_parse_ctos_status_request(SSL *s, PACKET *pkt, unsigned int context,
         return 0;
     }
 
+#ifdef MAGMA_ENABLE_FIXES//SSL005.patch
     /*
      * We remove any OCSP_RESPIDs from a previous handshake
      * to prevent unbounded memory growth - CVE-2016-6304
@@ -343,6 +344,23 @@ int tls_parse_ctos_status_request(SSL *s, PACKET *pkt, unsigned int context,
     } else {
         s->ext.ocsp.ids = NULL;
     }
+#else//SSL005.patch
+    if (PACKET_remaining(&responder_id_list) > 0 && s->ext.ocsp.ids == NULL) {
+        s->ext.ocsp.ids = sk_OCSP_RESPID_new_null();
+        if (s->ext.ocsp.ids == NULL) {
+            SSLfatal(s, SSL_AD_INTERNAL_ERROR, ERR_R_MALLOC_FAILURE);
+            return 0;
+        }
+    }
+#ifdef MAGMA_ENABLE_CANARIES//SSL005.patch
+    /**
+     * If there is a pending request packet and there exists at least one
+     * previous request in the stack, then unbounded memory growth is possible.
+     */
+    MAGMA_LOG("%MAGMA_BUG%", MAGMA_AND(PACKET_remaining(&responder_id_list) > 0, \
+        sk_OCSP_RESPID_num(s->ext.ocsp.ids) > 0));
+#endif
+#endif//SSL005.patch
 
     while (PACKET_remaining(&responder_id_list) > 0) {
         OCSP_RESPID *id;
diff --git a/ssl/statem/statem.c b/ssl/statem/statem.c
index 4c463974ea..c63b50bf1d 100644
--- a/ssl/statem/statem.c
+++ b/ssl/statem/statem.c
@@ -512,7 +512,12 @@ static int grow_init_buf(SSL *s, size_t size) {
     if (size < msg_offset)
         return 0;
 
+#ifdef MAGMA_ENABLE_FIXES//SSL002.patch
     s->init_msg = s->init_buf->data + msg_offset;
+#endif
+#ifdef MAGMA_ENABLE_CANARIES//SSL002.patch
+    MAGMA_LOG("%MAGMA_BUG%", s->init_msg != (s->init_buf->data + msg_offset));
+#endif//SSL002.patch
 
     return 1;
 }
diff --git a/ssl/statem/statem_clnt.c b/ssl/statem/statem_clnt.c
index d5aa8797ff..1a7ea0c1df 100644
--- a/ssl/statem/statem_clnt.c
+++ b/ssl/statem/statem_clnt.c
@@ -2914,10 +2914,15 @@ static int tls_construct_cke_dhe(SSL *s, WPACKET *pkt)
     }
 
     ckey = ssl_generate_pkey(s, skey);
+#ifdef MAGMA_ENABLE_FIXES//SSL008.patch
     if (ckey == NULL) {
         SSLfatal(s, SSL_AD_INTERNAL_ERROR, ERR_R_INTERNAL_ERROR);
         goto err;
     }
+#endif
+#ifdef MAGMA_ENABLE_CANARIES
+    MAGMA_LOG("%MAGMA_BUG%",ckey == NULL);
+#endif//SSL008.patch
 
     if (ssl_derive(s, ckey, skey, 0) == 0) {
         /* SSLfatal() already called */
@@ -2975,10 +2980,15 @@ static int tls_construct_cke_ecdhe(SSL *s, WPACKET *pkt)
     }
 
     ckey = ssl_generate_pkey(s, skey);
+#ifdef MAGMA_ENABLE_FIXES//SSL008.patch
     if (ckey == NULL) {
         SSLfatal(s, SSL_AD_INTERNAL_ERROR, ERR_R_MALLOC_FAILURE);
         goto err;
     }
+#endif
+#ifdef MAGMA_ENABLE_CANARIES
+    MAGMA_LOG("%MAGMA_BUG%",ckey == NULL);
+#endif//SSL008.patch
 
     if (ssl_derive(s, ckey, skey, 0) == 0) {
         /* SSLfatal() already called */
diff --git a/ssl/statem/statem_dtls.c b/ssl/statem/statem_dtls.c
index 8c588fd590..3ae6a19cd6 100644
--- a/ssl/statem/statem_dtls.c
+++ b/ssl/statem/statem_dtls.c
@@ -444,12 +444,19 @@ static int dtls1_preprocess_fragment(SSL *s, struct hm_header_st *msg_hdr)
     frag_off = msg_hdr->frag_off;
     frag_len = msg_hdr->frag_len;
 
+#ifdef MAGMA_ENABLE_FIXES//SSL018.patch
     /* sanity checking */
     if ((frag_off + frag_len) > msg_len
             || msg_len > dtls1_max_handshake_message_len(s)) {
+#else//SSL018.patch
+    if ((frag_off + frag_len) > msg_len) {
+#endif//SSL018.patch
         SSLfatal(s, SSL_AD_ILLEGAL_PARAMETER, SSL_R_EXCESSIVE_MESSAGE_SIZE);
         return 0;
     }
+#ifdef MAGMA_ENABLE_CANARIES//SSL018.patch
+    MAGMA_LOG("%MAGMA_BUG%", msg_len > dtls1_max_handshake_message_len(s));
+#endif//SSL018.patch
 
     if (s->d1->r_msg_hdr.frag_off == 0) { /* first fragment */
         /*
diff --git a/ssl/t1_lib.c b/ssl/t1_lib.c
index 3579202c22..1ef3e7be79 100644
--- a/ssl/t1_lib.c
+++ b/ssl/t1_lib.c
@@ -1892,11 +1892,18 @@ SSL_TICKET_STATUS tls_decrypt_ticket(SSL *s, const unsigned char *etick,
     }
 
     /* Sanity check ticket length: must exceed keyname + IV + HMAC */
+#ifdef MAGMA_ENABLE_FIXES//SSL020.patch
     if (eticklen <=
         TLSEXT_KEYNAME_LENGTH + EVP_CIPHER_CTX_get_iv_length(ctx) + mlen) {
+#else//SSL020.patch
+    if (eticklen < 48) {
+#endif//SSL020.patch
         ret = SSL_TICKET_NO_DECRYPT;
         goto end;
     }
+#ifdef MAGMA_ENABLE_CANARIES//SSL020.patch
+    MAGMA_LOG("%MAGMA_BUG%", eticklen <= TLSEXT_KEYNAME_LENGTH + EVP_CIPHER_CTX_get_iv_length(ctx) + mlen);
+#endif//SSL020.patch
     eticklen -= mlen;
     /* Check HMAC of encrypted ticket */
     if (ssl_hmac_update(hctx, etick, eticklen) <= 0
