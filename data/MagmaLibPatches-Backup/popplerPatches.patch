diff --git a/fofi/FoFiTrueType.cc b/fofi/FoFiTrueType.cc
index ce592b8c..352a4146 100644
--- a/fofi/FoFiTrueType.cc
+++ b/fofi/FoFiTrueType.cc
@@ -1397,16 +1397,28 @@ void FoFiTrueType::cvtSfnts(FoFiOutputFunc outputFunc, void *outputStream, const
                 if ((j = seekTable(t42Tables[i].tag)) >= 0 && checkRegion(tables[j].offset, tables[j].len)) {
                     dumpString(file + tables[j].offset, tables[j].len, outputFunc, outputStream);
                 } else if (needVerticalMetrics && i == t42VheaTable) {
+#ifdef MAGMA_ENABLE_FIXES//PDF017.patch
                     if (unlikely(length > (int)sizeof(vheaTab))) {
                         error(errSyntaxWarning, -1, "length bigger than vheaTab size");
                         length = sizeof(vheaTab);
                     }
+#else
+#ifdef MAGMA_ENABLE_CANARIES//PDF017.patch
+                    MAGMA_LOG("%MAGMA_BUG%", length > (int)sizeof(vheaTab));
+#endif
+#endif//PDF017.patch
                     dumpString(vheaTab, length, outputFunc, outputStream);
                 } else if (needVerticalMetrics && i == t42VmtxTable) {
+#ifdef MAGMA_ENABLE_FIXES//PDF017.patch
                     if (unlikely(length > vmtxTabLength)) {
                         error(errSyntaxWarning, -1, "length bigger than vmtxTab size");
                         length = vmtxTabLength;
                     }
+#else//PDF017.patch
+#ifdef MAGMA_ENABLE_CANARIES
+                    MAGMA_LOG("%MAGMA_BUG%", length > vmtxTabLength);
+#endif
+#endif//PDF017.patch
                     dumpString(vmtxTab, length, outputFunc, outputStream);
                 }
             }
diff --git a/fofi/FoFiType1C.cc b/fofi/FoFiType1C.cc
index ca1327c2..49fba75d 100644
--- a/fofi/FoFiType1C.cc
+++ b/fofi/FoFiType1C.cc
@@ -1285,7 +1285,14 @@ void FoFiType1C::cvtGlyph(int offset, int nBytes, GooString *charBuf, const Type
                     --nOps;
                     ok = true;
                     getIndexVal(subrIdx, k, &val, &ok);
+#ifdef MAGMA_ENABLE_FIXES//PDF020.patch
                     if (likely(ok && val.pos != offset)) {
+#else
+#ifdef MAGMA_ENABLE_CANARIES
+                    MAGMA_LOG("%MAGMA_BUG%", val.pos == offset);
+#endif
+                    if(ok) {
+#endif//PDF020.patch
                         cvtGlyph(val.pos, val.len, charBuf, subrIdx, pDict, false, offsetBeingParsed);
                     }
                 } else {
@@ -1522,7 +1529,14 @@ void FoFiType1C::cvtGlyph(int offset, int nBytes, GooString *charBuf, const Type
                     --nOps;
                     ok = true;
                     getIndexVal(&gsubrIdx, k, &val, &ok);
+#ifdef MAGMA_ENABLE_FIXES//PDF020.patch
                     if (likely(ok && val.pos != offset)) {
+#else
+#ifdef MAGMA_ENABLE_CANARIES//PDF020.patch
+                    MAGMA_LOG("%MAGMA_BUG%", val.pos == offset);
+#endif
+                    if(ok) {
+#endif//PDF020.patch
                         cvtGlyph(val.pos, val.len, charBuf, subrIdx, pDict, false, offsetBeingParsed);
                     }
                 } else {
diff --git a/poppler/Annot.cc b/poppler/Annot.cc
index 9f19e22f..f48965ee 100644
--- a/poppler/Annot.cc
+++ b/poppler/Annot.cc
@@ -6048,7 +6048,14 @@ void AnnotInk::draw(Gfx *gfx, bool printing)
 
         for (int i = 0; i < inkListLength; ++i) {
             const AnnotPath *path = inkList[i];
+#ifdef MAGMA_ENABLE_FIXES//PDF018.patch
             if (path && path->getCoordsLength() != 0) {
+#else
+#ifdef MAGMA_ENABLE_CANARIES
+            MAGMA_LOG("%MAGMA_BUG%", !path);
+#endif//PDF018.patch
+            if (path->getCoordsLength() != 0) {
+#endif
                 appearBuilder.appendf("{0:.2f} {1:.2f} m\n", path->getX(0) - rect->x1, path->getY(0) - rect->y1);
                 appearBBox->extendTo(path->getX(0) - rect->x1, path->getY(0) - rect->y1);
 
diff --git a/poppler/CourierBoldObliqueWidths.pregenerated.c b/poppler/CourierBoldObliqueWidths.pregenerated.c
index 1232aeeb..5152e428 100644
--- a/poppler/CourierBoldObliqueWidths.pregenerated.c
+++ b/poppler/CourierBoldObliqueWidths.pregenerated.c
@@ -1,5 +1,5 @@
-/* ANSI-C code produced by gperf version 3.1 */
-/* Command-line: gperf poppler/CourierBoldObliqueWidths.gperf  */
+/* ANSI-C code produced by gperf version 3.0.3 */
+/* Command-line: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/gperf poppler/CourierBoldObliqueWidths.gperf  */
 /* Computed positions: -k'1-2,5,$' */
 
 #if !((' ' == 32) && ('!' == 33) && ('"' == 34) && ('#' == 35) && ('%' == 37) && ('&' == 38) && ('\'' == 39) && ('(' == 40) && (')' == 41) && ('*' == 42) && ('+' == 43) && (',' == 44) && ('-' == 45) && ('.' == 46) && ('/' == 47)           \
@@ -10,7 +10,7 @@
       && ('m' == 109) && ('n' == 110) && ('o' == 111) && ('p' == 112) && ('q' == 113) && ('r' == 114) && ('s' == 115) && ('t' == 116) && ('u' == 117) && ('v' == 118) && ('w' == 119) && ('x' == 120) && ('y' == 121) && ('z' == 122)          \
       && ('{' == 123) && ('|' == 124) && ('}' == 125) && ('~' == 126))
 /* The character set is not based on ISO-646.  */
-#    error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gperf@gnu.org>."
+#    error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gnu-gperf@gnu.org>."
 #endif
 
 #line 1 "poppler/CourierBoldObliqueWidths.gperf"
@@ -33,7 +33,7 @@ inline
 #    endif
 #endif
         static unsigned int
-        hash(register const char *str, register size_t len)
+        hash(register const char *str, register unsigned int len)
 {
     static const unsigned short asso_values[] = { 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042,
                                                   1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042,
@@ -62,7 +62,7 @@ inline
     return hval + asso_values[(unsigned char)str[len - 1]];
 }
 
-const struct BuiltinFontWidth *CourierBoldObliqueWidthsLookup(register const char *str, register size_t len)
+const struct BuiltinFontWidth *CourierBoldObliqueWidthsLookup(register const char *str, register unsigned int len)
 {
     static const struct BuiltinFontWidth wordlist[] = { { "", 0 },
 #line 90 "poppler/CourierBoldObliqueWidths.gperf"
@@ -1423,7 +1423,7 @@ const struct BuiltinFontWidth *CourierBoldObliqueWidthsLookup(register const cha
                                                         { "Gbreve", 600 } };
 
     if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH) {
-        register unsigned int key = hash(str, len);
+        unsigned int key = hash(str, len);
 
         if (key <= MAX_HASH_VALUE) {
             register const char *s = wordlist[key].name;
diff --git a/poppler/CourierBoldWidths.pregenerated.c b/poppler/CourierBoldWidths.pregenerated.c
index abb59bca..2b4692ab 100644
--- a/poppler/CourierBoldWidths.pregenerated.c
+++ b/poppler/CourierBoldWidths.pregenerated.c
@@ -1,5 +1,5 @@
-/* ANSI-C code produced by gperf version 3.1 */
-/* Command-line: gperf poppler/CourierBoldWidths.gperf  */
+/* ANSI-C code produced by gperf version 3.0.3 */
+/* Command-line: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/gperf poppler/CourierBoldWidths.gperf  */
 /* Computed positions: -k'1-2,5,$' */
 
 #if !((' ' == 32) && ('!' == 33) && ('"' == 34) && ('#' == 35) && ('%' == 37) && ('&' == 38) && ('\'' == 39) && ('(' == 40) && (')' == 41) && ('*' == 42) && ('+' == 43) && (',' == 44) && ('-' == 45) && ('.' == 46) && ('/' == 47)           \
@@ -10,7 +10,7 @@
       && ('m' == 109) && ('n' == 110) && ('o' == 111) && ('p' == 112) && ('q' == 113) && ('r' == 114) && ('s' == 115) && ('t' == 116) && ('u' == 117) && ('v' == 118) && ('w' == 119) && ('x' == 120) && ('y' == 121) && ('z' == 122)          \
       && ('{' == 123) && ('|' == 124) && ('}' == 125) && ('~' == 126))
 /* The character set is not based on ISO-646.  */
-#    error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gperf@gnu.org>."
+#    error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gnu-gperf@gnu.org>."
 #endif
 
 #line 1 "poppler/CourierBoldWidths.gperf"
@@ -33,7 +33,7 @@ inline
 #    endif
 #endif
         static unsigned int
-        hash(register const char *str, register size_t len)
+        hash(register const char *str, register unsigned int len)
 {
     static const unsigned short asso_values[] = { 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042,
                                                   1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042,
@@ -62,7 +62,7 @@ inline
     return hval + asso_values[(unsigned char)str[len - 1]];
 }
 
-const struct BuiltinFontWidth *CourierBoldWidthsLookup(register const char *str, register size_t len)
+const struct BuiltinFontWidth *CourierBoldWidthsLookup(register const char *str, register unsigned int len)
 {
     static const struct BuiltinFontWidth wordlist[] = { { "", 0 },
 #line 90 "poppler/CourierBoldWidths.gperf"
@@ -1423,7 +1423,7 @@ const struct BuiltinFontWidth *CourierBoldWidthsLookup(register const char *str,
                                                         { "Gbreve", 600 } };
 
     if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH) {
-        register unsigned int key = hash(str, len);
+        unsigned int key = hash(str, len);
 
         if (key <= MAX_HASH_VALUE) {
             register const char *s = wordlist[key].name;
diff --git a/poppler/CourierObliqueWidths.pregenerated.c b/poppler/CourierObliqueWidths.pregenerated.c
index 6bd7908e..1b7b8e4c 100644
--- a/poppler/CourierObliqueWidths.pregenerated.c
+++ b/poppler/CourierObliqueWidths.pregenerated.c
@@ -1,5 +1,5 @@
-/* ANSI-C code produced by gperf version 3.1 */
-/* Command-line: gperf poppler/CourierObliqueWidths.gperf  */
+/* ANSI-C code produced by gperf version 3.0.3 */
+/* Command-line: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/gperf poppler/CourierObliqueWidths.gperf  */
 /* Computed positions: -k'1-2,5,$' */
 
 #if !((' ' == 32) && ('!' == 33) && ('"' == 34) && ('#' == 35) && ('%' == 37) && ('&' == 38) && ('\'' == 39) && ('(' == 40) && (')' == 41) && ('*' == 42) && ('+' == 43) && (',' == 44) && ('-' == 45) && ('.' == 46) && ('/' == 47)           \
@@ -10,7 +10,7 @@
       && ('m' == 109) && ('n' == 110) && ('o' == 111) && ('p' == 112) && ('q' == 113) && ('r' == 114) && ('s' == 115) && ('t' == 116) && ('u' == 117) && ('v' == 118) && ('w' == 119) && ('x' == 120) && ('y' == 121) && ('z' == 122)          \
       && ('{' == 123) && ('|' == 124) && ('}' == 125) && ('~' == 126))
 /* The character set is not based on ISO-646.  */
-#    error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gperf@gnu.org>."
+#    error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gnu-gperf@gnu.org>."
 #endif
 
 #line 1 "poppler/CourierObliqueWidths.gperf"
@@ -33,7 +33,7 @@ inline
 #    endif
 #endif
         static unsigned int
-        hash(register const char *str, register size_t len)
+        hash(register const char *str, register unsigned int len)
 {
     static const unsigned short asso_values[] = { 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042,
                                                   1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042,
@@ -62,7 +62,7 @@ inline
     return hval + asso_values[(unsigned char)str[len - 1]];
 }
 
-const struct BuiltinFontWidth *CourierObliqueWidthsLookup(register const char *str, register size_t len)
+const struct BuiltinFontWidth *CourierObliqueWidthsLookup(register const char *str, register unsigned int len)
 {
     static const struct BuiltinFontWidth wordlist[] = { { "", 0 },
 #line 90 "poppler/CourierObliqueWidths.gperf"
@@ -1423,7 +1423,7 @@ const struct BuiltinFontWidth *CourierObliqueWidthsLookup(register const char *s
                                                         { "Gbreve", 600 } };
 
     if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH) {
-        register unsigned int key = hash(str, len);
+        unsigned int key = hash(str, len);
 
         if (key <= MAX_HASH_VALUE) {
             register const char *s = wordlist[key].name;
diff --git a/poppler/CourierWidths.pregenerated.c b/poppler/CourierWidths.pregenerated.c
index 89dc2146..fd5bd675 100644
--- a/poppler/CourierWidths.pregenerated.c
+++ b/poppler/CourierWidths.pregenerated.c
@@ -1,5 +1,5 @@
-/* ANSI-C code produced by gperf version 3.1 */
-/* Command-line: gperf poppler/CourierWidths.gperf  */
+/* ANSI-C code produced by gperf version 3.0.3 */
+/* Command-line: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/gperf poppler/CourierWidths.gperf  */
 /* Computed positions: -k'1-2,5,$' */
 
 #if !((' ' == 32) && ('!' == 33) && ('"' == 34) && ('#' == 35) && ('%' == 37) && ('&' == 38) && ('\'' == 39) && ('(' == 40) && (')' == 41) && ('*' == 42) && ('+' == 43) && (',' == 44) && ('-' == 45) && ('.' == 46) && ('/' == 47)           \
@@ -10,7 +10,7 @@
       && ('m' == 109) && ('n' == 110) && ('o' == 111) && ('p' == 112) && ('q' == 113) && ('r' == 114) && ('s' == 115) && ('t' == 116) && ('u' == 117) && ('v' == 118) && ('w' == 119) && ('x' == 120) && ('y' == 121) && ('z' == 122)          \
       && ('{' == 123) && ('|' == 124) && ('}' == 125) && ('~' == 126))
 /* The character set is not based on ISO-646.  */
-#    error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gperf@gnu.org>."
+#    error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gnu-gperf@gnu.org>."
 #endif
 
 #line 1 "poppler/CourierWidths.gperf"
@@ -33,7 +33,7 @@ inline
 #    endif
 #endif
         static unsigned int
-        hash(register const char *str, register size_t len)
+        hash(register const char *str, register unsigned int len)
 {
     static const unsigned short asso_values[] = { 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042,
                                                   1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042,
@@ -62,7 +62,7 @@ inline
     return hval + asso_values[(unsigned char)str[len - 1]];
 }
 
-const struct BuiltinFontWidth *CourierWidthsLookup(register const char *str, register size_t len)
+const struct BuiltinFontWidth *CourierWidthsLookup(register const char *str, register unsigned int len)
 {
     static const struct BuiltinFontWidth wordlist[] = { { "", 0 },
 #line 90 "poppler/CourierWidths.gperf"
@@ -1423,7 +1423,7 @@ const struct BuiltinFontWidth *CourierWidthsLookup(register const char *str, reg
                                                         { "Gbreve", 600 } };
 
     if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH) {
-        register unsigned int key = hash(str, len);
+        unsigned int key = hash(str, len);
 
         if (key <= MAX_HASH_VALUE) {
             register const char *s = wordlist[key].name;
diff --git a/poppler/FileSpec.cc b/poppler/FileSpec.cc
index 53f9384c..17561f3d 100644
--- a/poppler/FileSpec.cc
+++ b/poppler/FileSpec.cc
@@ -99,9 +99,10 @@ bool EmbFile::save2(FILE *f)
 {
     int c;
 
+#ifdef MAGMA_ENABLE_FIXES//PDF015.patch
     if (unlikely(!m_objStr.isStream()))
         return false;
-
+#endif//PDF015.patch
     m_objStr.streamReset();
     while ((c = m_objStr.streamGetChar()) != EOF) {
         fputc(c, f);
@@ -139,11 +140,22 @@ FileSpec::FileSpec(const Object *fileSpecA)
             }
         }
 
+#ifdef MAGMA_ENABLE_FIXES//PDF013.patch
         obj1 = fileSpec.dictLookup("Desc");
         if (obj1.isString()) {
             desc = obj1.getString()->copy();
         }
     }
+#else//PDF013.patch
+    }
+
+#ifdef MAGMA_ENABLE_CANARIES
+    MAGMA_LOG("%MAGMA_BUG%", !fileSpec.isDict());
+#endif
+    obj1 = fileSpec.dictLookup("Desc");
+    if (obj1.isString())
+            desc = obj1.getString()->copy();
+#endif//PDF013.patch
 }
 
 FileSpec::~FileSpec()
diff --git a/poppler/GfxState.cc b/poppler/GfxState.cc
index 4b0d6796..d81d3d4f 100644
--- a/poppler/GfxState.cc
+++ b/poppler/GfxState.cc
@@ -2665,16 +2665,20 @@ void GfxSeparationColorSpace::getGray(const GfxColor *color, GfxGray *gray) cons
     GfxColor color2;
     int i;
 
+#ifdef MAGMA_ENABLE_FIXES//PDF022.patch
     if (alt->getMode() == csDeviceGray && name->cmp("Black") == 0) {
         *gray = clip01(gfxColorComp1 - color->c[0]);
     } else {
+#else
         x = colToDbl(color->c[0]);
         func->transform(&x, c);
         for (i = 0; i < alt->getNComps(); ++i) {
             color2.c[i] = dblToCol(c[i]);
         }
         alt->getGray(&color2, gray);
+#ifdef MAGMA_ENABLE_FIXES
     }
+#endif//PDF022.patch
 }
 
 void GfxSeparationColorSpace::getRGB(const GfxColor *color, GfxRGB *rgb) const
@@ -2684,11 +2688,13 @@ void GfxSeparationColorSpace::getRGB(const GfxColor *color, GfxRGB *rgb) const
     GfxColor color2;
     int i;
 
+#ifdef MAGMA_ENABLE_FIXES//PDF022.patch
     if (alt->getMode() == csDeviceGray && name->cmp("Black") == 0) {
         rgb->r = clip01(gfxColorComp1 - color->c[0]);
         rgb->g = clip01(gfxColorComp1 - color->c[0]);
         rgb->b = clip01(gfxColorComp1 - color->c[0]);
     } else {
+#else//PDF022.patch
         x = colToDbl(color->c[0]);
         func->transform(&x, c);
         const int altNComps = alt->getNComps();
@@ -2701,7 +2707,9 @@ void GfxSeparationColorSpace::getRGB(const GfxColor *color, GfxRGB *rgb) const
             }
         }
         alt->getRGB(&color2, rgb);
+#ifdef MAGMA_ENABLE_FIXES//PDF022.patch
     }
+#endif//PDF022.patch
 }
 
 void GfxSeparationColorSpace::getCMYK(const GfxColor *color, GfxCMYK *cmyk) const
@@ -2711,6 +2719,7 @@ void GfxSeparationColorSpace::getCMYK(const GfxColor *color, GfxCMYK *cmyk) cons
     GfxColor color2;
     int i;
 
+#ifdef MAGMA_ENABLE_FIXES//PDF022.patch
     if (name->cmp("Black") == 0) {
         cmyk->c = 0;
         cmyk->m = 0;
@@ -2732,13 +2741,16 @@ void GfxSeparationColorSpace::getCMYK(const GfxColor *color, GfxCMYK *cmyk) cons
         cmyk->y = color->c[0];
         cmyk->k = 0;
     } else {
+#else//PDF022.patch
         x = colToDbl(color->c[0]);
         func->transform(&x, c);
         for (i = 0; i < alt->getNComps(); ++i) {
             color2.c[i] = dblToCol(c[i]);
         }
         alt->getCMYK(&color2, cmyk);
+#ifdef MAGMA_ENABLE_FIXES//PDF022.patch
     }
+#endif//PDF022.patch
 }
 
 void GfxSeparationColorSpace::getDeviceN(const GfxColor *color, GfxColor *deviceN) const
@@ -4796,7 +4808,11 @@ GfxGouraudTriangleShading *GfxGouraudTriangleShading::parse(GfxResources *res, i
         }
     }
     delete bitBuf;
+#ifdef MAGMA_ENABLE_FIXES//PDF008.patch
     if (typeA == 5 && nVerticesA > 0 && vertsPerRow > 0) {
+#else
+    if (typeA == 5 && nVerticesA > 0) {
+#endif
         nRows = nVerticesA / vertsPerRow;
         nTrianglesA = (nRows - 1) * 2 * (vertsPerRow - 1);
         trianglesA = (int(*)[3])gmallocn_checkoverflow(nTrianglesA * 3, sizeof(int));
diff --git a/poppler/GfxState.h b/poppler/GfxState.h
index 5aeb6e24..cf3ad467 100644
--- a/poppler/GfxState.h
+++ b/poppler/GfxState.h
@@ -1208,6 +1208,7 @@ public:
 
     // Get the color space.
     GfxColorSpace *getColorSpace() { return colorSpace; }
+    GfxColorSpace *getColorSpace2() { return colorSpace2; }
 
     // Get stream decoding info.
     int getNumPixelComps() const { return nComps; }
diff --git a/poppler/HelveticaBoldObliqueWidths.pregenerated.c b/poppler/HelveticaBoldObliqueWidths.pregenerated.c
index b78ba5a5..38f8338d 100644
--- a/poppler/HelveticaBoldObliqueWidths.pregenerated.c
+++ b/poppler/HelveticaBoldObliqueWidths.pregenerated.c
@@ -1,5 +1,5 @@
-/* ANSI-C code produced by gperf version 3.1 */
-/* Command-line: gperf poppler/HelveticaBoldObliqueWidths.gperf  */
+/* ANSI-C code produced by gperf version 3.0.3 */
+/* Command-line: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/gperf poppler/HelveticaBoldObliqueWidths.gperf  */
 /* Computed positions: -k'1-2,5,$' */
 
 #if !((' ' == 32) && ('!' == 33) && ('"' == 34) && ('#' == 35) && ('%' == 37) && ('&' == 38) && ('\'' == 39) && ('(' == 40) && (')' == 41) && ('*' == 42) && ('+' == 43) && (',' == 44) && ('-' == 45) && ('.' == 46) && ('/' == 47)           \
@@ -10,7 +10,7 @@
       && ('m' == 109) && ('n' == 110) && ('o' == 111) && ('p' == 112) && ('q' == 113) && ('r' == 114) && ('s' == 115) && ('t' == 116) && ('u' == 117) && ('v' == 118) && ('w' == 119) && ('x' == 120) && ('y' == 121) && ('z' == 122)          \
       && ('{' == 123) && ('|' == 124) && ('}' == 125) && ('~' == 126))
 /* The character set is not based on ISO-646.  */
-#    error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gperf@gnu.org>."
+#    error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gnu-gperf@gnu.org>."
 #endif
 
 #line 1 "poppler/HelveticaBoldObliqueWidths.gperf"
@@ -33,7 +33,7 @@ inline
 #    endif
 #endif
         static unsigned int
-        hash(register const char *str, register size_t len)
+        hash(register const char *str, register unsigned int len)
 {
     static const unsigned short asso_values[] = { 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042,
                                                   1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042,
@@ -62,7 +62,7 @@ inline
     return hval + asso_values[(unsigned char)str[len - 1]];
 }
 
-const struct BuiltinFontWidth *HelveticaBoldObliqueWidthsLookup(register const char *str, register size_t len)
+const struct BuiltinFontWidth *HelveticaBoldObliqueWidthsLookup(register const char *str, register unsigned int len)
 {
     static const struct BuiltinFontWidth wordlist[] = { { "", 0 },
 #line 90 "poppler/HelveticaBoldObliqueWidths.gperf"
@@ -1423,7 +1423,7 @@ const struct BuiltinFontWidth *HelveticaBoldObliqueWidthsLookup(register const c
                                                         { "Gbreve", 778 } };
 
     if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH) {
-        register unsigned int key = hash(str, len);
+        unsigned int key = hash(str, len);
 
         if (key <= MAX_HASH_VALUE) {
             register const char *s = wordlist[key].name;
diff --git a/poppler/HelveticaBoldWidths.pregenerated.c b/poppler/HelveticaBoldWidths.pregenerated.c
index 0f336256..d5f200cc 100644
--- a/poppler/HelveticaBoldWidths.pregenerated.c
+++ b/poppler/HelveticaBoldWidths.pregenerated.c
@@ -1,5 +1,5 @@
-/* ANSI-C code produced by gperf version 3.1 */
-/* Command-line: gperf poppler/HelveticaBoldWidths.gperf  */
+/* ANSI-C code produced by gperf version 3.0.3 */
+/* Command-line: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/gperf poppler/HelveticaBoldWidths.gperf  */
 /* Computed positions: -k'1-2,5,$' */
 
 #if !((' ' == 32) && ('!' == 33) && ('"' == 34) && ('#' == 35) && ('%' == 37) && ('&' == 38) && ('\'' == 39) && ('(' == 40) && (')' == 41) && ('*' == 42) && ('+' == 43) && (',' == 44) && ('-' == 45) && ('.' == 46) && ('/' == 47)           \
@@ -10,7 +10,7 @@
       && ('m' == 109) && ('n' == 110) && ('o' == 111) && ('p' == 112) && ('q' == 113) && ('r' == 114) && ('s' == 115) && ('t' == 116) && ('u' == 117) && ('v' == 118) && ('w' == 119) && ('x' == 120) && ('y' == 121) && ('z' == 122)          \
       && ('{' == 123) && ('|' == 124) && ('}' == 125) && ('~' == 126))
 /* The character set is not based on ISO-646.  */
-#    error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gperf@gnu.org>."
+#    error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gnu-gperf@gnu.org>."
 #endif
 
 #line 1 "poppler/HelveticaBoldWidths.gperf"
@@ -33,7 +33,7 @@ inline
 #    endif
 #endif
         static unsigned int
-        hash(register const char *str, register size_t len)
+        hash(register const char *str, register unsigned int len)
 {
     static const unsigned short asso_values[] = { 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
                                                   1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
@@ -62,7 +62,7 @@ inline
     return hval + asso_values[(unsigned char)str[len - 1]];
 }
 
-const struct BuiltinFontWidth *HelveticaBoldWidthsLookup(register const char *str, register size_t len)
+const struct BuiltinFontWidth *HelveticaBoldWidthsLookup(register const char *str, register unsigned int len)
 {
     static const struct BuiltinFontWidth wordlist[] = { { "", 0 },
 #line 90 "poppler/HelveticaBoldWidths.gperf"
@@ -1384,7 +1384,7 @@ const struct BuiltinFontWidth *HelveticaBoldWidthsLookup(register const char *st
                                                         { "R", 722 } };
 
     if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH) {
-        register unsigned int key = hash(str, len);
+        unsigned int key = hash(str, len);
 
         if (key <= MAX_HASH_VALUE) {
             register const char *s = wordlist[key].name;
diff --git a/poppler/HelveticaObliqueWidths.pregenerated.c b/poppler/HelveticaObliqueWidths.pregenerated.c
index 859ac628..d005bc24 100644
--- a/poppler/HelveticaObliqueWidths.pregenerated.c
+++ b/poppler/HelveticaObliqueWidths.pregenerated.c
@@ -1,5 +1,5 @@
-/* ANSI-C code produced by gperf version 3.1 */
-/* Command-line: gperf poppler/HelveticaObliqueWidths.gperf  */
+/* ANSI-C code produced by gperf version 3.0.3 */
+/* Command-line: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/gperf poppler/HelveticaObliqueWidths.gperf  */
 /* Computed positions: -k'1-2,5,$' */
 
 #if !((' ' == 32) && ('!' == 33) && ('"' == 34) && ('#' == 35) && ('%' == 37) && ('&' == 38) && ('\'' == 39) && ('(' == 40) && (')' == 41) && ('*' == 42) && ('+' == 43) && (',' == 44) && ('-' == 45) && ('.' == 46) && ('/' == 47)           \
@@ -10,7 +10,7 @@
       && ('m' == 109) && ('n' == 110) && ('o' == 111) && ('p' == 112) && ('q' == 113) && ('r' == 114) && ('s' == 115) && ('t' == 116) && ('u' == 117) && ('v' == 118) && ('w' == 119) && ('x' == 120) && ('y' == 121) && ('z' == 122)          \
       && ('{' == 123) && ('|' == 124) && ('}' == 125) && ('~' == 126))
 /* The character set is not based on ISO-646.  */
-#    error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gperf@gnu.org>."
+#    error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gnu-gperf@gnu.org>."
 #endif
 
 #line 1 "poppler/HelveticaObliqueWidths.gperf"
@@ -33,7 +33,7 @@ inline
 #    endif
 #endif
         static unsigned int
-        hash(register const char *str, register size_t len)
+        hash(register const char *str, register unsigned int len)
 {
     static const unsigned short asso_values[] = { 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042,
                                                   1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042,
@@ -62,7 +62,7 @@ inline
     return hval + asso_values[(unsigned char)str[len - 1]];
 }
 
-const struct BuiltinFontWidth *HelveticaObliqueWidthsLookup(register const char *str, register size_t len)
+const struct BuiltinFontWidth *HelveticaObliqueWidthsLookup(register const char *str, register unsigned int len)
 {
     static const struct BuiltinFontWidth wordlist[] = { { "", 0 },
 #line 90 "poppler/HelveticaObliqueWidths.gperf"
@@ -1423,7 +1423,7 @@ const struct BuiltinFontWidth *HelveticaObliqueWidthsLookup(register const char
                                                         { "Gbreve", 778 } };
 
     if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH) {
-        register unsigned int key = hash(str, len);
+        unsigned int key = hash(str, len);
 
         if (key <= MAX_HASH_VALUE) {
             register const char *s = wordlist[key].name;
diff --git a/poppler/HelveticaWidths.pregenerated.c b/poppler/HelveticaWidths.pregenerated.c
index 41eeb1f1..19bd0c38 100644
--- a/poppler/HelveticaWidths.pregenerated.c
+++ b/poppler/HelveticaWidths.pregenerated.c
@@ -1,5 +1,5 @@
-/* ANSI-C code produced by gperf version 3.1 */
-/* Command-line: gperf poppler/HelveticaWidths.gperf  */
+/* ANSI-C code produced by gperf version 3.0.3 */
+/* Command-line: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/gperf poppler/HelveticaWidths.gperf  */
 /* Computed positions: -k'1-2,5,$' */
 
 #if !((' ' == 32) && ('!' == 33) && ('"' == 34) && ('#' == 35) && ('%' == 37) && ('&' == 38) && ('\'' == 39) && ('(' == 40) && (')' == 41) && ('*' == 42) && ('+' == 43) && (',' == 44) && ('-' == 45) && ('.' == 46) && ('/' == 47)           \
@@ -10,7 +10,7 @@
       && ('m' == 109) && ('n' == 110) && ('o' == 111) && ('p' == 112) && ('q' == 113) && ('r' == 114) && ('s' == 115) && ('t' == 116) && ('u' == 117) && ('v' == 118) && ('w' == 119) && ('x' == 120) && ('y' == 121) && ('z' == 122)          \
       && ('{' == 123) && ('|' == 124) && ('}' == 125) && ('~' == 126))
 /* The character set is not based on ISO-646.  */
-#    error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gperf@gnu.org>."
+#    error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gnu-gperf@gnu.org>."
 #endif
 
 #line 1 "poppler/HelveticaWidths.gperf"
@@ -33,7 +33,7 @@ inline
 #    endif
 #endif
         static unsigned int
-        hash(register const char *str, register size_t len)
+        hash(register const char *str, register unsigned int len)
 {
     static const unsigned short asso_values[] = { 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042,
                                                   1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042,
@@ -62,7 +62,7 @@ inline
     return hval + asso_values[(unsigned char)str[len - 1]];
 }
 
-const struct BuiltinFontWidth *HelveticaWidthsLookup(register const char *str, register size_t len)
+const struct BuiltinFontWidth *HelveticaWidthsLookup(register const char *str, register unsigned int len)
 {
     static const struct BuiltinFontWidth wordlist[] = { { "", 0 },
 #line 90 "poppler/HelveticaWidths.gperf"
@@ -1423,7 +1423,7 @@ const struct BuiltinFontWidth *HelveticaWidthsLookup(register const char *str, r
                                                         { "Gbreve", 778 } };
 
     if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH) {
-        register unsigned int key = hash(str, len);
+        unsigned int key = hash(str, len);
 
         if (key <= MAX_HASH_VALUE) {
             register const char *s = wordlist[key].name;
diff --git a/poppler/JBIG2Stream.cc b/poppler/JBIG2Stream.cc
index 725b2cf9..69fbde21 100644
--- a/poppler/JBIG2Stream.cc
+++ b/poppler/JBIG2Stream.cc
@@ -808,8 +808,13 @@ void JBIG2Bitmap::combine(JBIG2Bitmap *bitmap, int x, int y, unsigned int combOp
     oneByte = x0 == ((x1 - 1) & ~7);
 
     for (yy = y0; yy < y1; ++yy) {
+#ifdef MAGMA_ENABLE_FIXES//PDF019.patch
         if (unlikely((y + yy >= h) || (y + yy < 0)))
             continue;
+#endif
+#ifdef MAGMA_ENABLE_CANARIES
+        MAGMA_LOG("%MAGMA_BUG%", MAGMA_OR(y + yy >= h, y + yy < 0));
+#endif//PDF019.patch
 
         // one byte per line -- need to mask both left and right side
         if (oneByte) {
diff --git a/poppler/JPEG2000Stream.cc b/poppler/JPEG2000Stream.cc
index 36da2fcd..19bd8dfb 100644
--- a/poppler/JPEG2000Stream.cc
+++ b/poppler/JPEG2000Stream.cc
@@ -247,8 +247,15 @@ void JPXStream::init()
     }
 
     int bufSize = BUFFER_INITIAL_SIZE;
+#ifdef MAGMA_ENABLE_FIXES//PDF002.patch
     if (oLen.isInt() && oLen.getInt() > 0)
         bufSize = oLen.getInt();
+#else
+#ifdef MAGMA_ENABLE_CANARIES//PDF002.patch
+    MAGMA_LOG("%MAGMA_BUG%", oLen.getInt() < 0);
+#endif
+    if (oLen.isInt()) bufSize = oLen.getInt();
+#endif//PDF002.patch
 
     bool indexed = false;
     if (cspace.isArray() && cspace.arrayGetLength() > 0) {
@@ -294,11 +301,16 @@ void JPXStream::init()
                 break;
             }
             const int componentPixels = priv->image->comps[component].w * priv->image->comps[component].h;
+#ifdef MAGMA_ENABLE_FIXES//PDF005.patch
             if (componentPixels != priv->npixels) {
                 error(errSyntaxWarning, -1, "Component {0:d} has different WxH than component 0", component);
                 close();
                 break;
             }
+#endif
+#ifdef MAGMA_ENABLE_CANARIES
+            MAGMA_LOG("%MAGMA_BUG%", componentPixels != priv->npixels);
+#endif//PDF005.patch
             unsigned char *cdata = (unsigned char *)priv->image->comps[component].data;
             int adjust = 0;
             int depth = priv->image->comps[component].prec;
diff --git a/poppler/Parser.cc b/poppler/Parser.cc
index 03cec1dc..c4683ac8 100644
--- a/poppler/Parser.cc
+++ b/poppler/Parser.cc
@@ -181,10 +181,14 @@ Object Parser::getObj(bool simpleOnly, const unsigned char *fileKey, CryptAlgori
             shift();
             shift();
 
+#ifdef MAGMA_ENABLE_FIXES//PDF016.patch
             if (unlikely(num <= 0 || gen < 0)) {
                 return Object();
             }
-
+#endif
+#ifdef MAGMA_ENABLE_CANARIES
+            MAGMA_LOG("%MAGMA_BUG%", MAGMA_OR(num <=0, gen < 0));
+#endif//PDF016.patch
             Ref r;
             r.num = num;
             r.gen = gen;
@@ -274,9 +278,15 @@ Stream *Parser::makeStream(Object &&dict, const unsigned char *fileKey, CryptAlg
     if (unlikely(length < 0)) {
         return nullptr;
     }
+
+#ifdef MAGMA_ENABLE_FIXES//PDF012.patch
     if (unlikely(pos > LLONG_MAX - length)) {
         return nullptr;
     }
+#endif
+#ifdef MAGMA_ENABLE_CANARIES
+    MAGMA_LOG("%MAGMA_BUG%", pos > LLONG_MAX - length);
+#endif//PDF012.patch
     lexer.setPos(pos + length);
 
     // refill token buffers and check for 'endstream'
@@ -298,8 +308,15 @@ Stream *Parser::makeStream(Object &&dict, const unsigned char *fileKey, CryptAlg
             // When building the xref we can't use it so use this
             // kludge for broken PDF files: just add 5k to the length, and
             // hope its enough
+#ifdef MAGMA_ENABLE_FIXES//PDF009.patch
             if (length < LLONG_MAX - pos - 5000)
                 length += 5000;
+#else
+#ifdef MAGMA_ENABLE_CANARIES
+            MAGMA_LOG("%MAGMA_BUG%", length >= LLONG_MAX - pos - 5000);
+#endif
+            length += 5000;
+#endif//PDF009.patch
         }
     }
 
diff --git a/poppler/SplashOutputDev.cc b/poppler/SplashOutputDev.cc
index 3fd590b8..dcdcb160 100644
--- a/poppler/SplashOutputDev.cc
+++ b/poppler/SplashOutputDev.cc
@@ -2453,7 +2453,14 @@ void SplashOutputDev::type3D1(GfxState *state, double wx, double wy, double llx,
     int i, j;
 
     // ignore multiple d0/d1 operators
+#ifdef MAGMA_ENABLE_FIXES//PDF010.patch
     if (!t3GlyphStack || t3GlyphStack->haveDx) {
+#else
+#ifdef MAGMA_ENABLE_CANARIES//PDF010.patch
+    MAGMA_LOG("%MAGMA_BUG%", t3GlyphStack == nullptr);
+#endif
+    if (t3GlyphStack->haveDx) {
+#endif//PDF010.patch
         return;
     }
     t3GlyphStack->haveDx = true;
@@ -4280,10 +4287,15 @@ bool SplashOutputDev::tilingPatternFill(GfxState *state, Gfx *gfxA, Catalog *cat
         surface_width = (int)ceil(fabs(kx));
         surface_height = (int)ceil(fabs(ky));
         // adjust repeat values to completely fill region
+#ifdef MAGMA_ENABLE_FIXES//PDF001.patch
         if (unlikely(surface_width == 0 || surface_height == 0)) {
             state->setCTM(savedCTM[0], savedCTM[1], savedCTM[2], savedCTM[3], savedCTM[4], savedCTM[5]);
             return false;
         }
+#endif
+#ifdef MAGMA_ENABLE_CANARIES
+        MAGMA_LOG("%MAGMA_BUG%", MAGMA_OR(surface_width == 0, surface_height == 0));
+#endif//PDF001.patch
         repeatX = result_width / surface_width;
         repeatY = result_height / surface_height;
         if (surface_width * repeatX < result_width)
diff --git a/poppler/Stream.cc b/poppler/Stream.cc
index 09773861..ec7c0a05 100644
--- a/poppler/Stream.cc
+++ b/poppler/Stream.cc
@@ -583,7 +583,14 @@ ImageStream::ImageStream(Stream *strA, int widthA, int nCompsA, int nBitsA)
 
     nVals = width * nComps;
     inputLineSize = (nVals * nBits + 7) >> 3;
+#ifdef MAGMA_ENABLE_FIXES//PDF021.patch
     if (nComps <= 0 || nBits <= 0 || nVals > INT_MAX / nBits - 7 || width > INT_MAX / nComps) {
+#else
+#ifdef MAGMA_ENABLE_CANARIES
+    MAGMA_LOG("%MAGMA_BUG%", nComps <= 0);
+#endif//PDF021.patch
+    if (nBits <= 0 || nVals > INT_MAX / nBits - 7 || width > INT_MAX / nComps) {
+#endif
         inputLineSize = -1;
     }
     inputLine = (unsigned char *)gmallocn_checkoverflow(inputLineSize, sizeof(char));
@@ -595,7 +602,14 @@ ImageStream::ImageStream(Stream *strA, int widthA, int nCompsA, int nBitsA)
         } else {
             imgLineSize = nVals;
         }
+#ifdef MAGMA_ENABLE_FIXES//PDF021.patch
         if (nComps <= 0 || width > INT_MAX / nComps) {
+#else
+#ifdef MAGMA_ENABLE_CANARIES
+        MAGMA_LOG("%MAGMA_BUG%", nComps <= 0);
+#endif//PDF021.patch
+        if (width > INT_MAX / nComps) {
+#endif//PDF021.patch
             imgLineSize = -1;
         }
         imgLine = (unsigned char *)gmallocn_checkoverflow(imgLineSize, sizeof(unsigned char));
@@ -644,9 +658,11 @@ unsigned char *ImageStream::getLine()
     }
 
     int readChars = str->doGetChars(inputLineSize, inputLine);
+#ifdef MAGMA_ENABLE_FIXES
     if (unlikely(readChars == -1)) {
         readChars = 0;
     }
+#endif//PDF007.patch
     for (; readChars < inputLineSize; readChars++)
         inputLine[readChars] = EOF;
     if (nBits == 1) {
diff --git a/poppler/SymbolWidths.pregenerated.c b/poppler/SymbolWidths.pregenerated.c
index 6c3c2538..b55eaa35 100644
--- a/poppler/SymbolWidths.pregenerated.c
+++ b/poppler/SymbolWidths.pregenerated.c
@@ -1,5 +1,5 @@
-/* ANSI-C code produced by gperf version 3.1 */
-/* Command-line: gperf poppler/SymbolWidths.gperf  */
+/* ANSI-C code produced by gperf version 3.0.3 */
+/* Command-line: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/gperf poppler/SymbolWidths.gperf  */
 /* Computed positions: -k'1-2,4-5,$' */
 
 #if !((' ' == 32) && ('!' == 33) && ('"' == 34) && ('#' == 35) && ('%' == 37) && ('&' == 38) && ('\'' == 39) && ('(' == 40) && (')' == 41) && ('*' == 42) && ('+' == 43) && (',' == 44) && ('-' == 45) && ('.' == 46) && ('/' == 47)           \
@@ -10,7 +10,7 @@
       && ('m' == 109) && ('n' == 110) && ('o' == 111) && ('p' == 112) && ('q' == 113) && ('r' == 114) && ('s' == 115) && ('t' == 116) && ('u' == 117) && ('v' == 118) && ('w' == 119) && ('x' == 120) && ('y' == 121) && ('z' == 122)          \
       && ('{' == 123) && ('|' == 124) && ('}' == 125) && ('~' == 126))
 /* The character set is not based on ISO-646.  */
-#    error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gperf@gnu.org>."
+#    error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gnu-gperf@gnu.org>."
 #endif
 
 #line 1 "poppler/SymbolWidths.gperf"
@@ -33,7 +33,7 @@ inline
 #    endif
 #endif
         static unsigned int
-        hash(register const char *str, register size_t len)
+        hash(register const char *str, register unsigned int len)
 {
     static const unsigned short asso_values[] = { 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407,
                                                   407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 80,  407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 407, 60,  10,  5,   0,   45,  407, 25,  407, 25,
@@ -62,7 +62,7 @@ inline
     return hval + asso_values[(unsigned char)str[len - 1]];
 }
 
-const struct BuiltinFontWidth *SymbolWidthsLookup(register const char *str, register size_t len)
+const struct BuiltinFontWidth *SymbolWidthsLookup(register const char *str, register unsigned int len)
 {
     static const struct BuiltinFontWidth wordlist[] = { { "", 0 },
                                                         { "", 0 },
@@ -663,7 +663,7 @@ const struct BuiltinFontWidth *SymbolWidthsLookup(register const char *str, regi
                                                         { "omega1", 713 } };
 
     if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH) {
-        register unsigned int key = hash(str, len);
+        unsigned int key = hash(str, len);
 
         if (key <= MAX_HASH_VALUE) {
             register const char *s = wordlist[key].name;
diff --git a/poppler/TimesBoldItalicWidths.pregenerated.c b/poppler/TimesBoldItalicWidths.pregenerated.c
index a7c9a114..867e00aa 100644
--- a/poppler/TimesBoldItalicWidths.pregenerated.c
+++ b/poppler/TimesBoldItalicWidths.pregenerated.c
@@ -1,5 +1,5 @@
-/* ANSI-C code produced by gperf version 3.1 */
-/* Command-line: gperf poppler/TimesBoldItalicWidths.gperf  */
+/* ANSI-C code produced by gperf version 3.0.3 */
+/* Command-line: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/gperf poppler/TimesBoldItalicWidths.gperf  */
 /* Computed positions: -k'1-2,5,$' */
 
 #if !((' ' == 32) && ('!' == 33) && ('"' == 34) && ('#' == 35) && ('%' == 37) && ('&' == 38) && ('\'' == 39) && ('(' == 40) && (')' == 41) && ('*' == 42) && ('+' == 43) && (',' == 44) && ('-' == 45) && ('.' == 46) && ('/' == 47)           \
@@ -10,7 +10,7 @@
       && ('m' == 109) && ('n' == 110) && ('o' == 111) && ('p' == 112) && ('q' == 113) && ('r' == 114) && ('s' == 115) && ('t' == 116) && ('u' == 117) && ('v' == 118) && ('w' == 119) && ('x' == 120) && ('y' == 121) && ('z' == 122)          \
       && ('{' == 123) && ('|' == 124) && ('}' == 125) && ('~' == 126))
 /* The character set is not based on ISO-646.  */
-#    error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gperf@gnu.org>."
+#    error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gnu-gperf@gnu.org>."
 #endif
 
 #line 1 "poppler/TimesBoldItalicWidths.gperf"
@@ -33,7 +33,7 @@ inline
 #    endif
 #endif
         static unsigned int
-        hash(register const char *str, register size_t len)
+        hash(register const char *str, register unsigned int len)
 {
     static const unsigned short asso_values[] = { 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042,
                                                   1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042,
@@ -62,7 +62,7 @@ inline
     return hval + asso_values[(unsigned char)str[len - 1]];
 }
 
-const struct BuiltinFontWidth *TimesBoldItalicWidthsLookup(register const char *str, register size_t len)
+const struct BuiltinFontWidth *TimesBoldItalicWidthsLookup(register const char *str, register unsigned int len)
 {
     static const struct BuiltinFontWidth wordlist[] = { { "", 0 },
 #line 90 "poppler/TimesBoldItalicWidths.gperf"
@@ -1423,7 +1423,7 @@ const struct BuiltinFontWidth *TimesBoldItalicWidthsLookup(register const char *
                                                         { "Gbreve", 722 } };
 
     if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH) {
-        register unsigned int key = hash(str, len);
+        unsigned int key = hash(str, len);
 
         if (key <= MAX_HASH_VALUE) {
             register const char *s = wordlist[key].name;
diff --git a/poppler/TimesBoldWidths.pregenerated.c b/poppler/TimesBoldWidths.pregenerated.c
index 841a9911..bc18dafd 100644
--- a/poppler/TimesBoldWidths.pregenerated.c
+++ b/poppler/TimesBoldWidths.pregenerated.c
@@ -1,5 +1,5 @@
-/* ANSI-C code produced by gperf version 3.1 */
-/* Command-line: gperf poppler/TimesBoldWidths.gperf  */
+/* ANSI-C code produced by gperf version 3.0.3 */
+/* Command-line: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/gperf poppler/TimesBoldWidths.gperf  */
 /* Computed positions: -k'1-2,5,$' */
 
 #if !((' ' == 32) && ('!' == 33) && ('"' == 34) && ('#' == 35) && ('%' == 37) && ('&' == 38) && ('\'' == 39) && ('(' == 40) && (')' == 41) && ('*' == 42) && ('+' == 43) && (',' == 44) && ('-' == 45) && ('.' == 46) && ('/' == 47)           \
@@ -10,7 +10,7 @@
       && ('m' == 109) && ('n' == 110) && ('o' == 111) && ('p' == 112) && ('q' == 113) && ('r' == 114) && ('s' == 115) && ('t' == 116) && ('u' == 117) && ('v' == 118) && ('w' == 119) && ('x' == 120) && ('y' == 121) && ('z' == 122)          \
       && ('{' == 123) && ('|' == 124) && ('}' == 125) && ('~' == 126))
 /* The character set is not based on ISO-646.  */
-#    error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gperf@gnu.org>."
+#    error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gnu-gperf@gnu.org>."
 #endif
 
 #line 1 "poppler/TimesBoldWidths.gperf"
@@ -33,7 +33,7 @@ inline
 #    endif
 #endif
         static unsigned int
-        hash(register const char *str, register size_t len)
+        hash(register const char *str, register unsigned int len)
 {
     static const unsigned short asso_values[] = { 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042,
                                                   1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042,
@@ -62,7 +62,7 @@ inline
     return hval + asso_values[(unsigned char)str[len - 1]];
 }
 
-const struct BuiltinFontWidth *TimesBoldWidthsLookup(register const char *str, register size_t len)
+const struct BuiltinFontWidth *TimesBoldWidthsLookup(register const char *str, register unsigned int len)
 {
     static const struct BuiltinFontWidth wordlist[] = { { "", 0 },
 #line 90 "poppler/TimesBoldWidths.gperf"
@@ -1423,7 +1423,7 @@ const struct BuiltinFontWidth *TimesBoldWidthsLookup(register const char *str, r
                                                         { "Gbreve", 778 } };
 
     if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH) {
-        register unsigned int key = hash(str, len);
+        unsigned int key = hash(str, len);
 
         if (key <= MAX_HASH_VALUE) {
             register const char *s = wordlist[key].name;
diff --git a/poppler/TimesItalicWidths.pregenerated.c b/poppler/TimesItalicWidths.pregenerated.c
index f97cfa3b..2efa3e59 100644
--- a/poppler/TimesItalicWidths.pregenerated.c
+++ b/poppler/TimesItalicWidths.pregenerated.c
@@ -1,5 +1,5 @@
-/* ANSI-C code produced by gperf version 3.1 */
-/* Command-line: gperf poppler/TimesItalicWidths.gperf  */
+/* ANSI-C code produced by gperf version 3.0.3 */
+/* Command-line: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/gperf poppler/TimesItalicWidths.gperf  */
 /* Computed positions: -k'1-2,5,$' */
 
 #if !((' ' == 32) && ('!' == 33) && ('"' == 34) && ('#' == 35) && ('%' == 37) && ('&' == 38) && ('\'' == 39) && ('(' == 40) && (')' == 41) && ('*' == 42) && ('+' == 43) && (',' == 44) && ('-' == 45) && ('.' == 46) && ('/' == 47)           \
@@ -10,7 +10,7 @@
       && ('m' == 109) && ('n' == 110) && ('o' == 111) && ('p' == 112) && ('q' == 113) && ('r' == 114) && ('s' == 115) && ('t' == 116) && ('u' == 117) && ('v' == 118) && ('w' == 119) && ('x' == 120) && ('y' == 121) && ('z' == 122)          \
       && ('{' == 123) && ('|' == 124) && ('}' == 125) && ('~' == 126))
 /* The character set is not based on ISO-646.  */
-#    error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gperf@gnu.org>."
+#    error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gnu-gperf@gnu.org>."
 #endif
 
 #line 1 "poppler/TimesItalicWidths.gperf"
@@ -33,7 +33,7 @@ inline
 #    endif
 #endif
         static unsigned int
-        hash(register const char *str, register size_t len)
+        hash(register const char *str, register unsigned int len)
 {
     static const unsigned short asso_values[] = { 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042,
                                                   1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042,
@@ -62,7 +62,7 @@ inline
     return hval + asso_values[(unsigned char)str[len - 1]];
 }
 
-const struct BuiltinFontWidth *TimesItalicWidthsLookup(register const char *str, register size_t len)
+const struct BuiltinFontWidth *TimesItalicWidthsLookup(register const char *str, register unsigned int len)
 {
     static const struct BuiltinFontWidth wordlist[] = { { "", 0 },
 #line 90 "poppler/TimesItalicWidths.gperf"
@@ -1423,7 +1423,7 @@ const struct BuiltinFontWidth *TimesItalicWidthsLookup(register const char *str,
                                                         { "Gbreve", 722 } };
 
     if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH) {
-        register unsigned int key = hash(str, len);
+        unsigned int key = hash(str, len);
 
         if (key <= MAX_HASH_VALUE) {
             register const char *s = wordlist[key].name;
diff --git a/poppler/TimesRomanWidths.pregenerated.c b/poppler/TimesRomanWidths.pregenerated.c
index 5ccd9bd8..d132bc7a 100644
--- a/poppler/TimesRomanWidths.pregenerated.c
+++ b/poppler/TimesRomanWidths.pregenerated.c
@@ -1,5 +1,5 @@
-/* ANSI-C code produced by gperf version 3.1 */
-/* Command-line: gperf poppler/TimesRomanWidths.gperf  */
+/* ANSI-C code produced by gperf version 3.0.3 */
+/* Command-line: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/gperf poppler/TimesRomanWidths.gperf  */
 /* Computed positions: -k'1-2,5,$' */
 
 #if !((' ' == 32) && ('!' == 33) && ('"' == 34) && ('#' == 35) && ('%' == 37) && ('&' == 38) && ('\'' == 39) && ('(' == 40) && (')' == 41) && ('*' == 42) && ('+' == 43) && (',' == 44) && ('-' == 45) && ('.' == 46) && ('/' == 47)           \
@@ -10,7 +10,7 @@
       && ('m' == 109) && ('n' == 110) && ('o' == 111) && ('p' == 112) && ('q' == 113) && ('r' == 114) && ('s' == 115) && ('t' == 116) && ('u' == 117) && ('v' == 118) && ('w' == 119) && ('x' == 120) && ('y' == 121) && ('z' == 122)          \
       && ('{' == 123) && ('|' == 124) && ('}' == 125) && ('~' == 126))
 /* The character set is not based on ISO-646.  */
-#    error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gperf@gnu.org>."
+#    error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gnu-gperf@gnu.org>."
 #endif
 
 #line 1 "poppler/TimesRomanWidths.gperf"
@@ -33,7 +33,7 @@ inline
 #    endif
 #endif
         static unsigned int
-        hash(register const char *str, register size_t len)
+        hash(register const char *str, register unsigned int len)
 {
     static const unsigned short asso_values[] = { 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042,
                                                   1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042,
@@ -62,7 +62,7 @@ inline
     return hval + asso_values[(unsigned char)str[len - 1]];
 }
 
-const struct BuiltinFontWidth *TimesRomanWidthsLookup(register const char *str, register size_t len)
+const struct BuiltinFontWidth *TimesRomanWidthsLookup(register const char *str, register unsigned int len)
 {
     static const struct BuiltinFontWidth wordlist[] = { { "", 0 },
 #line 90 "poppler/TimesRomanWidths.gperf"
@@ -1423,7 +1423,7 @@ const struct BuiltinFontWidth *TimesRomanWidthsLookup(register const char *str,
                                                         { "Gbreve", 722 } };
 
     if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH) {
-        register unsigned int key = hash(str, len);
+        unsigned int key = hash(str, len);
 
         if (key <= MAX_HASH_VALUE) {
             register const char *s = wordlist[key].name;
diff --git a/poppler/XRef.cc b/poppler/XRef.cc
index 3350f6e9..d84d6a86 100644
--- a/poppler/XRef.cc
+++ b/poppler/XRef.cc
@@ -1668,18 +1668,24 @@ DummyXRefEntry dummyXRefEntry;
 
 XRefEntry *XRef::getEntry(int i, bool complainIfMissing)
 {
+#ifdef MAGMA_ENABLE_FIXES//PDF011.patch
     if (unlikely(i < 0)) {
         error(errInternal, -1, "Request for invalid XRef entry [{0:d}]", i);
         return &dummyXRefEntry;
     }
-
+#endif
+#ifdef MAGMA_ENABLE_CANARIES
+    MAGMA_LOG("%MAGMA_BUG%", i < 0);
+#endif//PDF011.patch
     if (i >= size || entries[i].type == xrefEntryNone) {
 
         if ((!xRefStream) && mainXRefEntriesOffset) {
+#ifdef MAGMA_ENABLE_FIXES//PDF014.patch
             if (unlikely(i >= capacity)) {
                 error(errInternal, -1, "Request for out-of-bounds XRef entry [{0:d}]", i);
                 return &dummyXRefEntry;
             }
+#endif//PDF014.patch
 
             if (!parseEntry(mainXRefEntriesOffset + 20 * i, &entries[i])) {
                 error(errSyntaxError, -1, "Failed to parse XRef entry [{0:d}].", i);
diff --git a/poppler/ZapfDingbatsWidths.pregenerated.c b/poppler/ZapfDingbatsWidths.pregenerated.c
index a42659e4..85f51f38 100644
--- a/poppler/ZapfDingbatsWidths.pregenerated.c
+++ b/poppler/ZapfDingbatsWidths.pregenerated.c
@@ -1,5 +1,5 @@
-/* ANSI-C code produced by gperf version 3.1 */
-/* Command-line: gperf poppler/ZapfDingbatsWidths.gperf  */
+/* ANSI-C code produced by gperf version 3.0.3 */
+/* Command-line: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/gperf poppler/ZapfDingbatsWidths.gperf  */
 /* Computed positions: -k'2-4' */
 
 #if !((' ' == 32) && ('!' == 33) && ('"' == 34) && ('#' == 35) && ('%' == 37) && ('&' == 38) && ('\'' == 39) && ('(' == 40) && (')' == 41) && ('*' == 42) && ('+' == 43) && (',' == 44) && ('-' == 45) && ('.' == 46) && ('/' == 47)           \
@@ -10,7 +10,7 @@
       && ('m' == 109) && ('n' == 110) && ('o' == 111) && ('p' == 112) && ('q' == 113) && ('r' == 114) && ('s' == 115) && ('t' == 116) && ('u' == 117) && ('v' == 118) && ('w' == 119) && ('x' == 120) && ('y' == 121) && ('z' == 122)          \
       && ('{' == 123) && ('|' == 124) && ('}' == 125) && ('~' == 126))
 /* The character set is not based on ISO-646.  */
-#    error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gperf@gnu.org>."
+#    error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gnu-gperf@gnu.org>."
 #endif
 
 #line 1 "poppler/ZapfDingbatsWidths.gperf"
@@ -33,7 +33,7 @@ inline
 #    endif
 #endif
         static unsigned int
-        hash(register const char *str, register size_t len)
+        hash(register const char *str, register unsigned int len)
 {
     static const unsigned short asso_values[] = { 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
                                                   403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 35,  18,  180, 160, 140, 120, 100, 80,  60,  15,  195, 185, 217, 207, 218, 203, 0,   5,   10,  200,
@@ -59,7 +59,7 @@ inline
     return hval;
 }
 
-const struct BuiltinFontWidth *ZapfDingbatsWidthsLookup(register const char *str, register size_t len)
+const struct BuiltinFontWidth *ZapfDingbatsWidthsLookup(register const char *str, register unsigned int len)
 {
     static const struct BuiltinFontWidth wordlist[] = { { "", 0 },        { "", 0 },
 #line 84 "poppler/ZapfDingbatsWidths.gperf"
@@ -468,7 +468,7 @@ const struct BuiltinFontWidth *ZapfDingbatsWidthsLookup(register const char *str
                                                         { "a125", 788 } };
 
     if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH) {
-        register unsigned int key = hash(str, len);
+        unsigned int key = hash(str, len);
 
         if (key <= MAX_HASH_VALUE) {
             register const char *s = wordlist[key].name;
diff --git a/splash/Splash.cc b/splash/Splash.cc
index f5af0d60..09dca297 100644
--- a/splash/Splash.cc
+++ b/splash/Splash.cc
@@ -5666,6 +5666,7 @@ SplashError Splash::blitTransparent(SplashBitmap *src, int xSrc, int ySrc, int x
         return splashErrZeroImage;
     }
 
+#ifdef MAGMA_ENABLE_FIXES//PDF006.patch
     if (src->getWidth() - xSrc < width)
         width = src->getWidth() - xSrc;
 
@@ -5683,6 +5684,15 @@ SplashError Splash::blitTransparent(SplashBitmap *src, int xSrc, int ySrc, int x
 
     if (height < 0)
         height = 0;
+#else
+#ifdef MAGMA_ENABLE_CANARIES//PDF006.patch
+    MAGMA_LOG("%MAGMA_BUG%", MAGMA_OR(src->getWidth() - xSrc < width, \
+                        MAGMA_OR(src->getHeight() - ySrc < height, \
+                        MAGMA_OR(bitmap->getWidth() - xDest < width, \
+                        bitmap->getHeight() - yDest < height))) \
+    );
+#endif
+#endif//PDF006.patch
 
     switch (bitmap->mode) {
     case splashModeMono1:
diff --git a/splash/SplashXPathScanner.cc b/splash/SplashXPathScanner.cc
index 98a49912..3864867d 100644
--- a/splash/SplashXPathScanner.cc
+++ b/splash/SplashXPathScanner.cc
@@ -446,8 +446,13 @@ void SplashXPathScanner::clipAALine(SplashBitmap *aaBuf, int *x0, int *x1, int y
         xx = *x0 * splashAASize;
         if (yy >= yyMin && yy <= yyMax) {
             const int intersectionIndex = splashAASize * y + yy - yMin;
+#ifdef MAGMA_ENABLE_FIXES//PDF004.patch
             if (unlikely(intersectionIndex < 0 || (unsigned)intersectionIndex >= allIntersections.size()))
                 break;
+#endif
+#ifdef MAGMA_ENABLE_CANARIES//PDF004.patch
+            MAGMA_LOG("%MAGMA_BUG%", MAGMA_OR(intersectionIndex < 0, (unsigned)intersectionIndex >= allIntersections.size()));
+#endif
             const auto &line = allIntersections[intersectionIndex];
             interIdx = 0;
             interCount = 0;
diff --git a/utils/HtmlOutputDev.cc b/utils/HtmlOutputDev.cc
index bd55ac7d..42d14b78 100644
--- a/utils/HtmlOutputDev.cc
+++ b/utils/HtmlOutputDev.cc
@@ -127,11 +127,11 @@ static GooString *gstr_buff0 = nullptr; // a workspace in which I format strings
 
 #if 0
 static GooString* Dirname(GooString* str){
-  
+
   char *p=str->c_str();
   int len=str->getLength();
   for (int i=len-1;i>=0;i--)
-    if (*(p+i)==SLASH) 
+    if (*(p+i)==SLASH)
       return new GooString(p,i+1);
   return new GooString();
 }
@@ -696,7 +696,7 @@ void HtmlPage::coalesce()
     printf("x=%3d..%3d  y=%3d..%3d  size=%2d ",
 	   (int)str1->xMin, (int)str1->xMax, (int)str1->yMin, (int)str1->yMax,
 	   (int)(str1->yMax - str1->yMin));
-    printf("'%s'\n", str1->htext->c_str());  
+    printf("'%s'\n", str1->htext->c_str());
   }
   printf("\n------------------------------------------------------------\n\n");
 #endif
@@ -1205,10 +1205,10 @@ void HtmlOutputDev::startPage(int pageNumA, GfxState *state, XRef *xref)
 	exit(1);
       }
       delete fname;
-    // if(state->getRotation()!=0) 
+    // if(state->getRotation()!=0)
     //  fprintf(tin,"ROTATE=%d rotate %d neg %d neg translate\n",state->getRotation(),state->getX1(),-state->getY1());
-    // else 
-      fprintf(tin,"ROTATE=%d neg %d neg translate\n",state->getX1(),state->getY1());  
+    // else
+      fprintf(tin,"ROTATE=%d neg %d neg translate\n",state->getX1(),state->getY1());
     }
   }
 #endif
@@ -1396,8 +1396,15 @@ void HtmlOutputDev::drawPngImage(GfxState *state, Stream *str, int width, int he
         int invert_bits = 0xff;
         if (colorMap) {
             GfxGray gray;
+#ifdef MAGMA_ENABLE_FIXES//PDF003.patch
             unsigned char zero[gfxColorMaxComps];
+#else
+            unsigned char zero[1];
+#endif//PDF003.patch
             memset(zero, 0, sizeof(zero));
+#ifdef MAGMA_ENABLE_CANARIES
+            MAGMA_LOG("%MAGMA_BUG%", MAGMA_AND(colorMap->getColorSpace2() == nullptr, (size_t)colorMap->getNumPixelComps() > sizeof(zero)));
+#endif//PDF003.patch
             colorMap->getGray(zero, &gray);
             if (colToByte(gray) == 0)
                 invert_bits = 0x00;
diff --git a/utils/ImageOutputDev.cc b/utils/ImageOutputDev.cc
index 4bb9d8ab..64fd2e36 100644
--- a/utils/ImageOutputDev.cc
+++ b/utils/ImageOutputDev.cc
@@ -356,7 +356,11 @@ void ImageOutputDev::writeImageFile(ImgWriter *writer, ImageFormat format, const
     GfxRGB rgb;
     GfxCMYK cmyk;
     GfxGray gray;
+#ifdef MAGMA_ENABLE_FIXES//PDF003.patch
     unsigned char zero[gfxColorMaxComps];
+#else
+    unsigned char zero[1];
+#endif
     int invert_bits;
 
     if (writer) {
@@ -399,6 +403,9 @@ void ImageOutputDev::writeImageFile(ImgWriter *writer, ImageFormat format, const
     invert_bits = 0xff;
     if (colorMap) {
         memset(zero, 0, sizeof(zero));
+#ifdef MAGMA_ENABLE_CANARIES//PDF003.patch
+        MAGMA_LOG("%MAGMA_BUG%", MAGMA_AND(colorMap->getColorSpace2() == nullptr, (size_t)colorMap->getNumPixelComps() > sizeof(zero)));
+#endif
         colorMap->getGray(zero, &gray);
         if (colToByte(gray) == 0)
             invert_bits = 0x00;
